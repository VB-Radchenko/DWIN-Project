
DWIN Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007c88  08007c88  00017c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea8  08007ea8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea8  08007ea8  00017ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb0  08007eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b84  2000000c  08007ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  08007ec4  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001852f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309c  00000000  00000000  0003856b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0003b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cd0  00000000  00000000  0003d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e55  00000000  00000000  00066560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb110  00000000  00000000  0007c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001774c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d70  00000000  00000000  00177518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c6c 	.word	0x08007c6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007c6c 	.word	0x08007c6c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <__aeabi_uldivmod>:
 8000934:	b953      	cbnz	r3, 800094c <__aeabi_uldivmod+0x18>
 8000936:	b94a      	cbnz	r2, 800094c <__aeabi_uldivmod+0x18>
 8000938:	2900      	cmp	r1, #0
 800093a:	bf08      	it	eq
 800093c:	2800      	cmpeq	r0, #0
 800093e:	bf1c      	itt	ne
 8000940:	f04f 31ff 	movne.w	r1, #4294967295
 8000944:	f04f 30ff 	movne.w	r0, #4294967295
 8000948:	f000 b96e 	b.w	8000c28 <__aeabi_idiv0>
 800094c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000954:	f000 f806 	bl	8000964 <__udivmoddi4>
 8000958:	f8dd e004 	ldr.w	lr, [sp, #4]
 800095c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr

08000964 <__udivmoddi4>:
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	9d08      	ldr	r5, [sp, #32]
 800096a:	4604      	mov	r4, r0
 800096c:	468c      	mov	ip, r1
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 8083 	bne.w	8000a7a <__udivmoddi4+0x116>
 8000974:	428a      	cmp	r2, r1
 8000976:	4617      	mov	r7, r2
 8000978:	d947      	bls.n	8000a0a <__udivmoddi4+0xa6>
 800097a:	fab2 f282 	clz	r2, r2
 800097e:	b142      	cbz	r2, 8000992 <__udivmoddi4+0x2e>
 8000980:	f1c2 0020 	rsb	r0, r2, #32
 8000984:	fa24 f000 	lsr.w	r0, r4, r0
 8000988:	4091      	lsls	r1, r2
 800098a:	4097      	lsls	r7, r2
 800098c:	ea40 0c01 	orr.w	ip, r0, r1
 8000990:	4094      	lsls	r4, r2
 8000992:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000996:	0c23      	lsrs	r3, r4, #16
 8000998:	fbbc f6f8 	udiv	r6, ip, r8
 800099c:	fa1f fe87 	uxth.w	lr, r7
 80009a0:	fb08 c116 	mls	r1, r8, r6, ip
 80009a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a8:	fb06 f10e 	mul.w	r1, r6, lr
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d909      	bls.n	80009c4 <__udivmoddi4+0x60>
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80009b6:	f080 8119 	bcs.w	8000bec <__udivmoddi4+0x288>
 80009ba:	4299      	cmp	r1, r3
 80009bc:	f240 8116 	bls.w	8000bec <__udivmoddi4+0x288>
 80009c0:	3e02      	subs	r6, #2
 80009c2:	443b      	add	r3, r7
 80009c4:	1a5b      	subs	r3, r3, r1
 80009c6:	b2a4      	uxth	r4, r4
 80009c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80009cc:	fb08 3310 	mls	r3, r8, r0, r3
 80009d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d909      	bls.n	80009f0 <__udivmoddi4+0x8c>
 80009dc:	193c      	adds	r4, r7, r4
 80009de:	f100 33ff 	add.w	r3, r0, #4294967295
 80009e2:	f080 8105 	bcs.w	8000bf0 <__udivmoddi4+0x28c>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	f240 8102 	bls.w	8000bf0 <__udivmoddi4+0x28c>
 80009ec:	3802      	subs	r0, #2
 80009ee:	443c      	add	r4, r7
 80009f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f4:	eba4 040e 	sub.w	r4, r4, lr
 80009f8:	2600      	movs	r6, #0
 80009fa:	b11d      	cbz	r5, 8000a04 <__udivmoddi4+0xa0>
 80009fc:	40d4      	lsrs	r4, r2
 80009fe:	2300      	movs	r3, #0
 8000a00:	e9c5 4300 	strd	r4, r3, [r5]
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	b902      	cbnz	r2, 8000a0e <__udivmoddi4+0xaa>
 8000a0c:	deff      	udf	#255	; 0xff
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d150      	bne.n	8000ab8 <__udivmoddi4+0x154>
 8000a16:	1bcb      	subs	r3, r1, r7
 8000a18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	2601      	movs	r6, #1
 8000a22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a26:	0c21      	lsrs	r1, r4, #16
 8000a28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb08 f30c 	mul.w	r3, r8, ip
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0xe4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0xe2>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	f200 80e9 	bhi.w	8000c18 <__udivmoddi4+0x2b4>
 8000a46:	4684      	mov	ip, r0
 8000a48:	1ac9      	subs	r1, r1, r3
 8000a4a:	b2a3      	uxth	r3, r4
 8000a4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a58:	fb08 f800 	mul.w	r8, r8, r0
 8000a5c:	45a0      	cmp	r8, r4
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x10c>
 8000a60:	193c      	adds	r4, r7, r4
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x10a>
 8000a68:	45a0      	cmp	r8, r4
 8000a6a:	f200 80d9 	bhi.w	8000c20 <__udivmoddi4+0x2bc>
 8000a6e:	4618      	mov	r0, r3
 8000a70:	eba4 0408 	sub.w	r4, r4, r8
 8000a74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a78:	e7bf      	b.n	80009fa <__udivmoddi4+0x96>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0x12e>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	f000 80b1 	beq.w	8000be6 <__udivmoddi4+0x282>
 8000a84:	2600      	movs	r6, #0
 8000a86:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f683 	clz	r6, r3
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d14a      	bne.n	8000b30 <__udivmoddi4+0x1cc>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0x140>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80b8 	bhi.w	8000c14 <__udivmoddi4+0x2b0>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0103 	sbc.w	r1, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	468c      	mov	ip, r1
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d0a8      	beq.n	8000a04 <__udivmoddi4+0xa0>
 8000ab2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ab6:	e7a5      	b.n	8000a04 <__udivmoddi4+0xa0>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac0:	4097      	lsls	r7, r2
 8000ac2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ac6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aca:	40d9      	lsrs	r1, r3
 8000acc:	4330      	orrs	r0, r6
 8000ace:	0c03      	lsrs	r3, r0, #16
 8000ad0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ad4:	fa1f f887 	uxth.w	r8, r7
 8000ad8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f108 	mul.w	r1, r6, r8
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	fa04 f402 	lsl.w	r4, r4, r2
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x19c>
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000af2:	f080 808d 	bcs.w	8000c10 <__udivmoddi4+0x2ac>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 808a 	bls.w	8000c10 <__udivmoddi4+0x2ac>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	443b      	add	r3, r7
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b281      	uxth	r1, r0
 8000b04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb00 f308 	mul.w	r3, r0, r8
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x1c4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b1e:	d273      	bcs.n	8000c08 <__udivmoddi4+0x2a4>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d971      	bls.n	8000c08 <__udivmoddi4+0x2a4>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4439      	add	r1, r7
 8000b28:	1acb      	subs	r3, r1, r3
 8000b2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b2e:	e778      	b.n	8000a22 <__udivmoddi4+0xbe>
 8000b30:	f1c6 0c20 	rsb	ip, r6, #32
 8000b34:	fa03 f406 	lsl.w	r4, r3, r6
 8000b38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b3c:	431c      	orrs	r4, r3
 8000b3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b42:	fa01 f306 	lsl.w	r3, r1, r6
 8000b46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	0c3b      	lsrs	r3, r7, #16
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fa1f f884 	uxth.w	r8, r4
 8000b5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b62:	fb09 fa08 	mul.w	sl, r9, r8
 8000b66:	458a      	cmp	sl, r1
 8000b68:	fa02 f206 	lsl.w	r2, r2, r6
 8000b6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x220>
 8000b72:	1861      	adds	r1, r4, r1
 8000b74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b78:	d248      	bcs.n	8000c0c <__udivmoddi4+0x2a8>
 8000b7a:	458a      	cmp	sl, r1
 8000b7c:	d946      	bls.n	8000c0c <__udivmoddi4+0x2a8>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4421      	add	r1, r4
 8000b84:	eba1 010a 	sub.w	r1, r1, sl
 8000b88:	b2bf      	uxth	r7, r7
 8000b8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b96:	fb00 f808 	mul.w	r8, r0, r8
 8000b9a:	45b8      	cmp	r8, r7
 8000b9c:	d907      	bls.n	8000bae <__udivmoddi4+0x24a>
 8000b9e:	19e7      	adds	r7, r4, r7
 8000ba0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba4:	d22e      	bcs.n	8000c04 <__udivmoddi4+0x2a0>
 8000ba6:	45b8      	cmp	r8, r7
 8000ba8:	d92c      	bls.n	8000c04 <__udivmoddi4+0x2a0>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4427      	add	r7, r4
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	eba7 0708 	sub.w	r7, r7, r8
 8000bb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000bba:	454f      	cmp	r7, r9
 8000bbc:	46c6      	mov	lr, r8
 8000bbe:	4649      	mov	r1, r9
 8000bc0:	d31a      	bcc.n	8000bf8 <__udivmoddi4+0x294>
 8000bc2:	d017      	beq.n	8000bf4 <__udivmoddi4+0x290>
 8000bc4:	b15d      	cbz	r5, 8000bde <__udivmoddi4+0x27a>
 8000bc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000bca:	eb67 0701 	sbc.w	r7, r7, r1
 8000bce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bd2:	40f2      	lsrs	r2, r6
 8000bd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000bd8:	40f7      	lsrs	r7, r6
 8000bda:	e9c5 2700 	strd	r2, r7, [r5]
 8000bde:	2600      	movs	r6, #0
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	462e      	mov	r6, r5
 8000be8:	4628      	mov	r0, r5
 8000bea:	e70b      	b.n	8000a04 <__udivmoddi4+0xa0>
 8000bec:	4606      	mov	r6, r0
 8000bee:	e6e9      	b.n	80009c4 <__udivmoddi4+0x60>
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	e6fd      	b.n	80009f0 <__udivmoddi4+0x8c>
 8000bf4:	4543      	cmp	r3, r8
 8000bf6:	d2e5      	bcs.n	8000bc4 <__udivmoddi4+0x260>
 8000bf8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bfc:	eb69 0104 	sbc.w	r1, r9, r4
 8000c00:	3801      	subs	r0, #1
 8000c02:	e7df      	b.n	8000bc4 <__udivmoddi4+0x260>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e7d2      	b.n	8000bae <__udivmoddi4+0x24a>
 8000c08:	4660      	mov	r0, ip
 8000c0a:	e78d      	b.n	8000b28 <__udivmoddi4+0x1c4>
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	e7b9      	b.n	8000b84 <__udivmoddi4+0x220>
 8000c10:	4666      	mov	r6, ip
 8000c12:	e775      	b.n	8000b00 <__udivmoddi4+0x19c>
 8000c14:	4630      	mov	r0, r6
 8000c16:	e74a      	b.n	8000aae <__udivmoddi4+0x14a>
 8000c18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c1c:	4439      	add	r1, r7
 8000c1e:	e713      	b.n	8000a48 <__udivmoddi4+0xe4>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	e724      	b.n	8000a70 <__udivmoddi4+0x10c>
 8000c26:	bf00      	nop

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_DMA_Init+0x48>)
 8000c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <MX_DMA_Init+0x48>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <MX_DMA_Init+0x48>)
 8000c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	203a      	movs	r0, #58	; 0x3a
 8000c50:	f001 fa77 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000c54:	203a      	movs	r0, #58	; 0x3a
 8000c56:	f001 fa90 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	203c      	movs	r0, #60	; 0x3c
 8000c60:	f001 fa6f 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000c64:	203c      	movs	r0, #60	; 0x3c
 8000c66:	f001 fa88 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_GPIO_Init+0x44>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <MX_GPIO_Init+0x44>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x44>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_GPIO_Init+0x44>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <MX_GPIO_Init+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_GPIO_Init+0x44>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f001 f8c9 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f841 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f7ff ffd3 	bl	8000c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd2:	f7ff ffab 	bl	8000c2c <MX_DMA_Init>
  MX_RTC_Init();
 8000cd6:	f000 f895 	bl	8000e04 <MX_RTC_Init>
  MX_TIM2_Init();
 8000cda:	f000 f9d1 	bl	8001080 <MX_TIM2_Init>
  MX_UART4_Init();
 8000cde:	f000 fa9d 	bl	800121c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  dwinUartDmaInit();
 8000ce2:	f000 fbb9 	bl	8001458 <dwinUartDmaInit>
  dwinAppInit();
 8000ce6:	f000 fef1 	bl	8001acc <dwinAppInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000cea:	4817      	ldr	r0, [pc, #92]	; (8000d48 <main+0x88>)
 8000cec:	f003 fc4a 	bl	8004584 <HAL_TIM_Base_Start_IT>
  uint16_t i = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  parsingDWIN();
 8000cf4:	f000 fcfc 	bl	80016f0 <parsingDWIN>
	  if ( i < 100)
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	2b63      	cmp	r3, #99	; 0x63
 8000cfc:	d816      	bhi.n	8000d2c <main+0x6c>
	  {
		  i++;
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	3301      	adds	r3, #1
 8000d02:	80fb      	strh	r3, [r7, #6]
		  writeHalfWordDWIN(0x5002, i);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	4619      	mov	r1, r3
 8000d08:	f245 0002 	movw	r0, #20482	; 0x5002
 8000d0c:	f000 fd8e 	bl	800182c <writeHalfWordDWIN>
		  waitOkMessageDWIN();
 8000d10:	f000 fd36 	bl	8001780 <waitOkMessageDWIN>
		  writeHalfWordDWIN(0x5004, 100-i);
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f245 0004 	movw	r0, #20484	; 0x5004
 8000d22:	f000 fd83 	bl	800182c <writeHalfWordDWIN>
		  waitOkMessageDWIN();
 8000d26:	f000 fd2b 	bl	8001780 <waitOkMessageDWIN>
 8000d2a:	e001      	b.n	8000d30 <main+0x70>
	  }
	  else
	  {
		  i = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	80fb      	strh	r3, [r7, #6]
	  }
	  ledPWM();
 8000d30:	f000 fee2 	bl	8001af8 <ledPWM>
	  if (timer2Cnt > 24)
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <main+0x8c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b18      	cmp	r3, #24
 8000d3a:	d9db      	bls.n	8000cf4 <main+0x34>
	  {
	  curveProcessDWIN();
 8000d3c:	f000 ff30 	bl	8001ba0 <curveProcessDWIN>
	  //curveProcessX10DWIN();
	  timer2Cnt = 0;
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <main+0x8c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	  parsingDWIN();
 8000d46:	e7d5      	b.n	8000cf4 <main+0x34>
 8000d48:	2000005c 	.word	0x2000005c
 8000d4c:	20000028 	.word	0x20000028

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b096      	sub	sp, #88	; 0x58
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2244      	movs	r2, #68	; 0x44
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 fef6 	bl	8006b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d76:	f001 fe59 	bl	8002a2c <HAL_PWREx_ControlVoltageScaling>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d80:	f000 f83a 	bl	8000df8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d84:	f001 fe34 	bl	80029f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <SystemClock_Config+0xa4>)
 8000d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <SystemClock_Config+0xa4>)
 8000d90:	f023 0318 	bic.w	r3, r3, #24
 8000d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da6:	2310      	movs	r3, #16
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fe90 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dbe:	f000 f81b 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fa61 	bl	80032a4 <HAL_RCC_ClockConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000de8:	f000 f806 	bl	8000df8 <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3758      	adds	r7, #88	; 0x58
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e18:	2300      	movs	r3, #0
 8000e1a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <MX_RTC_Init+0xb4>)
 8000e20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e2a:	227f      	movs	r2, #127	; 0x7f
 8000e2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e4c:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e4e:	f003 f8eb 	bl	8004028 <HAL_RTC_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000e58:	f7ff ffce 	bl	8000df8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 30;
 8000e60:	231e      	movs	r3, #30
 8000e62:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 47;
 8000e64:	232f      	movs	r3, #47	; 0x2f
 8000e66:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e78:	f003 f951 	bl	800411e <HAL_RTC_SetTime>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e82:	f7ff ffb9 	bl	8000df8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e86:	2301      	movs	r3, #1
 8000e88:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_RTC_Init+0xb0>)
 8000e9e:	f003 f9db 	bl	8004258 <HAL_RTC_SetDate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ea8:	f7ff ffa6 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000038 	.word	0x20000038
 8000eb8:	40002800 	.word	0x40002800

08000ebc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0a4      	sub	sp, #144	; 0x90
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	2288      	movs	r2, #136	; 0x88
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f005 fe3f 	bl	8006b50 <memset>
  if(rtcHandle->Instance==RTC)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_RTC_MspInit+0x5c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d118      	bne.n	8000f0e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fbde 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000efa:	f7ff ff7d 	bl	8000df8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_RTC_MspInit+0x60>)
 8000f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_RTC_MspInit+0x60>)
 8000f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3790      	adds	r7, #144	; 0x90
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40002800 	.word	0x40002800
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_MspInit+0x44>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 ffa6 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	timer2Cnt++;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <TIM2_IRQHandler+0x1c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <TIM2_IRQHandler+0x1c>)
 8000fca:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <TIM2_IRQHandler+0x20>)
 8000fce:	f003 fcb1 	bl	8004934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000028 	.word	0x20000028
 8000fdc:	2000005c 	.word	0x2000005c

08000fe0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <UART4_IRQHandler+0x10>)
 8000fe6:	f004 fdc9 	bl	8005b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000f0 	.word	0x200000f0

08000ff4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA2_Channel3_IRQHandler+0x10>)
 8000ffa:	f001 fa70 	bl	80024de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000174 	.word	0x20000174

08001008 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA2_Channel5_IRQHandler+0x10>)
 800100e:	f001 fa66 	bl	80024de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000a8 	.word	0x200000a8

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <SystemInit+0x5c>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <SystemInit+0x5c>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <SystemInit+0x60>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <SystemInit+0x60>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <SystemInit+0x60>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <SystemInit+0x60>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <SystemInit+0x60>)
 8001048:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800104c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001050:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <SystemInit+0x60>)
 8001054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001058:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <SystemInit+0x60>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a07      	ldr	r2, [pc, #28]	; (800107c <SystemInit+0x60>)
 8001060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <SystemInit+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00
 800107c:	40021000 	.word	0x40021000

08001080 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010da:	4823      	ldr	r0, [pc, #140]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010dc:	f003 f9fa 	bl	80044d4 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010e6:	f7ff fe87 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	4619      	mov	r1, r3
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_TIM2_Init+0xe8>)
 80010f8:	f003 fe4c 	bl	8004d94 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001102:	f7ff fe79 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001106:	4818      	ldr	r0, [pc, #96]	; (8001168 <MX_TIM2_Init+0xe8>)
 8001108:	f003 faac 	bl	8004664 <HAL_TIM_PWM_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001112:	f7ff fe71 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <MX_TIM2_Init+0xe8>)
 8001126:	f004 fb5d 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001130:	f7ff fe62 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001134:	2360      	movs	r3, #96	; 0x60
 8001136:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM2_Init+0xe8>)
 800114c:	f003 fd12 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001156:	f7ff fe4f 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM2_Init+0xe8>)
 800115c:	f000 f82a 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 8001160:	bf00      	nop
 8001162:	3738      	adds	r7, #56	; 0x38
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000005c 	.word	0x2000005c

0800116c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d113      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201c      	movs	r0, #28
 800119c:	f000 ffd1 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a0:	201c      	movs	r0, #28
 80011a2:	f000 ffea 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d4:	d11c      	bne.n	8001210 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_TIM_MspPostInit+0x64>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_TIM_MspPostInit+0x64>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_TIM_MspPostInit+0x64>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ee:	2320      	movs	r3, #32
 80011f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011fe:	2301      	movs	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f001 fa46 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000

0800121c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_UART4_Init+0x58>)
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <MX_UART4_Init+0x5c>)
 8001224:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_UART4_Init+0x58>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_UART4_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_UART4_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_UART4_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_UART4_Init+0x58>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_UART4_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_UART4_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_UART4_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_UART4_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_UART4_Init+0x58>)
 8001260:	f004 fb66 	bl	8005930 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800126a:	f7ff fdc5 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000f0 	.word	0x200000f0
 8001278:	40004c00 	.word	0x40004c00

0800127c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ac      	sub	sp, #176	; 0xb0
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2288      	movs	r2, #136	; 0x88
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f005 fc57 	bl	8006b50 <memset>
  if(uartHandle->Instance==UART4)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a51      	ldr	r2, [pc, #324]	; (80013ec <HAL_UART_MspInit+0x170>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	f040 809a 	bne.w	80013e2 <HAL_UART_MspInit+0x166>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80012ae:	2308      	movs	r3, #8
 80012b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 f9f8 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012c6:	f7ff fd97 	bl	8000df8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012ca:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <HAL_UART_MspInit+0x174>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_UART_MspInit+0x174>)
 80012d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <HAL_UART_MspInit+0x174>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <HAL_UART_MspInit+0x174>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <HAL_UART_MspInit+0x174>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <HAL_UART_MspInit+0x174>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001312:	2308      	movs	r3, #8
 8001314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f001 f9bb 	bl	800269c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001328:	4a33      	ldr	r2, [pc, #204]	; (80013f8 <HAL_UART_MspInit+0x17c>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_UART_MspInit+0x178>)
 800132e:	2202      	movs	r2, #2
 8001330:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_UART_MspInit+0x178>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_UART_MspInit+0x178>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001356:	2220      	movs	r2, #32
 8001358:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_UART_MspInit+0x178>)
 800135c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001364:	f000 ff24 	bl	80021b0 <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 800136e:	f7ff fd43 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_UART_MspInit+0x178>)
 8001376:	671a      	str	r2, [r3, #112]	; 0x70
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_UART_MspInit+0x178>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_UART_MspInit+0x180>)
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_UART_MspInit+0x184>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_UART_MspInit+0x180>)
 8001386:	2202      	movs	r2, #2
 8001388:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_UART_MspInit+0x180>)
 800138c:	2210      	movs	r2, #16
 800138e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_UART_MspInit+0x180>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_UART_MspInit+0x180>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_UART_MspInit+0x180>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_UART_MspInit+0x180>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_UART_MspInit+0x180>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_UART_MspInit+0x180>)
 80013b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <HAL_UART_MspInit+0x180>)
 80013b8:	f000 fefa 	bl	80021b0 <HAL_DMA_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 80013c2:	f7ff fd19 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_UART_MspInit+0x180>)
 80013ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_UART_MspInit+0x180>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2034      	movs	r0, #52	; 0x34
 80013d8:	f000 feb3 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013dc:	2034      	movs	r0, #52	; 0x34
 80013de:	f000 fecc 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80013e2:	bf00      	nop
 80013e4:	37b0      	adds	r7, #176	; 0xb0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40004c00 	.word	0x40004c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	200000a8 	.word	0x200000a8
 80013f8:	40020458 	.word	0x40020458
 80013fc:	20000174 	.word	0x20000174
 8001400:	40020430 	.word	0x40020430

08001404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001408:	f7ff fe08 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800140c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800140e:	e003      	b.n	8001418 <LoopCopyDataInit>

08001410 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001412:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001414:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001416:	3104      	adds	r1, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <LoopForever+0xa>)
	ldr	r3, =_edata
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <LoopForever+0xe>)
	adds	r2, r0, r1
 800141c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800141e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001420:	d3f6      	bcc.n	8001410 <CopyDataInit>
	ldr	r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001424:	e002      	b.n	800142c <LoopFillZerobss>

08001426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001426:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001428:	f842 3b04 	str.w	r3, [r2], #4

0800142c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LoopForever+0x16>)
	cmp	r2, r3
 800142e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001430:	d3f9      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f005 fb5b 	bl	8006aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001436:	f7ff fc43 	bl	8000cc0 <main>

0800143a <LoopForever>:

LoopForever:
    b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001440:	08007eb8 	.word	0x08007eb8
	ldr	r0, =_sdata
 8001444:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001448:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800144c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001450:	20000b90 	.word	0x20000b90

08001454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_2_IRQHandler>
	...

08001458 <dwinUartDmaInit>:
uint8_t getByte(unsigned char*b);
//==============================================================================
//--------------------------Device initialization-------------------------------
//==============================================================================
void dwinUartDmaInit()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  readDataDWIN.delayOverflowMaxTime = 3000;
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <dwinUartDmaInit+0x44>)
 8001460:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001464:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
  for (uint16_t i = 0; i <DWIN_UART_BUFFER_SIZE;i++){readDataDWIN.uartBuffer[i] = 0xffff;}
 8001468:	2300      	movs	r3, #0
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	e008      	b.n	8001480 <dwinUartDmaInit+0x28>
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <dwinUartDmaInit+0x44>)
 8001472:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	3301      	adds	r3, #1
 800147e:	80fb      	strh	r3, [r7, #6]
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001486:	d3f2      	bcc.n	800146e <dwinUartDmaInit+0x16>
  HAL_UART_Receive_DMA(&DWIN_UART, (uint8_t *)&readDataDWIN.uartBuffer, DWIN_UART_BUFFER_SIZE);
 8001488:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800148c:	4903      	ldr	r1, [pc, #12]	; (800149c <dwinUartDmaInit+0x44>)
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <dwinUartDmaInit+0x48>)
 8001490:	f004 fb30 	bl	8005af4 <HAL_UART_Receive_DMA>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200001bc 	.word	0x200001bc
 80014a0:	200000f0 	.word	0x200000f0

080014a4 <getByte>:

//==============================================================================
//--------------------------Retrieving_a_data_byte------------------------------
//==============================================================================
uint8_t getByte(unsigned char*b)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if (readDataDWIN.uartBuffer[readDataDWIN.uartCnt]!=0xffff)
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <getByte+0x7c>)
 80014ae:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <getByte+0x7c>)
 80014b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	4293      	cmp	r3, r2
 80014c0:	d026      	beq.n	8001510 <getByte+0x6c>
  {
    *b=(readDataDWIN.uartBuffer[readDataDWIN.uartCnt] & 0xff);
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <getByte+0x7c>)
 80014c4:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <getByte+0x7c>)
 80014cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	701a      	strb	r2, [r3, #0]
    readDataDWIN.uartBuffer[readDataDWIN.uartCnt]=0xffff;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <getByte+0x7c>)
 80014d8:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80014dc:	461a      	mov	r2, r3
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <getByte+0x7c>)
 80014e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    readDataDWIN.uartCnt++;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <getByte+0x7c>)
 80014ea:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <getByte+0x7c>)
 80014f4:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
    if (readDataDWIN.uartCnt == DWIN_UART_BUFFER_SIZE) readDataDWIN.uartCnt=0;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <getByte+0x7c>)
 80014fa:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 80014fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001502:	d103      	bne.n	800150c <getByte+0x68>
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <getByte+0x7c>)
 8001506:	2200      	movs	r2, #0
 8001508:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
    return 1;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <getByte+0x6e>
  } 
  else 
  {
	  return 0;
 8001510:	2300      	movs	r3, #0
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	200001bc 	.word	0x200001bc

08001524 <receivingDataPacket>:
//==============================================================================
//-------------------------------Recive_Data------------------------------------
//==============================================================================
void receivingDataPacket()
{ 
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  uint16_t m = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	80fb      	strh	r3, [r7, #6]
    if (!readDataDWIN.PacketReady)
 800152e:	4b6e      	ldr	r3, [pc, #440]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001530:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8001534:	f083 0301 	eor.w	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80d0 	beq.w	80016e0 <receivingDataPacket+0x1bc>
      { 
        getByte(&readDataDWIN.GettingByte); 
 8001540:	486a      	ldr	r0, [pc, #424]	; (80016ec <receivingDataPacket+0x1c8>)
 8001542:	f7ff ffaf 	bl	80014a4 <getByte>
        m = 0; 
 8001546:	2300      	movs	r3, #0
 8001548:	80fb      	strh	r3, [r7, #6]
          if (readDataDWIN.GettingByte == 0x5A)
 800154a:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <receivingDataPacket+0x1c4>)
 800154c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8001550:	2b5a      	cmp	r3, #90	; 0x5a
 8001552:	f040 80c1 	bne.w	80016d8 <receivingDataPacket+0x1b4>
          {
            readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // start byte 1
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <receivingDataPacket+0x1c4>)
 800155a:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 800155e:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001560:	4413      	add	r3, r2
 8001562:	460a      	mov	r2, r1
 8001564:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
            m++;
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	3301      	adds	r3, #1
 800156c:	80fb      	strh	r3, [r7, #6]
            readDataDWIN.timeoutDelay = 0;
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001570:	2200      	movs	r2, #0
 8001572:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8001576:	e013      	b.n	80015a0 <receivingDataPacket+0x7c>
            {
            	readDataDWIN.timeoutDelay++;
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <receivingDataPacket+0x1c4>)
 800157a:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 800157e:	3301      	adds	r3, #1
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001584:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            	if (readDataDWIN.timeoutDelay > readDataDWIN.delayOverflowMaxTime)readDataDWIN.timeoutOverflow = 1;
 8001588:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <receivingDataPacket+0x1c4>)
 800158a:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 800158e:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001590:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8001594:	429a      	cmp	r2, r3
 8001596:	d903      	bls.n	80015a0 <receivingDataPacket+0x7c>
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <receivingDataPacket+0x1c4>)
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 80015a0:	4852      	ldr	r0, [pc, #328]	; (80016ec <receivingDataPacket+0x1c8>)
 80015a2:	f7ff ff7f 	bl	80014a4 <getByte>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <receivingDataPacket+0x98>
 80015ac:	4b4e      	ldr	r3, [pc, #312]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015ae:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1dd      	bne.n	8001578 <receivingDataPacket+0x54>
            }
            readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // start byte 2 
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015c0:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
            m++;
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	3301      	adds	r3, #1
 80015d2:	80fb      	strh	r3, [r7, #6]
            readDataDWIN.timeoutDelay = 0;
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 80015dc:	e013      	b.n	8001606 <receivingDataPacket+0xe2>
            {
            	readDataDWIN.timeoutDelay++;
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015e0:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015ea:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            	if (readDataDWIN.timeoutDelay > readDataDWIN.delayOverflowMaxTime)readDataDWIN.timeoutOverflow = 1;
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015f0:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <receivingDataPacket+0x1c4>)
 80015f6:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d903      	bls.n	8001606 <receivingDataPacket+0xe2>
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8001606:	4839      	ldr	r0, [pc, #228]	; (80016ec <receivingDataPacket+0x1c8>)
 8001608:	f7ff ff4c 	bl	80014a4 <getByte>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d107      	bne.n	8001622 <receivingDataPacket+0xfe>
 8001612:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001614:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1dd      	bne.n	80015de <receivingDataPacket+0xba>
            }
            readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // Data packet length
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001626:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 800162a:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <receivingDataPacket+0x1c4>)
 800162c:	4413      	add	r3, r2
 800162e:	460a      	mov	r2, r1
 8001630:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
            readDataDWIN.lengthRxPacket = readDataDWIN.rxData[m];
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001638:	4413      	add	r3, r2
 800163a:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001642:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
            m++;
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	3301      	adds	r3, #1
 800164a:	80fb      	strh	r3, [r7, #6]
            readDataDWIN.timeoutDelay = 0;
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <receivingDataPacket+0x1c4>)
 800164e:	2200      	movs	r2, #0
 8001650:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            for(uint16_t i = 0;i < readDataDWIN.lengthRxPacket; i++) // Fill the buffer with data
 8001654:	2300      	movs	r3, #0
 8001656:	80bb      	strh	r3, [r7, #4]
 8001658:	e034      	b.n	80016c4 <receivingDataPacket+0x1a0>
            {
              while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
              {
            	  readDataDWIN.timeoutDelay++;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <receivingDataPacket+0x1c4>)
 800165c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8001660:	3301      	adds	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001666:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            	  if (readDataDWIN.timeoutDelay > readDataDWIN.delayOverflowMaxTime)readDataDWIN.timeoutOverflow = 1;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <receivingDataPacket+0x1c4>)
 800166c:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001672:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8001676:	429a      	cmp	r2, r3
 8001678:	d903      	bls.n	8001682 <receivingDataPacket+0x15e>
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <receivingDataPacket+0x1c4>)
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
              while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8001682:	481a      	ldr	r0, [pc, #104]	; (80016ec <receivingDataPacket+0x1c8>)
 8001684:	f7ff ff0e 	bl	80014a4 <getByte>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <receivingDataPacket+0x17a>
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <receivingDataPacket+0x1c4>)
 8001690:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1dd      	bne.n	800165a <receivingDataPacket+0x136>
              }
              readDataDWIN.timeoutDelay = 0;
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <receivingDataPacket+0x1c4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
              readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // Retrieving data
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <receivingDataPacket+0x1c4>)
 80016aa:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <receivingDataPacket+0x1c4>)
 80016b0:	4413      	add	r3, r2
 80016b2:	460a      	mov	r2, r1
 80016b4:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
              m++;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	3301      	adds	r3, #1
 80016bc:	80fb      	strh	r3, [r7, #6]
            for(uint16_t i = 0;i < readDataDWIN.lengthRxPacket; i++) // Fill the buffer with data
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <receivingDataPacket+0x1c4>)
 80016c6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3d8      	bcc.n	8001682 <receivingDataPacket+0x15e>
            }
          readDataDWIN.PacketReady = true; 
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <receivingDataPacket+0x1c4>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
          } 
        readDataDWIN.GettingByte = 0; 
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <receivingDataPacket+0x1c4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
      } 
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200001bc 	.word	0x200001bc
 80016ec:	200004de 	.word	0x200004de

080016f0 <parsingDWIN>:
//==============================================================================
//------------------------------Parsing_Data------------------------------------
//==============================================================================
void parsingDWIN()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  receivingDataPacket();
 80016f6:	f7ff ff15 	bl	8001524 <receivingDataPacket>
  if (readDataDWIN.PacketReady)
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <parsingDWIN+0x8c>)
 80016fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8001700:	2b00      	cmp	r3, #0
 8001702:	d037      	beq.n	8001774 <parsingDWIN+0x84>
  {
    readDataDWIN.parsingDataDWIN.header = (uint16_t)readDataDWIN.rxData[0]<<8 | (uint16_t)readDataDWIN.rxData[1];
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <parsingDWIN+0x8c>)
 8001706:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <parsingDWIN+0x8c>)
 8001710:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21b      	sxth	r3, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <parsingDWIN+0x8c>)
 800171e:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
    readDataDWIN.parsingDataDWIN.length = readDataDWIN.rxData[2];
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <parsingDWIN+0x8c>)
 8001724:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <parsingDWIN+0x8c>)
 800172a:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
    readDataDWIN.parsingDataDWIN.command = (commandDWIN)readDataDWIN.rxData[3];
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <parsingDWIN+0x8c>)
 8001730:	f893 232c 	ldrb.w	r2, [r3, #812]	; 0x32c
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <parsingDWIN+0x8c>)
 8001736:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
    for (uint8_t i = 0; i < (readDataDWIN.lengthRxPacket - 1);i++)
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e00e      	b.n	800175e <parsingDWIN+0x6e>
    {
      readDataDWIN.parsingDataDWIN.data[i] = readDataDWIN.rxData[i+4];
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	1d1a      	adds	r2, r3, #4
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <parsingDWIN+0x8c>)
 8001748:	440a      	add	r2, r1
 800174a:	f892 1329 	ldrb.w	r1, [r2, #809]	; 0x329
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <parsingDWIN+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	460a      	mov	r2, r1
 8001754:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
    for (uint8_t i = 0; i < (readDataDWIN.lengthRxPacket - 1);i++)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	3301      	adds	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <parsingDWIN+0x8c>)
 8001762:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 8001766:	3b01      	subs	r3, #1
 8001768:	429a      	cmp	r2, r3
 800176a:	dbe9      	blt.n	8001740 <parsingDWIN+0x50>
    }
    readDataDWIN.PacketReady = false;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <parsingDWIN+0x8c>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  }
  
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200001bc 	.word	0x200001bc

08001780 <waitOkMessageDWIN>:
//==============================================================================
//------------------------------Parsing_Data------------------------------------
//==============================================================================

void waitOkMessageDWIN()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8001786:	f000 fbd1 	bl	8001f2c <HAL_GetTick>
 800178a:	6038      	str	r0, [r7, #0]
	uint32_t stopTime = HAL_GetTick();
 800178c:	f000 fbce 	bl	8001f2c <HAL_GetTick>
 8001790:	6078      	str	r0, [r7, #4]

	while (((startTime + 10) > stopTime) && (readDataDWIN.parsingDataDWIN.data[0] != 0x4F))
 8001792:	e004      	b.n	800179e <waitOkMessageDWIN+0x1e>
	{
		stopTime = HAL_GetTick();
 8001794:	f000 fbca 	bl	8001f2c <HAL_GetTick>
 8001798:	6078      	str	r0, [r7, #4]
		parsingDWIN();
 800179a:	f7ff ffa9 	bl	80016f0 <parsingDWIN>
	while (((startTime + 10) > stopTime) && (readDataDWIN.parsingDataDWIN.data[0] != 0x4F))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	330a      	adds	r3, #10
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d204      	bcs.n	80017b2 <waitOkMessageDWIN+0x32>
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <waitOkMessageDWIN+0x4c>)
 80017aa:	f893 34c0 	ldrb.w	r3, [r3, #1216]	; 0x4c0
 80017ae:	2b4f      	cmp	r3, #79	; 0x4f
 80017b0:	d1f0      	bne.n	8001794 <waitOkMessageDWIN+0x14>
	}
	if (readDataDWIN.parsingDataDWIN.data[0] == 0x4F) readDataDWIN.parsingDataDWIN.data[0] = 0x00;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <waitOkMessageDWIN+0x4c>)
 80017b4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	; 0x4c0
 80017b8:	2b4f      	cmp	r3, #79	; 0x4f
 80017ba:	d103      	bne.n	80017c4 <waitOkMessageDWIN+0x44>
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <waitOkMessageDWIN+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200001bc 	.word	0x200001bc

080017d0 <readVariableDWIN>:
//==============================================================================
//------------------------------Read Variable-----------------------------------
//==============================================================================

void readVariableDWIN(uint16_t adress, uint8_t lenHalfWord)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	80fb      	strh	r3, [r7, #6]
 80017dc:	4613      	mov	r3, r2
 80017de:	717b      	strb	r3, [r7, #5]
  uint8_t str[10] = {headerDWIN_H,headerDWIN_L,0x04,0x83,(adress & 0xFF00)>>8,adress & 0xFF,lenHalfWord};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	811a      	strh	r2, [r3, #8]
 80017ec:	235a      	movs	r3, #90	; 0x5a
 80017ee:	733b      	strb	r3, [r7, #12]
 80017f0:	23a5      	movs	r3, #165	; 0xa5
 80017f2:	737b      	strb	r3, [r7, #13]
 80017f4:	2304      	movs	r3, #4
 80017f6:	73bb      	strb	r3, [r7, #14]
 80017f8:	2383      	movs	r3, #131	; 0x83
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	743b      	strb	r3, [r7, #16]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	747b      	strb	r3, [r7, #17]
 800180c:	797b      	ldrb	r3, [r7, #5]
 800180e:	74bb      	strb	r3, [r7, #18]

  HAL_UART_Transmit(&DWIN_UART, str, 7,0xFF);    
 8001810:	f107 010c 	add.w	r1, r7, #12
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	2207      	movs	r2, #7
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <readVariableDWIN+0x58>)
 800181a:	f004 f8d7 	bl	80059cc <HAL_UART_Transmit>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200000f0 	.word	0x200000f0

0800182c <writeHalfWordDWIN>:
//==============================================================================
//------------------------Write Variable Half Word------------------------------
//==============================================================================

void writeHalfWordDWIN(uint16_t adress, uint16_t data)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	80fb      	strh	r3, [r7, #6]
 8001838:	4613      	mov	r3, r2
 800183a:	80bb      	strh	r3, [r7, #4]
  uint8_t str[9] = {0x00};
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	711a      	strb	r2, [r3, #4]
  str[0] = headerDWIN_H;
 800184a:	235a      	movs	r3, #90	; 0x5a
 800184c:	733b      	strb	r3, [r7, #12]
  str[1] = headerDWIN_L;
 800184e:	23a5      	movs	r3, #165	; 0xa5
 8001850:	737b      	strb	r3, [r7, #13]
  str[2] = 0x05;
 8001852:	2305      	movs	r3, #5
 8001854:	73bb      	strb	r3, [r7, #14]
  str[3] = writeVariable;
 8001856:	2382      	movs	r3, #130	; 0x82
 8001858:	73fb      	strb	r3, [r7, #15]
  str[4] = (adress & 0xFF00)>>8;
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	743b      	strb	r3, [r7, #16]
  str[5] = adress & 0xFF;
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	747b      	strb	r3, [r7, #17]
  str[6] = (data & 0xFF00)>>8;
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	b29b      	uxth	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	74bb      	strb	r3, [r7, #18]
  str[7] = data & 0xFF;
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	74fb      	strb	r3, [r7, #19]

  HAL_UART_Transmit(&DWIN_UART, str, 8,0xFF);    
 800187a:	f107 010c 	add.w	r1, r7, #12
 800187e:	23ff      	movs	r3, #255	; 0xff
 8001880:	2208      	movs	r2, #8
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <writeHalfWordDWIN+0x64>)
 8001884:	f004 f8a2 	bl	80059cc <HAL_UART_Transmit>
}
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200000f0 	.word	0x200000f0

08001894 <writeCurveDWIN>:
//==============================================================================
//----------------------------Write Curve DWIN----------------------------------
//==============================================================================

uint8_t writeCurveDWIN(struct curveDataDWIN_p curveDataDWIN)
{
 8001894:	b084      	sub	sp, #16
 8001896:	b580      	push	{r7, lr}
 8001898:	b0c2      	sub	sp, #264	; 0x108
 800189a:	af00      	add	r7, sp, #0
 800189c:	f507 7c88 	add.w	ip, r7, #272	; 0x110
 80018a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t returnStatus = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t lenData = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	uint8_t cntCurve = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	uint8_t cnt = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

for (uint8_t i = 0; i < 8; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 80018c2:	e023      	b.n	800190c <writeCurveDWIN+0x78>
{
	if ((curveDataDWIN.CurveEnable[i] == true)&&(curveDataDWIN.CurveLenData[i] != 0))
 80018c4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80018c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d017      	beq.n	8001902 <writeCurveDWIN+0x6e>
 80018d2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80018d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018da:	4413      	add	r3, r2
 80018dc:	7a1b      	ldrb	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00f      	beq.n	8001902 <writeCurveDWIN+0x6e>
	{
		lenData += curveDataDWIN.CurveLenData[i];
 80018e2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80018e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018ea:	4413      	add	r3, r2
 80018ec:	7a1a      	ldrb	r2, [r3, #8]
 80018ee:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80018f2:	4413      	add	r3, r2
 80018f4:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		cntCurve++;
 80018f8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
for (uint8_t i = 0; i < 8; i++)
 8001902:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001906:	3301      	adds	r3, #1
 8001908:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 800190c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001910:	2b07      	cmp	r3, #7
 8001912:	d9d7      	bls.n	80018c4 <writeCurveDWIN+0x30>
	}
}

	if (lenData < (123 - 2 * cntCurve))
 8001914:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8001918:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	f1c3 037b 	rsb	r3, r3, #123	; 0x7b
 8001922:	429a      	cmp	r2, r3
 8001924:	f280 80c2 	bge.w	8001aac <writeCurveDWIN+0x218>
	{
		uint8_t strC[255] = {0x00};
 8001928:	463b      	mov	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	3304      	adds	r3, #4
 8001930:	22fb      	movs	r2, #251	; 0xfb
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f005 f90b 	bl	8006b50 <memset>
		memset(strC,0x00,255);
 800193a:	463b      	mov	r3, r7
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f005 f905 	bl	8006b50 <memset>
		strC[0] = headerDWIN_H;
 8001946:	463b      	mov	r3, r7
 8001948:	225a      	movs	r2, #90	; 0x5a
 800194a:	701a      	strb	r2, [r3, #0]
		strC[1] = headerDWIN_L;
 800194c:	463b      	mov	r3, r7
 800194e:	22a5      	movs	r2, #165	; 0xa5
 8001950:	705a      	strb	r2, [r3, #1]
		strC[2] = 9 + ((lenData + cntCurve) * 2);
 8001952:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8001956:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800195a:	4413      	add	r3, r2
 800195c:	b2db      	uxtb	r3, r3
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3309      	adds	r3, #9
 8001964:	b2da      	uxtb	r2, r3
 8001966:	463b      	mov	r3, r7
 8001968:	709a      	strb	r2, [r3, #2]
		strC[3] = writeVariable;
 800196a:	463b      	mov	r3, r7
 800196c:	2282      	movs	r2, #130	; 0x82
 800196e:	70da      	strb	r2, [r3, #3]
		strC[4] = 0x03;
 8001970:	463b      	mov	r3, r7
 8001972:	2203      	movs	r2, #3
 8001974:	711a      	strb	r2, [r3, #4]
		strC[5] = 0x10;
 8001976:	463b      	mov	r3, r7
 8001978:	2210      	movs	r2, #16
 800197a:	715a      	strb	r2, [r3, #5]
		strC[6] = headerDWIN_H;
 800197c:	463b      	mov	r3, r7
 800197e:	225a      	movs	r2, #90	; 0x5a
 8001980:	719a      	strb	r2, [r3, #6]
		strC[7] = headerDWIN_L;
 8001982:	463b      	mov	r3, r7
 8001984:	22a5      	movs	r2, #165	; 0xa5
 8001986:	71da      	strb	r2, [r3, #7]
		strC[8] = cntCurve;
 8001988:	463b      	mov	r3, r7
 800198a:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800198e:	721a      	strb	r2, [r3, #8]
		strC[9] = 0x00;
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	725a      	strb	r2, [r3, #9]
		cnt = 10;
 8001996:	230a      	movs	r3, #10
 8001998:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		for (uint8_t i = 0; i < 8; i++) // choice channel
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 80019a2:	e06c      	b.n	8001a7e <writeCurveDWIN+0x1ea>
		{
			if ((curveDataDWIN.CurveEnable[i] == true)&&(curveDataDWIN.CurveLenData[i] != 0))
 80019a4:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80019a8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d060      	beq.n	8001a74 <writeCurveDWIN+0x1e0>
 80019b2:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80019b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019ba:	4413      	add	r3, r2
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d058      	beq.n	8001a74 <writeCurveDWIN+0x1e0>
			{
				strC[cnt] = i;
 80019c2:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80019c6:	463a      	mov	r2, r7
 80019c8:	f897 1102 	ldrb.w	r1, [r7, #258]	; 0x102
 80019cc:	54d1      	strb	r1, [r2, r3]
				cnt++;
 80019ce:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80019d2:	3301      	adds	r3, #1
 80019d4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				strC[cnt] = curveDataDWIN.CurveLenData[i];
 80019d8:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 80019dc:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80019e0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80019e4:	440a      	add	r2, r1
 80019e6:	7a11      	ldrb	r1, [r2, #8]
 80019e8:	463a      	mov	r2, r7
 80019ea:	54d1      	strb	r1, [r2, r3]
				cnt++;
 80019ec:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				for (uint8_t j = 0; j < curveDataDWIN.CurveLenData[i]; j++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 80019fc:	e030      	b.n	8001a60 <writeCurveDWIN+0x1cc>
				{
					strC[cnt] = (curveDataDWIN.CurveData[i][j] & 0xFF00)>>8;
 80019fe:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8001a02:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8001a06:	0192      	lsls	r2, r2, #6
 8001a08:	4413      	add	r3, r2
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001a1c:	b2d1      	uxtb	r1, r2
 8001a1e:	463a      	mov	r2, r7
 8001a20:	54d1      	strb	r1, [r2, r3]
					cnt++;
 8001a22:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001a26:	3301      	adds	r3, #1
 8001a28:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
					strC[cnt] =  (curveDataDWIN.CurveData[i][j] & 0x00FF);
 8001a2c:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8001a30:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8001a34:	0192      	lsls	r2, r2, #6
 8001a36:	4413      	add	r3, r2
 8001a38:	3308      	adds	r3, #8
 8001a3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a42:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001a46:	b2d1      	uxtb	r1, r2
 8001a48:	463a      	mov	r2, r7
 8001a4a:	54d1      	strb	r1, [r2, r3]
					cnt++;
 8001a4c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001a50:	3301      	adds	r3, #1
 8001a52:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				for (uint8_t j = 0; j < curveDataDWIN.CurveLenData[i]; j++)
 8001a56:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8001a60:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001a64:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a68:	4413      	add	r3, r2
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3c4      	bcc.n	80019fe <writeCurveDWIN+0x16a>
		for (uint8_t i = 0; i < 8; i++) // choice channel
 8001a74:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8001a7e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d98e      	bls.n	80019a4 <writeCurveDWIN+0x110>

				}

			}
		}
		HAL_UART_Transmit(&DWIN_UART, strC, (12 + ((lenData + cntCurve) * 2)),0xFFFF);
 8001a86:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8001a8a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001a8e:	4413      	add	r3, r2
 8001a90:	3306      	adds	r3, #6
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4639      	mov	r1, r7
 8001a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9e:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <writeCurveDWIN+0x234>)
 8001aa0:	f003 ff94 	bl	80059cc <HAL_UART_Transmit>
		returnStatus = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8001aaa:	e002      	b.n	8001ab2 <writeCurveDWIN+0x21e>
	}
	else
	{
		returnStatus = 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	}
	return returnStatus;
 8001ab2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ac2:	b004      	add	sp, #16
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200000f0 	.word	0x200000f0

08001acc <dwinAppInit>:
//==============================================================================
//--------------------------------FUNCTIONS-------------------------------------
//==============================================================================

void dwinAppInit()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <dwinAppInit+0x24>)
 8001ad4:	f002 fe28 	bl	8004728 <HAL_TIM_PWM_Start>
	  TIM2->CCR1=0;
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001adc:	2200      	movs	r2, #0
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34
	  memset(&curveDataDWIN, 0, sizeof(curveDataDWIN));
 8001ae0:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <dwinAppInit+0x28>)
 8001ae8:	f005 f832 	bl	8006b50 <memset>

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000005c 	.word	0x2000005c
 8001af4:	20000778 	.word	0x20000778

08001af8 <ledPWM>:

void ledPWM()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	parsingDWIN();
 8001afc:	f7ff fdf8 	bl	80016f0 <parsingDWIN>
	readVariableDWIN(0x5006, 1);
 8001b00:	2101      	movs	r1, #1
 8001b02:	f245 0006 	movw	r0, #20486	; 0x5006
 8001b06:	f7ff fe63 	bl	80017d0 <readVariableDWIN>
	HAL_Delay(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fa1a 	bl	8001f44 <HAL_Delay>
	parsingDWIN();
 8001b10:	f7ff fdee 	bl	80016f0 <parsingDWIN>
	adress = ledDataAdress;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <ledPWM+0x90>)
 8001b16:	f245 0206 	movw	r2, #20486	; 0x5006
 8001b1a:	801a      	strh	r2, [r3, #0]
	adress_h = ((ledDataAdress & 0xFF00)>>8);
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <ledPWM+0x94>)
 8001b1e:	2250      	movs	r2, #80	; 0x50
 8001b20:	701a      	strb	r2, [r3, #0]
	adress_l = ledDataAdress & 0x00FF;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <ledPWM+0x98>)
 8001b24:	2206      	movs	r2, #6
 8001b26:	701a      	strb	r2, [r3, #0]
	if (((readDataDWIN.parsingDataDWIN.data[0] == (ledDataAdress & 0xFF00)>>8)) && (readDataDWIN.parsingDataDWIN.data[1] == (ledDataAdress & 0x00F))) // Checking for address match
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <ledPWM+0x9c>)
 8001b2a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	; 0x4c0
 8001b2e:	2b50      	cmp	r3, #80	; 0x50
 8001b30:	d128      	bne.n	8001b84 <ledPWM+0x8c>
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <ledPWM+0x9c>)
 8001b34:	f893 34c1 	ldrb.w	r3, [r3, #1217]	; 0x4c1
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d123      	bne.n	8001b84 <ledPWM+0x8c>
	{
		PWMData = readDataDWIN.parsingDataDWIN.data[3]<<8 | readDataDWIN.parsingDataDWIN.data[4];
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <ledPWM+0x9c>)
 8001b3e:	f893 34c3 	ldrb.w	r3, [r3, #1219]	; 0x4c3
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <ledPWM+0x9c>)
 8001b46:	f892 24c4 	ldrb.w	r2, [r2, #1220]	; 0x4c4
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <ledPWM+0xa0>)
 8001b50:	601a      	str	r2, [r3, #0]
		if (PWMData >= 50)
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <ledPWM+0xa0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b31      	cmp	r3, #49	; 0x31
 8001b58:	d910      	bls.n	8001b7c <ledPWM+0x84>
		{
			PWMData = ((PWMData - 49) * 2000);
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <ledPWM+0xa0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	f5a3 33bf 	sub.w	r3, r3, #97792	; 0x17e00
 8001b6a:	3bd0      	subs	r3, #208	; 0xd0
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <ledPWM+0xa0>)
 8001b6e:	6013      	str	r3, [r2, #0]
			TIM2->CCR1 = PWMData;
 8001b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <ledPWM+0xa0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6353      	str	r3, [r2, #52]	; 0x34
		else
		{
			TIM2->CCR1 = 0;
		}
	}
}
 8001b7a:	e003      	b.n	8001b84 <ledPWM+0x8c>
			TIM2->CCR1 = 0;
 8001b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b80:	2200      	movs	r2, #0
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000030 	.word	0x20000030
 8001b8c:	20000b88 	.word	0x20000b88
 8001b90:	20000b89 	.word	0x20000b89
 8001b94:	200001bc 	.word	0x200001bc
 8001b98:	2000002c 	.word	0x2000002c
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <curveProcessDWIN>:

uint8_t cnt = 0;
uint16_t meandr = 0;
void curveProcessDWIN()
{
 8001ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8001ba8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8001bac:	446f      	add	r7, sp
	  if ( cnt < 180)
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2bb3      	cmp	r3, #179	; 0xb3
 8001bb4:	f200 813a 	bhi.w	8001e2c <curveProcessDWIN+0x28c>
	  {
		  if (cnt < 90) meandr = 50;
 8001bb8:	4ba5      	ldr	r3, [pc, #660]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b59      	cmp	r3, #89	; 0x59
 8001bbe:	d803      	bhi.n	8001bc8 <curveProcessDWIN+0x28>
 8001bc0:	4ba4      	ldr	r3, [pc, #656]	; (8001e54 <curveProcessDWIN+0x2b4>)
 8001bc2:	2232      	movs	r2, #50	; 0x32
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	e002      	b.n	8001bce <curveProcessDWIN+0x2e>
		  else meandr = 200;
 8001bc8:	4ba2      	ldr	r3, [pc, #648]	; (8001e54 <curveProcessDWIN+0x2b4>)
 8001bca:	22c8      	movs	r2, #200	; 0xc8
 8001bcc:	801a      	strh	r2, [r3, #0]
		  cnt++;
 8001bce:	4ba0      	ldr	r3, [pc, #640]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b9e      	ldr	r3, [pc, #632]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001bd8:	701a      	strb	r2, [r3, #0]

		  curveDataDWIN.CurveEnable[0] = true;
 8001bda:	4b9f      	ldr	r3, [pc, #636]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
		  curveDataDWIN.CurveEnable[1] = true;
 8001be0:	4b9d      	ldr	r3, [pc, #628]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	705a      	strb	r2, [r3, #1]
		  curveDataDWIN.CurveEnable[2] = true;
 8001be6:	4b9c      	ldr	r3, [pc, #624]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	709a      	strb	r2, [r3, #2]
		  curveDataDWIN.CurveEnable[3] = true;
 8001bec:	4b9a      	ldr	r3, [pc, #616]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	70da      	strb	r2, [r3, #3]
		  curveDataDWIN.CurveEnable[4] = true;
 8001bf2:	4b99      	ldr	r3, [pc, #612]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	711a      	strb	r2, [r3, #4]
		  curveDataDWIN.CurveEnable[5] = true;
 8001bf8:	4b97      	ldr	r3, [pc, #604]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	715a      	strb	r2, [r3, #5]
		  curveDataDWIN.CurveEnable[6] = true;
 8001bfe:	4b96      	ldr	r3, [pc, #600]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	719a      	strb	r2, [r3, #6]
		  curveDataDWIN.CurveEnable[7] = true;
 8001c04:	4b94      	ldr	r3, [pc, #592]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	71da      	strb	r2, [r3, #7]

		  curveDataDWIN.CurveLenData[0] = 1;
 8001c0a:	4b93      	ldr	r3, [pc, #588]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	721a      	strb	r2, [r3, #8]
		  curveDataDWIN.CurveLenData[1] = 1;
 8001c10:	4b91      	ldr	r3, [pc, #580]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	725a      	strb	r2, [r3, #9]
		  curveDataDWIN.CurveLenData[2] = 1;
 8001c16:	4b90      	ldr	r3, [pc, #576]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	729a      	strb	r2, [r3, #10]
		  curveDataDWIN.CurveLenData[3] = 1;
 8001c1c:	4b8e      	ldr	r3, [pc, #568]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	72da      	strb	r2, [r3, #11]
		  curveDataDWIN.CurveLenData[4] = 1;
 8001c22:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	731a      	strb	r2, [r3, #12]
		  curveDataDWIN.CurveLenData[5] = 1;
 8001c28:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	735a      	strb	r2, [r3, #13]
		  curveDataDWIN.CurveLenData[6] = 1;
 8001c2e:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	739a      	strb	r2, [r3, #14]
		  curveDataDWIN.CurveLenData[7] = 1;
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	73da      	strb	r2, [r3, #15]

		  curveDataDWIN.CurveData[0][0] = cnt;
 8001c3a:	4b85      	ldr	r3, [pc, #532]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b85      	ldr	r3, [pc, #532]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001c42:	821a      	strh	r2, [r3, #16]
		  curveDataDWIN.CurveData[1][0] = sin(cnt * 2 * VAL) * 127 + 127;
 8001c44:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fd38 	bl	80006c0 <__aeabi_i2d>
 8001c50:	a37b      	add	r3, pc, #492	; (adr r3, 8001e40 <curveProcessDWIN+0x2a0>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fab7 	bl	80001c8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	ec43 2b17 	vmov	d7, r2, r3
 8001c62:	eeb0 0a47 	vmov.f32	s0, s14
 8001c66:	eef0 0a67 	vmov.f32	s1, s15
 8001c6a:	f004 ffc9 	bl	8006c00 <sin>
 8001c6e:	ec51 0b10 	vmov	r0, r1, d0
 8001c72:	a375      	add	r3, pc, #468	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe faa6 	bl	80001c8 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	a370      	add	r3, pc, #448	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fbcd 	bl	8000428 <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe fe2d 	bl	80008f4 <__aeabi_d2uiz>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001ca0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		  curveDataDWIN.CurveData[2][0] = cos(cnt * 2 * VAL) * 127 + 127;
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fd08 	bl	80006c0 <__aeabi_i2d>
 8001cb0:	a363      	add	r3, pc, #396	; (adr r3, 8001e40 <curveProcessDWIN+0x2a0>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fa87 	bl	80001c8 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	ec43 2b17 	vmov	d7, r2, r3
 8001cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc6:	eef0 0a67 	vmov.f32	s1, s15
 8001cca:	f004 ff49 	bl	8006b60 <cos>
 8001cce:	ec51 0b10 	vmov	r0, r1, d0
 8001cd2:	a35d      	add	r3, pc, #372	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fa76 	bl	80001c8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	a358      	add	r3, pc, #352	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fb9d 	bl	8000428 <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe fdfd 	bl	80008f4 <__aeabi_d2uiz>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001d00:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
		  curveDataDWIN.CurveData[3][0] = cnt;
 8001d04:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001d0c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
		  curveDataDWIN.CurveData[4][0] = sin(cnt * 2 * VAL) * 127 + 127;
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fcd2 	bl	80006c0 <__aeabi_i2d>
 8001d1c:	a348      	add	r3, pc, #288	; (adr r3, 8001e40 <curveProcessDWIN+0x2a0>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fa51 	bl	80001c8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b17 	vmov	d7, r2, r3
 8001d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d32:	eef0 0a67 	vmov.f32	s1, s15
 8001d36:	f004 ff63 	bl	8006c00 <sin>
 8001d3a:	ec51 0b10 	vmov	r0, r1, d0
 8001d3e:	a342      	add	r3, pc, #264	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fa40 	bl	80001c8 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	a33d      	add	r3, pc, #244	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fb67 	bl	8000428 <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fdc7 	bl	80008f4 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001d6c:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		  curveDataDWIN.CurveData[5][0] = cos(cnt * 2 * VAL) * 127 + 127;
 8001d70:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fca2 	bl	80006c0 <__aeabi_i2d>
 8001d7c:	a330      	add	r3, pc, #192	; (adr r3, 8001e40 <curveProcessDWIN+0x2a0>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fa21 	bl	80001c8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	ec43 2b17 	vmov	d7, r2, r3
 8001d8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d92:	eef0 0a67 	vmov.f32	s1, s15
 8001d96:	f004 fee3 	bl	8006b60 <cos>
 8001d9a:	ec51 0b10 	vmov	r0, r1, d0
 8001d9e:	a32a      	add	r3, pc, #168	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fa10 	bl	80001c8 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	a325      	add	r3, pc, #148	; (adr r3, 8001e48 <curveProcessDWIN+0x2a8>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fb37 	bl	8000428 <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fd97 	bl	80008f4 <__aeabi_d2uiz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001dcc:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
		  curveDataDWIN.CurveData[6][0] = meandr;
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <curveProcessDWIN+0x2b4>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001dd6:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
		  curveDataDWIN.CurveData[7][0] = meandr;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <curveProcessDWIN+0x2b4>)
 8001ddc:	881a      	ldrh	r2, [r3, #0]
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001de0:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390

		  writeCurveDWIN(curveDataDWIN);
 8001de4:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f04f 0800 	mov.w	r8, #0
 8001dec:	4690      	mov	r8, r2
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	2600      	movs	r6, #0
 8001df2:	4616      	mov	r6, r2
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	2500      	movs	r5, #0
 8001df8:	4615      	mov	r5, r2
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	4614      	mov	r4, r2
 8001e00:	4668      	mov	r0, sp
 8001e02:	3310      	adds	r3, #16
 8001e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f004 fe93 	bl	8006b34 <memcpy>
 8001e0e:	4640      	mov	r0, r8
 8001e10:	4631      	mov	r1, r6
 8001e12:	462a      	mov	r2, r5
 8001e14:	4623      	mov	r3, r4
 8001e16:	f7ff fd3d 	bl	8001894 <writeCurveDWIN>
		  waitOkMessageDWIN();
 8001e1a:	f7ff fcb1 	bl	8001780 <waitOkMessageDWIN>
		  memset(&curveDataDWIN, 0, sizeof(curveDataDWIN));
 8001e1e:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8001e22:	2100      	movs	r1, #0
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <curveProcessDWIN+0x2b8>)
 8001e26:	f004 fe93 	bl	8006b50 <memset>
	  }
	  else
	  {
		  cnt = 0;
	  }
}
 8001e2a:	e002      	b.n	8001e32 <curveProcessDWIN+0x292>
		  cnt = 0;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <curveProcessDWIN+0x2b0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	a2529d39 	.word	0xa2529d39
 8001e44:	3f91df46 	.word	0x3f91df46
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	405fc000 	.word	0x405fc000
 8001e50:	20000032 	.word	0x20000032
 8001e54:	20000034 	.word	0x20000034
 8001e58:	20000778 	.word	0x20000778

08001e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e66:	2003      	movs	r0, #3
 8001e68:	f000 f960 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f80d 	bl	8001e8c <HAL_InitTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	e001      	b.n	8001e82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e7e:	f7ff f84f 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e82:	79fb      	ldrb	r3, [r7, #7]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_InitTick+0x6c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_InitTick+0x70>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_InitTick+0x6c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f96d 	bl	8002196 <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d809      	bhi.n	8001edc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f937 	bl	8002142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_InitTick+0x74>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e007      	b.n	8001eec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e004      	b.n	8001eec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e001      	b.n	8001eec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000b8c 	.word	0x20000b8c

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000b8c 	.word	0x20000b8c

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e098      	b.n	80022f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_DMA_Init+0x150>)
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d80f      	bhi.n	80021ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_DMA_Init+0x154>)
 80021d6:	4413      	add	r3, r2
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_DMA_Init+0x158>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	009a      	lsls	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_DMA_Init+0x15c>)
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
 80021ec:	e00e      	b.n	800220c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_DMA_Init+0x160>)
 80021f6:	4413      	add	r3, r2
 80021f8:	4a43      	ldr	r2, [pc, #268]	; (8002308 <HAL_DMA_Init+0x158>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	009a      	lsls	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a42      	ldr	r2, [pc, #264]	; (8002314 <HAL_DMA_Init+0x164>)
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002266:	d039      	beq.n	80022dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <HAL_DMA_Init+0x15c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11a      	bne.n	80022a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_DMA_Init+0x168>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 031c 	and.w	r3, r3, #28
 800227e:	210f      	movs	r1, #15
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	4924      	ldr	r1, [pc, #144]	; (8002318 <HAL_DMA_Init+0x168>)
 8002288:	4013      	ands	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_DMA_Init+0x168>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f003 031c 	and.w	r3, r3, #28
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	491d      	ldr	r1, [pc, #116]	; (8002318 <HAL_DMA_Init+0x168>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
 80022a6:	e019      	b.n	80022dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_DMA_Init+0x16c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	f003 031c 	and.w	r3, r3, #28
 80022b4:	210f      	movs	r1, #15
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	4917      	ldr	r1, [pc, #92]	; (800231c <HAL_DMA_Init+0x16c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_DMA_Init+0x16c>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 031c 	and.w	r3, r3, #28
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	4911      	ldr	r1, [pc, #68]	; (800231c <HAL_DMA_Init+0x16c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40020407 	.word	0x40020407
 8002304:	bffdfff8 	.word	0xbffdfff8
 8002308:	cccccccd 	.word	0xcccccccd
 800230c:	40020000 	.word	0x40020000
 8002310:	bffdfbf8 	.word	0xbffdfbf8
 8002314:	40020400 	.word	0x40020400
 8002318:	400200a8 	.word	0x400200a8
 800231c:	400204a8 	.word	0x400204a8

08002320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Start_IT+0x20>
 800233c:	2302      	movs	r3, #2
 800233e:	e04b      	b.n	80023d8 <HAL_DMA_Start_IT+0xb8>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d13a      	bne.n	80023ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f95f 	bl	800263c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 020e 	orr.w	r2, r2, #14
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00f      	b.n	80023b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 020a 	orr.w	r2, r2, #10
 80023b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e005      	b.n	80023d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d008      	beq.n	800240a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2204      	movs	r2, #4
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e022      	b.n	8002450 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 020e 	bic.w	r2, r2, #14
 8002418:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f003 021c 	and.w	r2, r3, #28
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d005      	beq.n	8002480 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2204      	movs	r2, #4
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e029      	b.n	80024d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020e 	bic.w	r2, r2, #14
 800248e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f003 021c 	and.w	r2, r3, #28
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
    }
  }
  return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f003 031c 	and.w	r3, r3, #28
 80024fe:	2204      	movs	r2, #4
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d026      	beq.n	8002558 <HAL_DMA_IRQHandler+0x7a>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d021      	beq.n	8002558 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0204 	bic.w	r2, r2, #4
 8002530:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f003 021c 	and.w	r2, r3, #28
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2104      	movs	r1, #4
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d071      	beq.n	8002632 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002556:	e06c      	b.n	8002632 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	f003 031c 	and.w	r3, r3, #28
 8002560:	2202      	movs	r2, #2
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02e      	beq.n	80025ca <HAL_DMA_IRQHandler+0xec>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d029      	beq.n	80025ca <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10b      	bne.n	800259c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 020a 	bic.w	r2, r2, #10
 8002592:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	f003 021c 	and.w	r2, r3, #28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2102      	movs	r1, #2
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d038      	beq.n	8002632 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025c8:	e033      	b.n	8002632 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f003 031c 	and.w	r3, r3, #28
 80025d2:	2208      	movs	r2, #8
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02a      	beq.n	8002634 <HAL_DMA_IRQHandler+0x156>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d025      	beq.n	8002634 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 020e 	bic.w	r2, r2, #14
 80025f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f003 021c 	and.w	r2, r3, #28
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002632:	bf00      	nop
 8002634:	bf00      	nop
}
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f003 021c 	and.w	r2, r3, #28
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b10      	cmp	r3, #16
 800266c:	d108      	bne.n	8002680 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800267e:	e007      	b.n	8002690 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e17f      	b.n	80029ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8171 	beq.w	80029a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d00b      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d007      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d8:	2b11      	cmp	r3, #17
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d130      	bne.n	8002746 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800271a:	2201      	movs	r2, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0201 	and.w	r2, r3, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b03      	cmp	r3, #3
 8002750:	d118      	bne.n	8002784 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x128>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80ac 	beq.w	80029a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_GPIO_Init+0x330>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	4a5e      	ldr	r2, [pc, #376]	; (80029cc <HAL_GPIO_Init+0x330>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6613      	str	r3, [r2, #96]	; 0x60
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_GPIO_Init+0x330>)
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002890:	d025      	beq.n	80028de <HAL_GPIO_Init+0x242>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4f      	ldr	r2, [pc, #316]	; (80029d4 <HAL_GPIO_Init+0x338>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <HAL_GPIO_Init+0x23e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4e      	ldr	r2, [pc, #312]	; (80029d8 <HAL_GPIO_Init+0x33c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_GPIO_Init+0x23a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4d      	ldr	r2, [pc, #308]	; (80029dc <HAL_GPIO_Init+0x340>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x236>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_GPIO_Init+0x344>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x232>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_GPIO_Init+0x348>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x22e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_GPIO_Init+0x34c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x22a>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e00c      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e00a      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028ca:	2305      	movs	r3, #5
 80028cc:	e008      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028ce:	2304      	movs	r3, #4
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028d2:	2303      	movs	r3, #3
 80028d4:	e004      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028de:	2300      	movs	r3, #0
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	f002 0203 	and.w	r2, r2, #3
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	4093      	lsls	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028f0:	4937      	ldr	r1, [pc, #220]	; (80029d0 <HAL_GPIO_Init+0x334>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002922:	4a32      	ldr	r2, [pc, #200]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_GPIO_Init+0x350>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <HAL_GPIO_Init+0x350>)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_GPIO_Init+0x350>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_GPIO_Init+0x350>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f47f ae78 	bne.w	80026ac <HAL_GPIO_Init+0x10>
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010000 	.word	0x40010000
 80029d4:	48000400 	.word	0x48000400
 80029d8:	48000800 	.word	0x48000800
 80029dc:	48000c00 	.word	0x48000c00
 80029e0:	48001000 	.word	0x48001000
 80029e4:	48001400 	.word	0x48001400
 80029e8:	48001800 	.word	0x48001800
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40007000 	.word	0x40007000

08002a10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40007000 	.word	0x40007000

08002a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	d130      	bne.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d038      	beq.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2232      	movs	r2, #50	; 0x32
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0c9b      	lsrs	r3, r3, #18
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a70:	e002      	b.n	8002a78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a84:	d102      	bne.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f2      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a98:	d110      	bne.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e00f      	b.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d007      	beq.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ab4:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	431bde83 	.word	0x431bde83

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e3d4      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aea:	4ba1      	ldr	r3, [pc, #644]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af4:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80e4 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4a>
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	f040 808b 	bne.w	8002c30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 8087 	bne.w	8002c30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b22:	4b93      	ldr	r3, [pc, #588]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x62>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e3ac      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	4b8c      	ldr	r3, [pc, #560]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_RCC_OscConfig+0x7c>
 8002b4a:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b52:	e005      	b.n	8002b60 <HAL_RCC_OscConfig+0x88>
 8002b54:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d223      	bcs.n	8002bac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fd41 	bl	80035f0 <RCC_SetFlashLatencyFromMSIRange>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e38d      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b78:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a7c      	ldr	r2, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b7a      	ldr	r3, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4977      	ldr	r1, [pc, #476]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	4972      	ldr	r1, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
 8002baa:	e025      	b.n	8002bf8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bac:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6f      	ldr	r2, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	496a      	ldr	r1, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bca:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	4965      	ldr	r1, [pc, #404]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fd01 	bl	80035f0 <RCC_SetFlashLatencyFromMSIRange>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e34d      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf8:	f000 fc36 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	495a      	ldr	r1, [pc, #360]	; (8002d74 <HAL_RCC_OscConfig+0x29c>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x2a0>)
 8002c16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c18:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_RCC_OscConfig+0x2a4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f935 	bl	8001e8c <HAL_InitTick>
 8002c22:	4603      	mov	r3, r0
 8002c24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d052      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	e331      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d032      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c38:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a4c      	ldr	r2, [pc, #304]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c44:	f7ff f972 	bl	8001f2c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c4c:	f7ff f96e 	bl	8001f2c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e31a      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	493b      	ldr	r1, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	4936      	ldr	r1, [pc, #216]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	e01a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c9e:	4b34      	ldr	r3, [pc, #208]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002caa:	f7ff f93f 	bl	8001f2c <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cb2:	f7ff f93b 	bl	8001f2c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e2e7      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x1da>
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d074      	beq.n	8002dca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x21a>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d10e      	bne.n	8002d0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d064      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d160      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e2c4      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x24a>
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e01d      	b.n	8002d5e <HAL_RCC_OscConfig+0x286>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x26e>
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x286>
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <HAL_RCC_OscConfig+0x298>)
 8002d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7ff f8e1 	bl	8001f2c <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6c:	e011      	b.n	8002d92 <HAL_RCC_OscConfig+0x2ba>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08007c88 	.word	0x08007c88
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7ff f8d4 	bl	8001f2c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e280      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	4baf      	ldr	r3, [pc, #700]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x2a8>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7ff f8c4 	bl	8001f2c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7ff f8c0 	bl	8001f2c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e26c      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dba:	4ba5      	ldr	r3, [pc, #660]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2d0>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d060      	beq.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x310>
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de8:	4b99      	ldr	r3, [pc, #612]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x328>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e249      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b93      	ldr	r3, [pc, #588]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	4990      	ldr	r1, [pc, #576]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e14:	e040      	b.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d023      	beq.n	8002e66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1e:	4b8c      	ldr	r3, [pc, #560]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a8b      	ldr	r2, [pc, #556]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7ff f87f 	bl	8001f2c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e32:	f7ff f87b 	bl	8001f2c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e227      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e44:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	497c      	ldr	r1, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
 8002e64:	e018      	b.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e66:	4b7a      	ldr	r3, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a79      	ldr	r2, [pc, #484]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7ff f85b 	bl	8001f2c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7ff f857 	bl	8001f2c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e203      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e8c:	4b70      	ldr	r3, [pc, #448]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d03c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	4a67      	ldr	r2, [pc, #412]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7ff f836 	bl	8001f2c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7ff f832 	bl	8001f2c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1de      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed6:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ef      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
 8002ee4:	e01b      	b.n	8002f1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eec:	4a58      	ldr	r2, [pc, #352]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7ff f819 	bl	8001f2c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efe:	f7ff f815 	bl	8001f2c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1c1      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f10:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ef      	bne.n	8002efe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80a6 	beq.w	8003078 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f30:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b44      	ldr	r3, [pc, #272]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4a43      	ldr	r2, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f54:	2301      	movs	r3, #1
 8002f56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f58:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d118      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f70:	f7fe ffdc 	bl	8001f2c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe ffd8 	bl	8001f2c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e184      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_RCC_OscConfig+0x57c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4d8>
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fae:	e024      	b.n	8002ffa <HAL_RCC_OscConfig+0x522>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d110      	bne.n	8002fda <HAL_RCC_OscConfig+0x502>
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	4a24      	ldr	r2, [pc, #144]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd8:	e00f      	b.n	8002ffa <HAL_RCC_OscConfig+0x522>
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7fe ff93 	bl	8001f2c <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe ff8f 	bl	8001f2c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e139      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x578>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ed      	beq.n	800300a <HAL_RCC_OscConfig+0x532>
 800302e:	e01a      	b.n	8003066 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe ff7c 	bl	8001f2c <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003036:	e00f      	b.n	8003058 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe ff78 	bl	8001f2c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d906      	bls.n	8003058 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e122      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003058:	4b90      	ldr	r3, [pc, #576]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e8      	bne.n	8003038 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003066:	7ffb      	ldrb	r3, [r7, #31]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306c:	4b8b      	ldr	r3, [pc, #556]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	4a8a      	ldr	r2, [pc, #552]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003076:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8108 	beq.w	8003292 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	2b02      	cmp	r3, #2
 8003088:	f040 80d0 	bne.w	800322c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800308c:	4b83      	ldr	r3, [pc, #524]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0203 	and.w	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	429a      	cmp	r2, r3
 800309e:	d130      	bne.n	8003102 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	3b01      	subs	r3, #1
 80030ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d127      	bne.n	8003102 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d11f      	bne.n	8003102 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030cc:	2a07      	cmp	r2, #7
 80030ce:	bf14      	ite	ne
 80030d0:	2201      	movne	r2, #1
 80030d2:	2200      	moveq	r2, #0
 80030d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d113      	bne.n	8003102 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d06e      	beq.n	80031e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d069      	beq.n	80031dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003108:	4b64      	ldr	r3, [pc, #400]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b7      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003124:	4b5d      	ldr	r3, [pc, #372]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800312a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003130:	f7fe fefc 	bl	8001f2c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fef8 	bl	8001f2c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0a4      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003156:	4b51      	ldr	r3, [pc, #324]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCC_OscConfig+0x7c8>)
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003166:	3a01      	subs	r2, #1
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	4311      	orrs	r1, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003170:	0212      	lsls	r2, r2, #8
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003178:	0852      	lsrs	r2, r2, #1
 800317a:	3a01      	subs	r2, #1
 800317c:	0552      	lsls	r2, r2, #21
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003184:	0852      	lsrs	r2, r2, #1
 8003186:	3a01      	subs	r2, #1
 8003188:	0652      	lsls	r2, r2, #25
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003190:	0912      	lsrs	r2, r2, #4
 8003192:	0452      	lsls	r2, r2, #17
 8003194:	430a      	orrs	r2, r1
 8003196:	4941      	ldr	r1, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3e      	ldr	r2, [pc, #248]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a8:	4b3c      	ldr	r3, [pc, #240]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a3b      	ldr	r2, [pc, #236]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b4:	f7fe feba 	bl	8001f2c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe feb6 	bl	8001f2c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e062      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031da:	e05a      	b.n	8003292 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e059      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d152      	bne.n	8003292 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003202:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003204:	f7fe fe92 	bl	8001f2c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fe8e 	bl	8001f2c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e03a      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x734>
 800322a:	e032      	b.n	8003292 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d02d      	beq.n	800328e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800323c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800324a:	4b14      	ldr	r3, [pc, #80]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	4a13      	ldr	r2, [pc, #76]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003250:	f023 0303 	bic.w	r3, r3, #3
 8003254:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 800325c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe fe61 	bl	8001f2c <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe fe5d 	bl	8001f2c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e009      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_OscConfig+0x7c4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x796>
 800328c:	e001      	b.n	8003292 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	f99d808c 	.word	0xf99d808c

080032a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0c8      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b8:	4b66      	ldr	r3, [pc, #408]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d910      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b63      	ldr	r3, [pc, #396]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 0207 	bic.w	r2, r3, #7
 80032ce:	4961      	ldr	r1, [pc, #388]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b0      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d04c      	beq.n	800338e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d107      	bne.n	800330c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fc:	4b56      	ldr	r3, [pc, #344]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d121      	bne.n	800334c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e09e      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d107      	bne.n	8003324 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d115      	bne.n	800334c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e092      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e086      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e07e      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 0203 	bic.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	493f      	ldr	r1, [pc, #252]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335e:	f7fe fde5 	bl	8001f2c <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003364:	e00a      	b.n	800337c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003366:	f7fe fde1 	bl	8001f2c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e066      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 020c 	and.w	r2, r3, #12
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	429a      	cmp	r2, r3
 800338c:	d1eb      	bne.n	8003366 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	492c      	ldr	r1, [pc, #176]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d210      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4924      	ldr	r1, [pc, #144]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b22      	ldr	r3, [pc, #136]	; (8003454 <HAL_RCC_ClockConfig+0x1b0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e036      	b.n	800344a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4918      	ldr	r1, [pc, #96]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4910      	ldr	r1, [pc, #64]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341a:	f000 f825 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_ClockConfig+0x1b4>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490c      	ldr	r1, [pc, #48]	; (800345c <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fd24 	bl	8001e8c <HAL_InitTick>
 8003444:	4603      	mov	r3, r0
 8003446:	72fb      	strb	r3, [r7, #11]

  return status;
 8003448:	7afb      	ldrb	r3, [r7, #11]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40022000 	.word	0x40022000
 8003458:	40021000 	.word	0x40021000
 800345c:	08007c88 	.word	0x08007c88
 8003460:	20000000 	.word	0x20000000
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d121      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d11e      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800349c:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a8:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e005      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b8:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034c4:	4a2b      	ldr	r2, [pc, #172]	; (8003574 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10d      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_GetSysClockFreq+0x110>)
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e004      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_RCC_GetSysClockFreq+0x114>)
 80034ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d134      	bne.n	8003560 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0xa6>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d003      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xac>
 800350c:	e005      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCC_GetSysClockFreq+0x110>)
 8003510:	617b      	str	r3, [r7, #20]
      break;
 8003512:	e005      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_GetSysClockFreq+0x114>)
 8003516:	617b      	str	r3, [r7, #20]
      break;
 8003518:	e002      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	617b      	str	r3, [r7, #20]
      break;
 800351e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	3301      	adds	r3, #1
 800352c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	fb02 f203 	mul.w	r2, r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_GetSysClockFreq+0x108>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	0e5b      	lsrs	r3, r3, #25
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	3301      	adds	r3, #1
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003560:	69bb      	ldr	r3, [r7, #24]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	08007ca0 	.word	0x08007ca0
 8003578:	00f42400 	.word	0x00f42400
 800357c:	007a1200 	.word	0x007a1200

08003580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_RCC_GetHCLKFreq+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000000 	.word	0x20000000

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800359c:	f7ff fff0 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4904      	ldr	r1, [pc, #16]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	08007c98 	.word	0x08007c98

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c8:	f7ff ffda 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0adb      	lsrs	r3, r3, #11
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08007c98 	.word	0x08007c98

080035f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003608:	f7ff fa02 	bl	8002a10 <HAL_PWREx_GetVoltageRange>
 800360c:	6178      	str	r0, [r7, #20]
 800360e:	e014      	b.n	800363a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	; 0x58
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003628:	f7ff f9f2 	bl	8002a10 <HAL_PWREx_GetVoltageRange>
 800362c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003640:	d10b      	bne.n	800365a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d919      	bls.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2ba0      	cmp	r3, #160	; 0xa0
 800364c:	d902      	bls.n	8003654 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800364e:	2302      	movs	r3, #2
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e013      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003654:	2301      	movs	r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	e010      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d902      	bls.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003660:	2303      	movs	r3, #3
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e00a      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b80      	cmp	r3, #128	; 0x80
 800366a:	d102      	bne.n	8003672 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366c:	2302      	movs	r3, #2
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e004      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b70      	cmp	r3, #112	; 0x70
 8003676:	d101      	bne.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003678:	2301      	movs	r3, #1
 800367a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 0207 	bic.w	r2, r3, #7
 8003684:	4909      	ldr	r1, [pc, #36]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40022000 	.word	0x40022000

080036b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036bc:	2300      	movs	r3, #0
 80036be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d041      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036d4:	d02a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036da:	d824      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e6:	d81e      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d010      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036f2:	e018      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036f4:	4b86      	ldr	r3, [pc, #536]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a85      	ldr	r2, [pc, #532]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003700:	e015      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fabb 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003712:	e00c      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3320      	adds	r3, #32
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fba6 	bl	8003e6c <RCCEx_PLLSAI2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	74fb      	strb	r3, [r7, #19]
      break;
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800372c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003734:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003742:	4973      	ldr	r1, [pc, #460]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800374a:	e001      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d041      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003764:	d02a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800376a:	d824      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800376c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003776:	d81e      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d010      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003782:	e018      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003784:	4b62      	ldr	r3, [pc, #392]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a61      	ldr	r2, [pc, #388]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003790:	e015      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa73 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a2:	e00c      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3320      	adds	r3, #32
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fb5e 	bl	8003e6c <RCCEx_PLLSAI2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	74fb      	strb	r3, [r7, #19]
      break;
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037c4:	4b52      	ldr	r3, [pc, #328]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d2:	494f      	ldr	r1, [pc, #316]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037da:	e001      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a0 	beq.w	800392e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037f2:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003808:	4b41      	ldr	r3, [pc, #260]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	4a40      	ldr	r2, [pc, #256]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	; 0x58
 8003814:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003820:	2301      	movs	r3, #1
 8003822:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003824:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3a      	ldr	r2, [pc, #232]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003830:	f7fe fb7c 	bl	8001f2c <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003836:	e009      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7fe fb78 	bl	8001f2c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	74fb      	strb	r3, [r7, #19]
        break;
 800384a:	e005      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800384c:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d15c      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003868:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d019      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	4a20      	ldr	r2, [pc, #128]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fe fb37 	bl	8001f2c <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c0:	e00b      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe fb33 	bl	8001f2c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d902      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	74fb      	strb	r3, [r7, #19]
            break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ec      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fe:	4904      	ldr	r1, [pc, #16]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003906:	e009      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	74bb      	strb	r3, [r7, #18]
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391c:	7c7b      	ldrb	r3, [r7, #17]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b9e      	ldr	r3, [pc, #632]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	4a9d      	ldr	r2, [pc, #628]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800393a:	4b98      	ldr	r3, [pc, #608]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f023 0203 	bic.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	4994      	ldr	r1, [pc, #592]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800395c:	4b8f      	ldr	r3, [pc, #572]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f023 020c 	bic.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	498c      	ldr	r1, [pc, #560]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397e:	4b87      	ldr	r3, [pc, #540]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	4983      	ldr	r1, [pc, #524]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a0:	4b7e      	ldr	r3, [pc, #504]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	497b      	ldr	r1, [pc, #492]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	4972      	ldr	r1, [pc, #456]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e4:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	496a      	ldr	r1, [pc, #424]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	4961      	ldr	r1, [pc, #388]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a28:	4b5c      	ldr	r3, [pc, #368]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	4959      	ldr	r1, [pc, #356]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4a:	4b54      	ldr	r3, [pc, #336]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	4950      	ldr	r1, [pc, #320]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	4948      	ldr	r1, [pc, #288]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8e:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	493f      	ldr	r1, [pc, #252]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d028      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab0:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003abe:	4937      	ldr	r1, [pc, #220]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ace:	d106      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad0:	4b32      	ldr	r3, [pc, #200]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a31      	ldr	r2, [pc, #196]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ada:	60d3      	str	r3, [r2, #12]
 8003adc:	e011      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	2101      	movs	r1, #1
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f8c8 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d028      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	491f      	ldr	r1, [pc, #124]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b38:	60d3      	str	r3, [r2, #12]
 8003b3a:	e011      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f899 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	4908      	ldr	r1, [pc, #32]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a02      	ldr	r2, [pc, #8]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b96:	60d3      	str	r3, [r2, #12]
 8003b98:	e014      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f867 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02f      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bde:	4928      	ldr	r1, [pc, #160]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f844 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d014      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	74bb      	strb	r3, [r7, #18]
 8003c0a:	e011      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f925 	bl	8003e6c <RCCEx_PLLSAI2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c3c:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4a:	490d      	ldr	r1, [pc, #52]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	4904      	ldr	r1, [pc, #16]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000

08003c84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c92:	4b75      	ldr	r3, [pc, #468]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d018      	beq.n	8003cd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9e:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0203 	and.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d10d      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d047      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e044      	b.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d018      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0x86>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d825      	bhi.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x62>
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d009      	beq.n	8003cf8 <RCCEx_PLLSAI1_Config+0x74>
 8003ce4:	e020      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce6:	4b60      	ldr	r3, [pc, #384]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11d      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf6:	e01a      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf8:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e013      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d0a:	4b57      	ldr	r3, [pc, #348]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d16:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d26:	e006      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2c:	e004      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	430b      	orrs	r3, r1
 8003d54:	4944      	ldr	r1, [pc, #272]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d17d      	bne.n	8003e5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d60:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fe f8de 	bl	8001f2c <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d72:	e009      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d74:	f7fe f8da 	bl	8001f2c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	73fb      	strb	r3, [r7, #15]
        break;
 8003d86:	e005      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d88:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ef      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d160      	bne.n	8003e5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d111      	bne.n	8003dc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	0912      	lsrs	r2, r2, #4
 8003db8:	0452      	lsls	r2, r2, #17
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	492a      	ldr	r1, [pc, #168]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	610b      	str	r3, [r1, #16]
 8003dc2:	e027      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d112      	bne.n	8003df0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dca:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6892      	ldr	r2, [r2, #8]
 8003dda:	0211      	lsls	r1, r2, #8
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6912      	ldr	r2, [r2, #16]
 8003de0:	0852      	lsrs	r2, r2, #1
 8003de2:	3a01      	subs	r2, #1
 8003de4:	0552      	lsls	r2, r2, #21
 8003de6:	430a      	orrs	r2, r1
 8003de8:	491f      	ldr	r1, [pc, #124]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]
 8003dee:	e011      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	0211      	lsls	r1, r2, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6952      	ldr	r2, [r2, #20]
 8003e06:	0852      	lsrs	r2, r2, #1
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0652      	lsls	r2, r2, #25
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	4916      	ldr	r1, [pc, #88]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe f884 	bl	8001f2c <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e28:	f7fe f880 	bl	8001f2c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
          break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ef      	beq.n	8003e28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4904      	ldr	r1, [pc, #16]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000

08003e6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d018      	beq.n	8003eb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e86:	4b67      	ldr	r3, [pc, #412]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0203 	and.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d10d      	bne.n	8003eb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
       ||
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
       ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d047      	beq.n	8003f42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e044      	b.n	8003f42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d018      	beq.n	8003ef2 <RCCEx_PLLSAI2_Config+0x86>
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d825      	bhi.n	8003f10 <RCCEx_PLLSAI2_Config+0xa4>
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d002      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x62>
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d009      	beq.n	8003ee0 <RCCEx_PLLSAI2_Config+0x74>
 8003ecc:	e020      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ece:	4b55      	ldr	r3, [pc, #340]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11d      	bne.n	8003f16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ede:	e01a      	b.n	8003f16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef0:	e013      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f0e:	e006      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e004      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	4939      	ldr	r1, [pc, #228]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d167      	bne.n	8004018 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a35      	ldr	r2, [pc, #212]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f54:	f7fd ffea 	bl	8001f2c <HAL_GetTick>
 8003f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f5a:	e009      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f5c:	f7fd ffe6 	bl	8001f2c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d902      	bls.n	8003f70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6e:	e005      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ef      	bne.n	8003f5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d14a      	bne.n	8004018 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d111      	bne.n	8003fac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f88:	4b26      	ldr	r3, [pc, #152]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6892      	ldr	r2, [r2, #8]
 8003f98:	0211      	lsls	r1, r2, #8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	0912      	lsrs	r2, r2, #4
 8003fa0:	0452      	lsls	r2, r2, #17
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	491f      	ldr	r1, [pc, #124]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	614b      	str	r3, [r1, #20]
 8003faa:	e011      	b.n	8003fd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fac:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6892      	ldr	r2, [r2, #8]
 8003fbc:	0211      	lsls	r1, r2, #8
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6912      	ldr	r2, [r2, #16]
 8003fc2:	0852      	lsrs	r2, r2, #1
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	0652      	lsls	r2, r2, #25
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	4916      	ldr	r1, [pc, #88]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd ffa6 	bl	8001f2c <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe2:	e009      	b.n	8003ff8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fe4:	f7fd ffa2 	bl	8001f2c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d902      	bls.n	8003ff8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff6:	e005      	b.n	8004004 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4904      	ldr	r1, [pc, #16]	; (8004024 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	4313      	orrs	r3, r2
 8004016:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d06c      	beq.n	8004114 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc ff34 	bl	8000ebc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	22ca      	movs	r2, #202	; 0xca
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2253      	movs	r2, #83	; 0x53
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9a0 	bl	80043b2 <RTC_EnterInitMode>
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d14b      	bne.n	8004114 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6919      	ldr	r1, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	041a      	lsls	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9a3 	bl	8004418 <RTC_ExitInitMode>
 80040d2:	4603      	mov	r3, r0
 80040d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11b      	bne.n	8004114 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0203 	bic.w	r2, r2, #3
 80040ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	22ff      	movs	r2, #255	; 0xff
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800411e:	b590      	push	{r4, r7, lr}
 8004120:	b087      	sub	sp, #28
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_RTC_SetTime+0x1a>
 8004134:	2302      	movs	r3, #2
 8004136:	e08b      	b.n	8004250 <HAL_RTC_SetTime+0x132>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	22ca      	movs	r2, #202	; 0xca
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2253      	movs	r2, #83	; 0x53
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f92a 	bl	80043b2 <RTC_EnterInitMode>
 800415e:	4603      	mov	r3, r0
 8004160:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004162:	7cfb      	ldrb	r3, [r7, #19]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d163      	bne.n	8004230 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d126      	bne.n	80041bc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f984 	bl	8004494 <RTC_ByteToBcd2>
 800418c:	4603      	mov	r3, r0
 800418e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	785b      	ldrb	r3, [r3, #1]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f97d 	bl	8004494 <RTC_ByteToBcd2>
 800419a:	4603      	mov	r3, r0
 800419c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800419e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	789b      	ldrb	r3, [r3, #2]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f975 	bl	8004494 <RTC_ByteToBcd2>
 80041aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	78db      	ldrb	r3, [r3, #3]
 80041b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e018      	b.n	80041ee <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041dc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041e2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	78db      	ldrb	r3, [r3, #3]
 80041e8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800420c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6899      	ldr	r1, [r3, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f8f6 	bl	8004418 <RTC_ExitInitMode>
 800422c:	4603      	mov	r3, r0
 800422e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	22ff      	movs	r2, #255	; 0xff
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800424e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}

08004258 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_RTC_SetDate+0x1a>
 800426e:	2302      	movs	r3, #2
 8004270:	e075      	b.n	800435e <HAL_RTC_SetDate+0x106>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <HAL_RTC_SetDate+0x4e>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	f023 0310 	bic.w	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	330a      	adds	r3, #10
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11c      	bne.n	80042e6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	78db      	ldrb	r3, [r3, #3]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f8ef 	bl	8004494 <RTC_ByteToBcd2>
 80042b6:	4603      	mov	r3, r0
 80042b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f8e8 	bl	8004494 <RTC_ByteToBcd2>
 80042c4:	4603      	mov	r3, r0
 80042c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80042c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	789b      	ldrb	r3, [r3, #2]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f8e0 	bl	8004494 <RTC_ByteToBcd2>
 80042d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e00e      	b.n	8004304 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80042f2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80042f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	22ca      	movs	r2, #202	; 0xca
 800430a:	625a      	str	r2, [r3, #36]	; 0x24
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2253      	movs	r2, #83	; 0x53
 8004312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f84c 	bl	80043b2 <RTC_EnterInitMode>
 800431a:	4603      	mov	r3, r0
 800431c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800432e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004332:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f86f 	bl	8004418 <RTC_ExitInitMode>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	22ff      	movs	r2, #255	; 0xff
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}

08004366 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800437c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800437e:	f7fd fdd5 	bl	8001f2c <HAL_GetTick>
 8004382:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004384:	e009      	b.n	800439a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004386:	f7fd fdd1 	bl	8001f2c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004394:	d901      	bls.n	800439a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e007      	b.n	80043aa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ee      	beq.n	8004386 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d120      	bne.n	800440e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80043d6:	f7fd fda9 	bl	8001f2c <HAL_GetTick>
 80043da:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043dc:	e00d      	b.n	80043fa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043de:	f7fd fda5 	bl	8001f2c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ec:	d905      	bls.n	80043fa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <RTC_EnterInitMode+0x5c>
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d1e7      	bne.n	80043de <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <RTC_ExitInitMode+0x78>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <RTC_ExitInitMode+0x78>)
 800442a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <RTC_ExitInitMode+0x78>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ff92 	bl	8004366 <HAL_RTC_WaitForSynchro>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01e      	beq.n	8004486 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2203      	movs	r2, #3
 800444c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	73fb      	strb	r3, [r7, #15]
 8004454:	e017      	b.n	8004486 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <RTC_ExitInitMode+0x78>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <RTC_ExitInitMode+0x78>)
 800445c:	f023 0320 	bic.w	r3, r3, #32
 8004460:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff ff7f 	bl	8004366 <HAL_RTC_WaitForSynchro>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2203      	movs	r2, #3
 8004472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <RTC_ExitInitMode+0x78>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <RTC_ExitInitMode+0x78>)
 8004480:	f043 0320 	orr.w	r3, r3, #32
 8004484:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40002800 	.word	0x40002800

08004494 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80044a6:	e005      	b.n	80044b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	3b0a      	subs	r3, #10
 80044b2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	2b09      	cmp	r3, #9
 80044b8:	d8f6      	bhi.n	80044a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	7afb      	ldrb	r3, [r7, #11]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	b2db      	uxtb	r3, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e049      	b.n	800457a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fc fe36 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f000 fd36 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d001      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e04f      	b.n	800463c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a23      	ldr	r2, [pc, #140]	; (8004648 <HAL_TIM_Base_Start_IT+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01d      	beq.n	80045fa <HAL_TIM_Base_Start_IT+0x76>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c6:	d018      	beq.n	80045fa <HAL_TIM_Base_Start_IT+0x76>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <HAL_TIM_Base_Start_IT+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_TIM_Base_Start_IT+0x76>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_TIM_Base_Start_IT+0xcc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIM_Base_Start_IT+0x76>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_TIM_Base_Start_IT+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_TIM_Base_Start_IT+0x76>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_TIM_Base_Start_IT+0xd4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIM_Base_Start_IT+0x76>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_TIM_Base_Start_IT+0xd8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d115      	bne.n	8004626 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	4b17      	ldr	r3, [pc, #92]	; (8004660 <HAL_TIM_Base_Start_IT+0xdc>)
 8004602:	4013      	ands	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d015      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004612:	d011      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004624:	e008      	b.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e000      	b.n	800463a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40013400 	.word	0x40013400
 800465c:	40014000 	.word	0x40014000
 8004660:	00010007 	.word	0x00010007

08004664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e049      	b.n	800470a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f841 	bl	8004712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f000 fc6e 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start+0x24>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e03c      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b04      	cmp	r3, #4
 8004750:	d109      	bne.n	8004766 <HAL_TIM_PWM_Start+0x3e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e02f      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x58>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e022      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d109      	bne.n	800479a <HAL_TIM_PWM_Start+0x72>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e015      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x8c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e09c      	b.n	8004908 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0xb6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047dc:	e023      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xc6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	e01b      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xd6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fc:	e013      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b0c      	cmp	r3, #12
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xe6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800480c:	e00b      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xf6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	e003      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 ffb2 	bl	8005798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a35      	ldr	r2, [pc, #212]	; (8004910 <HAL_TIM_PWM_Start+0x1e8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a34      	ldr	r2, [pc, #208]	; (8004914 <HAL_TIM_PWM_Start+0x1ec>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a32      	ldr	r2, [pc, #200]	; (8004918 <HAL_TIM_PWM_Start+0x1f0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a31      	ldr	r2, [pc, #196]	; (800491c <HAL_TIM_PWM_Start+0x1f4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <HAL_TIM_PWM_Start+0x1f8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_TIM_PWM_Start+0x142>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_TIM_PWM_Start+0x144>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a22      	ldr	r2, [pc, #136]	; (8004910 <HAL_TIM_PWM_Start+0x1e8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x19e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d018      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x19e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a22      	ldr	r2, [pc, #136]	; (8004924 <HAL_TIM_PWM_Start+0x1fc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x19e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a21      	ldr	r2, [pc, #132]	; (8004928 <HAL_TIM_PWM_Start+0x200>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x19e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_TIM_PWM_Start+0x204>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x19e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_TIM_PWM_Start+0x1ec>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x19e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_TIM_PWM_Start+0x1f0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d115      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_TIM_PWM_Start+0x208>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d015      	beq.n	8004904 <HAL_TIM_PWM_Start+0x1dc>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d011      	beq.n	8004904 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	e008      	b.n	8004904 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e000      	b.n	8004906 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	00010007 	.word	0x00010007

08004934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0202 	mvn.w	r2, #2
 8004960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fae6 	bl	8004f48 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fad8 	bl	8004f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fae9 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0204 	mvn.w	r2, #4
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fabc 	bl	8004f48 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 faae 	bl	8004f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fabf 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0208 	mvn.w	r2, #8
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa92 	bl	8004f48 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa84 	bl	8004f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fa95 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0210 	mvn.w	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2208      	movs	r2, #8
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa68 	bl	8004f48 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa5a 	bl	8004f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fa6b 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0201 	mvn.w	r2, #1
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa34 	bl	8004f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 ff12 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af2:	d10e      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d107      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 ff05 	bl	800591c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d10e      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d107      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa19 	bl	8004f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d10e      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d107      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f06f 0220 	mvn.w	r2, #32
 8004b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fec5 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0fd      	b.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b14      	cmp	r3, #20
 8004b9a:	f200 80f0 	bhi.w	8004d7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004d7f 	.word	0x08004d7f
 8004bac:	08004d7f 	.word	0x08004d7f
 8004bb0:	08004d7f 	.word	0x08004d7f
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004d7f 	.word	0x08004d7f
 8004bbc:	08004d7f 	.word	0x08004d7f
 8004bc0:	08004d7f 	.word	0x08004d7f
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004d7f 	.word	0x08004d7f
 8004bcc:	08004d7f 	.word	0x08004d7f
 8004bd0:	08004d7f 	.word	0x08004d7f
 8004bd4:	08004cbb 	.word	0x08004cbb
 8004bd8:	08004d7f 	.word	0x08004d7f
 8004bdc:	08004d7f 	.word	0x08004d7f
 8004be0:	08004d7f 	.word	0x08004d7f
 8004be4:	08004cfd 	.word	0x08004cfd
 8004be8:	08004d7f 	.word	0x08004d7f
 8004bec:	08004d7f 	.word	0x08004d7f
 8004bf0:	08004d7f 	.word	0x08004d7f
 8004bf4:	08004d3d 	.word	0x08004d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa5a 	bl	80050b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0204 	bic.w	r2, r2, #4
 8004c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6999      	ldr	r1, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	619a      	str	r2, [r3, #24]
      break;
 8004c36:	e0a3      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 faca 	bl	80051d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]
      break;
 8004c78:	e082      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fb33 	bl	80052ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0204 	bic.w	r2, r2, #4
 8004ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69d9      	ldr	r1, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]
      break;
 8004cb8:	e062      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fb9b 	bl	80053fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	021a      	lsls	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	61da      	str	r2, [r3, #28]
      break;
 8004cfa:	e041      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fbe4 	bl	80054d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d3a:	e021      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fc28 	bl	8005598 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop

08004d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_TIM_ConfigClockSource+0x18>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e0b5      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x184>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d03e      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0xd4>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	f200 8087 	bhi.w	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	f000 8085 	beq.w	8004f04 <HAL_TIM_ConfigClockSource+0x170>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d87f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d01a      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0xa6>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d87b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b60      	cmp	r3, #96	; 0x60
 8004e0a:	d050      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x11a>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d877      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b50      	cmp	r3, #80	; 0x50
 8004e12:	d03c      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xfa>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d873      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d058      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x13a>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d86f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b30      	cmp	r3, #48	; 0x30
 8004e22:	d064      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d86b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d060      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d867      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05c      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d05a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e38:	e062      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f000 fc85 	bl	8005758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	609a      	str	r2, [r3, #8]
      break;
 8004e66:	e04e      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 fc6e 	bl	8005758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8a:	609a      	str	r2, [r3, #8]
      break;
 8004e8c:	e03b      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 fbe2 	bl	8005664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2150      	movs	r1, #80	; 0x50
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fc3b 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e02b      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fc01 	bl	80056c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2160      	movs	r1, #96	; 0x60
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fc2b 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e01b      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fbc2 	bl	8005664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2140      	movs	r1, #64	; 0x40
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fc1b 	bl	8005722 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 fc12 	bl	8005722 <TIM_ITRx_SetConfig>
        break;
 8004efe:	e002      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004f00:	bf00      	nop
 8004f02:	e000      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004f04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a40      	ldr	r2, [pc, #256]	; (8005098 <TIM_Base_SetConfig+0x114>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d00f      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3d      	ldr	r2, [pc, #244]	; (800509c <TIM_Base_SetConfig+0x118>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <TIM_Base_SetConfig+0x11c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3b      	ldr	r2, [pc, #236]	; (80050a4 <TIM_Base_SetConfig+0x120>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3a      	ldr	r2, [pc, #232]	; (80050a8 <TIM_Base_SetConfig+0x124>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2f      	ldr	r2, [pc, #188]	; (8005098 <TIM_Base_SetConfig+0x114>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01f      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d01b      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2c      	ldr	r2, [pc, #176]	; (800509c <TIM_Base_SetConfig+0x118>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d017      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <TIM_Base_SetConfig+0x11c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <TIM_Base_SetConfig+0x120>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <TIM_Base_SetConfig+0x124>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a28      	ldr	r2, [pc, #160]	; (80050ac <TIM_Base_SetConfig+0x128>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <TIM_Base_SetConfig+0x12c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0x9a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <TIM_Base_SetConfig+0x130>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	; (8005098 <TIM_Base_SetConfig+0x114>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00f      	beq.n	800507c <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <TIM_Base_SetConfig+0x124>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00b      	beq.n	800507c <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a11      	ldr	r2, [pc, #68]	; (80050ac <TIM_Base_SetConfig+0x128>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <TIM_Base_SetConfig+0xf8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <TIM_Base_SetConfig+0x12c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_Base_SetConfig+0xf8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a0f      	ldr	r2, [pc, #60]	; (80050b4 <TIM_Base_SetConfig+0x130>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d103      	bne.n	8005084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	615a      	str	r2, [r3, #20]
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 0302 	bic.w	r3, r3, #2
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <TIM_OC1_SetConfig+0x10c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_OC1_SetConfig+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <TIM_OC1_SetConfig+0x110>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_OC1_SetConfig+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_OC1_SetConfig+0x114>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC1_SetConfig+0x80>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_OC1_SetConfig+0x118>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC1_SetConfig+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <TIM_OC1_SetConfig+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10c      	bne.n	8005152 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0308 	bic.w	r3, r3, #8
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <TIM_OC1_SetConfig+0x10c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00f      	beq.n	800517a <TIM_OC1_SetConfig+0xc2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <TIM_OC1_SetConfig+0x110>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_OC1_SetConfig+0xc2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <TIM_OC1_SetConfig+0x114>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <TIM_OC1_SetConfig+0xc2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <TIM_OC1_SetConfig+0x118>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_OC1_SetConfig+0xc2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <TIM_OC1_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0210 	bic.w	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a28      	ldr	r2, [pc, #160]	; (80052d8 <TIM_OC2_SetConfig+0x100>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC2_SetConfig+0x6c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a27      	ldr	r2, [pc, #156]	; (80052dc <TIM_OC2_SetConfig+0x104>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10d      	bne.n	8005260 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <TIM_OC2_SetConfig+0x100>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00f      	beq.n	8005288 <TIM_OC2_SetConfig+0xb0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <TIM_OC2_SetConfig+0x104>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_OC2_SetConfig+0xb0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <TIM_OC2_SetConfig+0x108>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_OC2_SetConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <TIM_OC2_SetConfig+0x10c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_OC2_SetConfig+0xb0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <TIM_OC2_SetConfig+0x110>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d113      	bne.n	80052b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800528e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <TIM_OC3_SetConfig+0xfc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_OC3_SetConfig+0x6a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <TIM_OC3_SetConfig+0x100>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10d      	bne.n	8005372 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <TIM_OC3_SetConfig+0xfc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00f      	beq.n	800539a <TIM_OC3_SetConfig+0xae>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <TIM_OC3_SetConfig+0x100>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_OC3_SetConfig+0xae>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <TIM_OC3_SetConfig+0x104>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <TIM_OC3_SetConfig+0xae>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <TIM_OC3_SetConfig+0x108>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC3_SetConfig+0xae>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <TIM_OC3_SetConfig+0x10c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d113      	bne.n	80053c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800544a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <TIM_OC4_SetConfig+0xc0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00f      	beq.n	8005480 <TIM_OC4_SetConfig+0x84>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <TIM_OC4_SetConfig+0xc4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00b      	beq.n	8005480 <TIM_OC4_SetConfig+0x84>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <TIM_OC4_SetConfig+0xc8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_OC4_SetConfig+0x84>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <TIM_OC4_SetConfig+0xcc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC4_SetConfig+0x84>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <TIM_OC4_SetConfig+0xd0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d109      	bne.n	8005494 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	019b      	lsls	r3, r3, #6
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005514:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a17      	ldr	r2, [pc, #92]	; (8005584 <TIM_OC5_SetConfig+0xb4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_OC5_SetConfig+0x7a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a16      	ldr	r2, [pc, #88]	; (8005588 <TIM_OC5_SetConfig+0xb8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_OC5_SetConfig+0x7a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a15      	ldr	r2, [pc, #84]	; (800558c <TIM_OC5_SetConfig+0xbc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC5_SetConfig+0x7a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a14      	ldr	r2, [pc, #80]	; (8005590 <TIM_OC5_SetConfig+0xc0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC5_SetConfig+0x7a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <TIM_OC5_SetConfig+0xc4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d109      	bne.n	800555e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800

08005598 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	051b      	lsls	r3, r3, #20
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <TIM_OC6_SetConfig+0xb8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00f      	beq.n	8005614 <TIM_OC6_SetConfig+0x7c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	; (8005654 <TIM_OC6_SetConfig+0xbc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_OC6_SetConfig+0x7c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <TIM_OC6_SetConfig+0xc0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_OC6_SetConfig+0x7c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <TIM_OC6_SetConfig+0xc4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC6_SetConfig+0x7c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a14      	ldr	r2, [pc, #80]	; (8005660 <TIM_OC6_SetConfig+0xc8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800561a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800568e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 030a 	bic.w	r3, r3, #10
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0210 	bic.w	r2, r3, #16
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	f043 0307 	orr.w	r3, r3, #7
 8005744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	431a      	orrs	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2201      	movs	r2, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e068      	b.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2e      	ldr	r2, [pc, #184]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01d      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d018      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10c      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40013400 	.word	0x40013400
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e040      	b.n	80059c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb fc92 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2224      	movs	r2, #36	; 0x24
 800595c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb3a 	bl	8005fe8 <UART_SetConfig>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e022      	b.n	80059c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fdb8 	bl	80064fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800599a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fe3f 	bl	8006640 <UART_CheckIdleState>
 80059c2:	4603      	mov	r3, r0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	f040 8082 	bne.w	8005aea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_UART_Transmit+0x26>
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e07a      	b.n	8005aec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Transmit+0x38>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e073      	b.n	8005aec <HAL_UART_Transmit+0x120>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2221      	movs	r2, #33	; 0x21
 8005a18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a1a:	f7fc fa87 	bl	8001f2c <HAL_GetTick>
 8005a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a38:	d108      	bne.n	8005a4c <HAL_UART_Transmit+0x80>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	e003      	b.n	8005a54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a5c:	e02d      	b.n	8005aba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fe32 	bl	80066d2 <UART_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e039      	b.n	8005aec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	881a      	ldrh	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	3302      	adds	r3, #2
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e008      	b.n	8005aa8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b292      	uxth	r2, r2
 8005aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1cb      	bne.n	8005a5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2140      	movs	r1, #64	; 0x40
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fdfe 	bl	80066d2 <UART_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e005      	b.n	8005aec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d131      	bne.n	8005b6e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_UART_Receive_DMA+0x22>
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e02a      	b.n	8005b70 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_UART_Receive_DMA+0x34>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e023      	b.n	8005b70 <HAL_UART_Receive_DMA+0x7c>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a0f      	ldr	r2, [pc, #60]	; (8005b78 <HAL_UART_Receive_DMA+0x84>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005b5c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	461a      	mov	r2, r3
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fe31 	bl	80067cc <UART_Start_Receive_DMA>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	e000      	b.n	8005b70 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40008000 	.word	0x40008000

08005b7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d113      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 81ce 	beq.w	8005f66 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
      }
      return;
 8005bd2:	e1c8      	b.n	8005f66 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80e3 	beq.w	8005da2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4ba6      	ldr	r3, [pc, #664]	; (8005e84 <HAL_UART_IRQHandler+0x308>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80d8 	beq.w	8005da2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d010      	beq.n	8005c1e <HAL_UART_IRQHandler+0xa2>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HAL_UART_IRQHandler+0xce>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2202      	movs	r2, #2
 8005c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c40:	f043 0204 	orr.w	r2, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_UART_IRQHandler+0xfa>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2204      	movs	r2, #4
 8005c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6c:	f043 0202 	orr.w	r2, r3, #2
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d015      	beq.n	8005cac <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca2:	f043 0208 	orr.w	r2, r3, #8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d011      	beq.n	8005cda <HAL_UART_IRQHandler+0x15e>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8142 	beq.w	8005f6a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00c      	beq.n	8005d0a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d10:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d004      	beq.n	8005d2a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d031      	beq.n	8005d8e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fdcf 	bl	80068ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d123      	bne.n	8005d86 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d4c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d013      	beq.n	8005d7e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	4a4b      	ldr	r2, [pc, #300]	; (8005e88 <HAL_UART_IRQHandler+0x30c>)
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fc fb7a 	bl	800245c <HAL_DMA_Abort_IT>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	e00f      	b.n	8005d9e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f91c 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	e00b      	b.n	8005d9e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f918 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e007      	b.n	8005d9e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f914 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005d9c:	e0e5      	b.n	8005f6a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9e:	bf00      	nop
    return;
 8005da0:	e0e3      	b.n	8005f6a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	f040 80a9 	bne.w	8005efe <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80a3 	beq.w	8005efe <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 809d 	beq.w	8005efe <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2210      	movs	r2, #16
 8005dca:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d158      	bne.n	8005e8c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005de4:	893b      	ldrh	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80c1 	beq.w	8005f6e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005df2:	893a      	ldrh	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	f080 80ba 	bcs.w	8005f6e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	893a      	ldrh	r2, [r7, #8]
 8005dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d12a      	bne.n	8005e68 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0210 	bic.w	r2, r2, #16
 8005e5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fc fabc 	bl	80023e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f8a7 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e82:	e074      	b.n	8005f6e <HAL_UART_IRQHandler+0x3f2>
 8005e84:	04000120 	.word	0x04000120
 8005e88:	08006a79 	.word	0x08006a79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d063      	beq.n	8005f72 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d060      	beq.n	8005f72 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0210 	bic.w	r2, r2, #16
 8005ef0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f86a 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005efc:	e039      	b.n	8005f72 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <HAL_UART_IRQHandler+0x3a8>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fdda 	bl	8006ad6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f22:	e029      	b.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01a      	beq.n	8005f76 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
    }
    return;
 8005f48:	e015      	b.n	8005f76 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d011      	beq.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fda0 	bl	8006aa4 <UART_EndTransmit_IT>
    return;
 8005f64:	e008      	b.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005f66:	bf00      	nop
 8005f68:	e006      	b.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005f6a:	bf00      	nop
 8005f6c:	e004      	b.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005f6e:	bf00      	nop
 8005f70:	e002      	b.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005f72:	bf00      	nop
 8005f74:	e000      	b.n	8005f78 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005f76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	b5b0      	push	{r4, r5, r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4313      	orrs	r3, r2
 800600a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4bad      	ldr	r3, [pc, #692]	; (80062c8 <UART_SetConfig+0x2e0>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	69f9      	ldr	r1, [r7, #28]
 800601c:	430b      	orrs	r3, r1
 800601e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4aa2      	ldr	r2, [pc, #648]	; (80062cc <UART_SetConfig+0x2e4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	4313      	orrs	r3, r2
 800604e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a99      	ldr	r2, [pc, #612]	; (80062d0 <UART_SetConfig+0x2e8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d121      	bne.n	80060b2 <UART_SetConfig+0xca>
 800606e:	4b99      	ldr	r3, [pc, #612]	; (80062d4 <UART_SetConfig+0x2ec>)
 8006070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	2b03      	cmp	r3, #3
 800607a:	d817      	bhi.n	80060ac <UART_SetConfig+0xc4>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x9c>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	08006095 	.word	0x08006095
 8006088:	080060a1 	.word	0x080060a1
 800608c:	0800609b 	.word	0x0800609b
 8006090:	080060a7 	.word	0x080060a7
 8006094:	2301      	movs	r3, #1
 8006096:	76fb      	strb	r3, [r7, #27]
 8006098:	e0e7      	b.n	800626a <UART_SetConfig+0x282>
 800609a:	2302      	movs	r3, #2
 800609c:	76fb      	strb	r3, [r7, #27]
 800609e:	e0e4      	b.n	800626a <UART_SetConfig+0x282>
 80060a0:	2304      	movs	r3, #4
 80060a2:	76fb      	strb	r3, [r7, #27]
 80060a4:	e0e1      	b.n	800626a <UART_SetConfig+0x282>
 80060a6:	2308      	movs	r3, #8
 80060a8:	76fb      	strb	r3, [r7, #27]
 80060aa:	e0de      	b.n	800626a <UART_SetConfig+0x282>
 80060ac:	2310      	movs	r3, #16
 80060ae:	76fb      	strb	r3, [r7, #27]
 80060b0:	e0db      	b.n	800626a <UART_SetConfig+0x282>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a88      	ldr	r2, [pc, #544]	; (80062d8 <UART_SetConfig+0x2f0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d132      	bne.n	8006122 <UART_SetConfig+0x13a>
 80060bc:	4b85      	ldr	r3, [pc, #532]	; (80062d4 <UART_SetConfig+0x2ec>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b0c      	cmp	r3, #12
 80060c8:	d828      	bhi.n	800611c <UART_SetConfig+0x134>
 80060ca:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0xe8>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	08006105 	.word	0x08006105
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	0800611d 	.word	0x0800611d
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	08006111 	.word	0x08006111
 80060e4:	0800611d 	.word	0x0800611d
 80060e8:	0800611d 	.word	0x0800611d
 80060ec:	0800611d 	.word	0x0800611d
 80060f0:	0800610b 	.word	0x0800610b
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	0800611d 	.word	0x0800611d
 8006100:	08006117 	.word	0x08006117
 8006104:	2300      	movs	r3, #0
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e0af      	b.n	800626a <UART_SetConfig+0x282>
 800610a:	2302      	movs	r3, #2
 800610c:	76fb      	strb	r3, [r7, #27]
 800610e:	e0ac      	b.n	800626a <UART_SetConfig+0x282>
 8006110:	2304      	movs	r3, #4
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e0a9      	b.n	800626a <UART_SetConfig+0x282>
 8006116:	2308      	movs	r3, #8
 8006118:	76fb      	strb	r3, [r7, #27]
 800611a:	e0a6      	b.n	800626a <UART_SetConfig+0x282>
 800611c:	2310      	movs	r3, #16
 800611e:	76fb      	strb	r3, [r7, #27]
 8006120:	e0a3      	b.n	800626a <UART_SetConfig+0x282>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a6d      	ldr	r2, [pc, #436]	; (80062dc <UART_SetConfig+0x2f4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d120      	bne.n	800616e <UART_SetConfig+0x186>
 800612c:	4b69      	ldr	r3, [pc, #420]	; (80062d4 <UART_SetConfig+0x2ec>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006136:	2b30      	cmp	r3, #48	; 0x30
 8006138:	d013      	beq.n	8006162 <UART_SetConfig+0x17a>
 800613a:	2b30      	cmp	r3, #48	; 0x30
 800613c:	d814      	bhi.n	8006168 <UART_SetConfig+0x180>
 800613e:	2b20      	cmp	r3, #32
 8006140:	d009      	beq.n	8006156 <UART_SetConfig+0x16e>
 8006142:	2b20      	cmp	r3, #32
 8006144:	d810      	bhi.n	8006168 <UART_SetConfig+0x180>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <UART_SetConfig+0x168>
 800614a:	2b10      	cmp	r3, #16
 800614c:	d006      	beq.n	800615c <UART_SetConfig+0x174>
 800614e:	e00b      	b.n	8006168 <UART_SetConfig+0x180>
 8006150:	2300      	movs	r3, #0
 8006152:	76fb      	strb	r3, [r7, #27]
 8006154:	e089      	b.n	800626a <UART_SetConfig+0x282>
 8006156:	2302      	movs	r3, #2
 8006158:	76fb      	strb	r3, [r7, #27]
 800615a:	e086      	b.n	800626a <UART_SetConfig+0x282>
 800615c:	2304      	movs	r3, #4
 800615e:	76fb      	strb	r3, [r7, #27]
 8006160:	e083      	b.n	800626a <UART_SetConfig+0x282>
 8006162:	2308      	movs	r3, #8
 8006164:	76fb      	strb	r3, [r7, #27]
 8006166:	e080      	b.n	800626a <UART_SetConfig+0x282>
 8006168:	2310      	movs	r3, #16
 800616a:	76fb      	strb	r3, [r7, #27]
 800616c:	e07d      	b.n	800626a <UART_SetConfig+0x282>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5b      	ldr	r2, [pc, #364]	; (80062e0 <UART_SetConfig+0x2f8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d120      	bne.n	80061ba <UART_SetConfig+0x1d2>
 8006178:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <UART_SetConfig+0x2ec>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006182:	2bc0      	cmp	r3, #192	; 0xc0
 8006184:	d013      	beq.n	80061ae <UART_SetConfig+0x1c6>
 8006186:	2bc0      	cmp	r3, #192	; 0xc0
 8006188:	d814      	bhi.n	80061b4 <UART_SetConfig+0x1cc>
 800618a:	2b80      	cmp	r3, #128	; 0x80
 800618c:	d009      	beq.n	80061a2 <UART_SetConfig+0x1ba>
 800618e:	2b80      	cmp	r3, #128	; 0x80
 8006190:	d810      	bhi.n	80061b4 <UART_SetConfig+0x1cc>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <UART_SetConfig+0x1b4>
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d006      	beq.n	80061a8 <UART_SetConfig+0x1c0>
 800619a:	e00b      	b.n	80061b4 <UART_SetConfig+0x1cc>
 800619c:	2300      	movs	r3, #0
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e063      	b.n	800626a <UART_SetConfig+0x282>
 80061a2:	2302      	movs	r3, #2
 80061a4:	76fb      	strb	r3, [r7, #27]
 80061a6:	e060      	b.n	800626a <UART_SetConfig+0x282>
 80061a8:	2304      	movs	r3, #4
 80061aa:	76fb      	strb	r3, [r7, #27]
 80061ac:	e05d      	b.n	800626a <UART_SetConfig+0x282>
 80061ae:	2308      	movs	r3, #8
 80061b0:	76fb      	strb	r3, [r7, #27]
 80061b2:	e05a      	b.n	800626a <UART_SetConfig+0x282>
 80061b4:	2310      	movs	r3, #16
 80061b6:	76fb      	strb	r3, [r7, #27]
 80061b8:	e057      	b.n	800626a <UART_SetConfig+0x282>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a49      	ldr	r2, [pc, #292]	; (80062e4 <UART_SetConfig+0x2fc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d125      	bne.n	8006210 <UART_SetConfig+0x228>
 80061c4:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <UART_SetConfig+0x2ec>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d2:	d017      	beq.n	8006204 <UART_SetConfig+0x21c>
 80061d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d8:	d817      	bhi.n	800620a <UART_SetConfig+0x222>
 80061da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061de:	d00b      	beq.n	80061f8 <UART_SetConfig+0x210>
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e4:	d811      	bhi.n	800620a <UART_SetConfig+0x222>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <UART_SetConfig+0x20a>
 80061ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ee:	d006      	beq.n	80061fe <UART_SetConfig+0x216>
 80061f0:	e00b      	b.n	800620a <UART_SetConfig+0x222>
 80061f2:	2300      	movs	r3, #0
 80061f4:	76fb      	strb	r3, [r7, #27]
 80061f6:	e038      	b.n	800626a <UART_SetConfig+0x282>
 80061f8:	2302      	movs	r3, #2
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e035      	b.n	800626a <UART_SetConfig+0x282>
 80061fe:	2304      	movs	r3, #4
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e032      	b.n	800626a <UART_SetConfig+0x282>
 8006204:	2308      	movs	r3, #8
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e02f      	b.n	800626a <UART_SetConfig+0x282>
 800620a:	2310      	movs	r3, #16
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e02c      	b.n	800626a <UART_SetConfig+0x282>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2d      	ldr	r2, [pc, #180]	; (80062cc <UART_SetConfig+0x2e4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d125      	bne.n	8006266 <UART_SetConfig+0x27e>
 800621a:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <UART_SetConfig+0x2ec>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006224:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006228:	d017      	beq.n	800625a <UART_SetConfig+0x272>
 800622a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800622e:	d817      	bhi.n	8006260 <UART_SetConfig+0x278>
 8006230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006234:	d00b      	beq.n	800624e <UART_SetConfig+0x266>
 8006236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623a:	d811      	bhi.n	8006260 <UART_SetConfig+0x278>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <UART_SetConfig+0x260>
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d006      	beq.n	8006254 <UART_SetConfig+0x26c>
 8006246:	e00b      	b.n	8006260 <UART_SetConfig+0x278>
 8006248:	2300      	movs	r3, #0
 800624a:	76fb      	strb	r3, [r7, #27]
 800624c:	e00d      	b.n	800626a <UART_SetConfig+0x282>
 800624e:	2302      	movs	r3, #2
 8006250:	76fb      	strb	r3, [r7, #27]
 8006252:	e00a      	b.n	800626a <UART_SetConfig+0x282>
 8006254:	2304      	movs	r3, #4
 8006256:	76fb      	strb	r3, [r7, #27]
 8006258:	e007      	b.n	800626a <UART_SetConfig+0x282>
 800625a:	2308      	movs	r3, #8
 800625c:	76fb      	strb	r3, [r7, #27]
 800625e:	e004      	b.n	800626a <UART_SetConfig+0x282>
 8006260:	2310      	movs	r3, #16
 8006262:	76fb      	strb	r3, [r7, #27]
 8006264:	e001      	b.n	800626a <UART_SetConfig+0x282>
 8006266:	2310      	movs	r3, #16
 8006268:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <UART_SetConfig+0x2e4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	f040 8087 	bne.w	8006384 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006276:	7efb      	ldrb	r3, [r7, #27]
 8006278:	2b08      	cmp	r3, #8
 800627a:	d837      	bhi.n	80062ec <UART_SetConfig+0x304>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x29c>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062ed 	.word	0x080062ed
 8006294:	080062b7 	.word	0x080062b7
 8006298:	080062ed 	.word	0x080062ed
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fd f976 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 80062ac:	6178      	str	r0, [r7, #20]
        break;
 80062ae:	e022      	b.n	80062f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <UART_SetConfig+0x300>)
 80062b2:	617b      	str	r3, [r7, #20]
        break;
 80062b4:	e01f      	b.n	80062f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fd f8d7 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 80062ba:	6178      	str	r0, [r7, #20]
        break;
 80062bc:	e01b      	b.n	80062f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	617b      	str	r3, [r7, #20]
        break;
 80062c4:	e017      	b.n	80062f6 <UART_SetConfig+0x30e>
 80062c6:	bf00      	nop
 80062c8:	efff69f3 	.word	0xefff69f3
 80062cc:	40008000 	.word	0x40008000
 80062d0:	40013800 	.word	0x40013800
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40004400 	.word	0x40004400
 80062dc:	40004800 	.word	0x40004800
 80062e0:	40004c00 	.word	0x40004c00
 80062e4:	40005000 	.word	0x40005000
 80062e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	76bb      	strb	r3, [r7, #26]
        break;
 80062f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80f1 	beq.w	80064e0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	429a      	cmp	r2, r3
 800630c:	d305      	bcc.n	800631a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	429a      	cmp	r2, r3
 8006318:	d902      	bls.n	8006320 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	76bb      	strb	r3, [r7, #26]
 800631e:	e0df      	b.n	80064e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4618      	mov	r0, r3
 8006324:	f04f 0100 	mov.w	r1, #0
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	020b      	lsls	r3, r1, #8
 8006332:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006336:	0202      	lsls	r2, r0, #8
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	6849      	ldr	r1, [r1, #4]
 800633c:	0849      	lsrs	r1, r1, #1
 800633e:	4608      	mov	r0, r1
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	1814      	adds	r4, r2, r0
 8006346:	eb43 0501 	adc.w	r5, r3, r1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	461a      	mov	r2, r3
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	f7fa faec 	bl	8000934 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4613      	mov	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636a:	d308      	bcc.n	800637e <UART_SetConfig+0x396>
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006372:	d204      	bcs.n	800637e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e0b0      	b.n	80064e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	76bb      	strb	r3, [r7, #26]
 8006382:	e0ad      	b.n	80064e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638c:	d15c      	bne.n	8006448 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800638e:	7efb      	ldrb	r3, [r7, #27]
 8006390:	2b08      	cmp	r3, #8
 8006392:	d828      	bhi.n	80063e6 <UART_SetConfig+0x3fe>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x3b4>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063e7 	.word	0x080063e7
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	080063e7 	.word	0x080063e7
 80063b4:	080063e7 	.word	0x080063e7
 80063b8:	080063e7 	.word	0x080063e7
 80063bc:	080063df 	.word	0x080063df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fd f8ea 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 80063c4:	6178      	str	r0, [r7, #20]
        break;
 80063c6:	e013      	b.n	80063f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fd f8fc 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80063cc:	6178      	str	r0, [r7, #20]
        break;
 80063ce:	e00f      	b.n	80063f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d0:	4b49      	ldr	r3, [pc, #292]	; (80064f8 <UART_SetConfig+0x510>)
 80063d2:	617b      	str	r3, [r7, #20]
        break;
 80063d4:	e00c      	b.n	80063f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fd f847 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 80063da:	6178      	str	r0, [r7, #20]
        break;
 80063dc:	e008      	b.n	80063f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e2:	617b      	str	r3, [r7, #20]
        break;
 80063e4:	e004      	b.n	80063f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	76bb      	strb	r3, [r7, #26]
        break;
 80063ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d074      	beq.n	80064e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	005a      	lsls	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	fbb2 f3f3 	udiv	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b0f      	cmp	r3, #15
 8006412:	d916      	bls.n	8006442 <UART_SetConfig+0x45a>
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641a:	d212      	bcs.n	8006442 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f023 030f 	bic.w	r3, r3, #15
 8006424:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	b29b      	uxth	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	b29a      	uxth	r2, r3
 8006432:	89fb      	ldrh	r3, [r7, #14]
 8006434:	4313      	orrs	r3, r2
 8006436:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	89fa      	ldrh	r2, [r7, #14]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e04e      	b.n	80064e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	76bb      	strb	r3, [r7, #26]
 8006446:	e04b      	b.n	80064e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006448:	7efb      	ldrb	r3, [r7, #27]
 800644a:	2b08      	cmp	r3, #8
 800644c:	d827      	bhi.n	800649e <UART_SetConfig+0x4b6>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0x46c>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006479 	.word	0x08006479
 8006458:	08006481 	.word	0x08006481
 800645c:	08006489 	.word	0x08006489
 8006460:	0800649f 	.word	0x0800649f
 8006464:	0800648f 	.word	0x0800648f
 8006468:	0800649f 	.word	0x0800649f
 800646c:	0800649f 	.word	0x0800649f
 8006470:	0800649f 	.word	0x0800649f
 8006474:	08006497 	.word	0x08006497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006478:	f7fd f88e 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 800647c:	6178      	str	r0, [r7, #20]
        break;
 800647e:	e013      	b.n	80064a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006480:	f7fd f8a0 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8006484:	6178      	str	r0, [r7, #20]
        break;
 8006486:	e00f      	b.n	80064a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <UART_SetConfig+0x510>)
 800648a:	617b      	str	r3, [r7, #20]
        break;
 800648c:	e00c      	b.n	80064a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648e:	f7fc ffeb 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8006492:	6178      	str	r0, [r7, #20]
        break;
 8006494:	e008      	b.n	80064a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649a:	617b      	str	r3, [r7, #20]
        break;
 800649c:	e004      	b.n	80064a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	76bb      	strb	r3, [r7, #26]
        break;
 80064a6:	bf00      	nop
    }

    if (pclk != 0U)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	085a      	lsrs	r2, r3, #1
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	441a      	add	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	d908      	bls.n	80064dc <UART_SetConfig+0x4f4>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d0:	d204      	bcs.n	80064dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	e001      	b.n	80064e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bdb0      	pop	{r4, r5, r7, pc}
 80064f6:	bf00      	nop
 80064f8:	00f42400 	.word	0x00f42400

080064fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01a      	beq.n	8006612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fa:	d10a      	bne.n	8006612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af02      	add	r7, sp, #8
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006650:	f7fb fc6c 	bl	8001f2c <HAL_GetTick>
 8006654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b08      	cmp	r3, #8
 8006662:	d10e      	bne.n	8006682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f82d 	bl	80066d2 <UART_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e023      	b.n	80066ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b04      	cmp	r3, #4
 800668e:	d10e      	bne.n	80066ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f817 	bl	80066d2 <UART_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e00d      	b.n	80066ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e2:	e05e      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d05a      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ec:	f7fb fc1e 	bl	8001f2c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d302      	bcc.n	8006702 <UART_WaitOnFlagUntilTimeout+0x30>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11b      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006710:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e043      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02c      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006756:	d124      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006760:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006770:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e00f      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d091      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	88fa      	ldrh	r2, [r7, #6]
 80067e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2222      	movs	r2, #34	; 0x22
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02b      	beq.n	8006856 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	4a25      	ldr	r2, [pc, #148]	; (8006898 <UART_Start_Receive_DMA+0xcc>)
 8006804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <UART_Start_Receive_DMA+0xd0>)
 800680c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	4a23      	ldr	r2, [pc, #140]	; (80068a0 <UART_Start_Receive_DMA+0xd4>)
 8006814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	2200      	movs	r2, #0
 800681c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3324      	adds	r3, #36	; 0x24
 8006828:	4619      	mov	r1, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	461a      	mov	r2, r3
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	f7fb fd75 	bl	8002320 <HAL_DMA_Start_IT>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2210      	movs	r2, #16
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e01c      	b.n	8006890 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800686c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0201 	orr.w	r2, r2, #1
 800687c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	0800692d 	.word	0x0800692d
 800689c:	080069c5 	.word	0x080069c5
 80068a0:	080069fd 	.word	0x080069fd

080068a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068ba:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068e4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d107      	bne.n	800690e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0210 	bic.w	r2, r2, #16
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d12a      	bne.n	800699e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800695e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698a:	2b01      	cmp	r3, #1
 800698c:	d107      	bne.n	800699e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0210 	bic.w	r2, r2, #16
 800699c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d107      	bne.n	80069b6 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069ac:	4619      	mov	r1, r3
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fb0e 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069b4:	e002      	b.n	80069bc <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff faec 	bl	8005f94 <HAL_UART_RxCpltCallback>
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d109      	bne.n	80069ee <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff faf2 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069ec:	e002      	b.n	80069f4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fada 	bl	8005fa8 <HAL_UART_RxHalfCpltCallback>
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d109      	bne.n	8006a38 <UART_DMAError+0x3c>
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b21      	cmp	r3, #33	; 0x21
 8006a28:	d106      	bne.n	8006a38 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f7ff ff36 	bl	80068a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d109      	bne.n	8006a5a <UART_DMAError+0x5e>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b22      	cmp	r3, #34	; 0x22
 8006a4a:	d106      	bne.n	8006a5a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006a54:	6978      	ldr	r0, [r7, #20]
 8006a56:	f7ff ff3a 	bl	80068ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a60:	f043 0210 	orr.w	r2, r3, #16
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a6a:	6978      	ldr	r0, [r7, #20]
 8006a6c:	f7ff faa6 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a70:	bf00      	nop
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff fa90 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fa59 	bl	8005f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <__libc_init_array>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4d0d      	ldr	r5, [pc, #52]	; (8006b24 <__libc_init_array+0x38>)
 8006af0:	4c0d      	ldr	r4, [pc, #52]	; (8006b28 <__libc_init_array+0x3c>)
 8006af2:	1b64      	subs	r4, r4, r5
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	2600      	movs	r6, #0
 8006af8:	42a6      	cmp	r6, r4
 8006afa:	d109      	bne.n	8006b10 <__libc_init_array+0x24>
 8006afc:	4d0b      	ldr	r5, [pc, #44]	; (8006b2c <__libc_init_array+0x40>)
 8006afe:	4c0c      	ldr	r4, [pc, #48]	; (8006b30 <__libc_init_array+0x44>)
 8006b00:	f001 f8b4 	bl	8007c6c <_init>
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	2600      	movs	r6, #0
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d105      	bne.n	8006b1a <__libc_init_array+0x2e>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b14:	4798      	blx	r3
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7ee      	b.n	8006af8 <__libc_init_array+0xc>
 8006b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1e:	4798      	blx	r3
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7f2      	b.n	8006b0a <__libc_init_array+0x1e>
 8006b24:	08007eb0 	.word	0x08007eb0
 8006b28:	08007eb0 	.word	0x08007eb0
 8006b2c:	08007eb0 	.word	0x08007eb0
 8006b30:	08007eb4 	.word	0x08007eb4

08006b34 <memcpy>:
 8006b34:	440a      	add	r2, r1
 8006b36:	4291      	cmp	r1, r2
 8006b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b3c:	d100      	bne.n	8006b40 <memcpy+0xc>
 8006b3e:	4770      	bx	lr
 8006b40:	b510      	push	{r4, lr}
 8006b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b4a:	4291      	cmp	r1, r2
 8006b4c:	d1f9      	bne.n	8006b42 <memcpy+0xe>
 8006b4e:	bd10      	pop	{r4, pc}

08006b50 <memset>:
 8006b50:	4402      	add	r2, r0
 8006b52:	4603      	mov	r3, r0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d100      	bne.n	8006b5a <memset+0xa>
 8006b58:	4770      	bx	lr
 8006b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5e:	e7f9      	b.n	8006b54 <memset+0x4>

08006b60 <cos>:
 8006b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b62:	ec53 2b10 	vmov	r2, r3, d0
 8006b66:	4824      	ldr	r0, [pc, #144]	; (8006bf8 <cos+0x98>)
 8006b68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b6c:	4281      	cmp	r1, r0
 8006b6e:	dc06      	bgt.n	8006b7e <cos+0x1e>
 8006b70:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006bf0 <cos+0x90>
 8006b74:	f000 faa4 	bl	80070c0 <__kernel_cos>
 8006b78:	ec51 0b10 	vmov	r0, r1, d0
 8006b7c:	e007      	b.n	8006b8e <cos+0x2e>
 8006b7e:	481f      	ldr	r0, [pc, #124]	; (8006bfc <cos+0x9c>)
 8006b80:	4281      	cmp	r1, r0
 8006b82:	dd09      	ble.n	8006b98 <cos+0x38>
 8006b84:	ee10 0a10 	vmov	r0, s0
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f7f9 fc4b 	bl	8000424 <__aeabi_dsub>
 8006b8e:	ec41 0b10 	vmov	d0, r0, r1
 8006b92:	b005      	add	sp, #20
 8006b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b98:	4668      	mov	r0, sp
 8006b9a:	f000 f885 	bl	8006ca8 <__ieee754_rem_pio2>
 8006b9e:	f000 0003 	and.w	r0, r0, #3
 8006ba2:	2801      	cmp	r0, #1
 8006ba4:	d007      	beq.n	8006bb6 <cos+0x56>
 8006ba6:	2802      	cmp	r0, #2
 8006ba8:	d012      	beq.n	8006bd0 <cos+0x70>
 8006baa:	b9c0      	cbnz	r0, 8006bde <cos+0x7e>
 8006bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bb0:	ed9d 0b00 	vldr	d0, [sp]
 8006bb4:	e7de      	b.n	8006b74 <cos+0x14>
 8006bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bba:	ed9d 0b00 	vldr	d0, [sp]
 8006bbe:	f000 fe87 	bl	80078d0 <__kernel_sin>
 8006bc2:	ec53 2b10 	vmov	r2, r3, d0
 8006bc6:	ee10 0a10 	vmov	r0, s0
 8006bca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006bce:	e7de      	b.n	8006b8e <cos+0x2e>
 8006bd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bd4:	ed9d 0b00 	vldr	d0, [sp]
 8006bd8:	f000 fa72 	bl	80070c0 <__kernel_cos>
 8006bdc:	e7f1      	b.n	8006bc2 <cos+0x62>
 8006bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006be2:	ed9d 0b00 	vldr	d0, [sp]
 8006be6:	2001      	movs	r0, #1
 8006be8:	f000 fe72 	bl	80078d0 <__kernel_sin>
 8006bec:	e7c4      	b.n	8006b78 <cos+0x18>
 8006bee:	bf00      	nop
	...
 8006bf8:	3fe921fb 	.word	0x3fe921fb
 8006bfc:	7fefffff 	.word	0x7fefffff

08006c00 <sin>:
 8006c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c02:	ec53 2b10 	vmov	r2, r3, d0
 8006c06:	4826      	ldr	r0, [pc, #152]	; (8006ca0 <sin+0xa0>)
 8006c08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c0c:	4281      	cmp	r1, r0
 8006c0e:	dc07      	bgt.n	8006c20 <sin+0x20>
 8006c10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006c98 <sin+0x98>
 8006c14:	2000      	movs	r0, #0
 8006c16:	f000 fe5b 	bl	80078d0 <__kernel_sin>
 8006c1a:	ec51 0b10 	vmov	r0, r1, d0
 8006c1e:	e007      	b.n	8006c30 <sin+0x30>
 8006c20:	4820      	ldr	r0, [pc, #128]	; (8006ca4 <sin+0xa4>)
 8006c22:	4281      	cmp	r1, r0
 8006c24:	dd09      	ble.n	8006c3a <sin+0x3a>
 8006c26:	ee10 0a10 	vmov	r0, s0
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f7f9 fbfa 	bl	8000424 <__aeabi_dsub>
 8006c30:	ec41 0b10 	vmov	d0, r0, r1
 8006c34:	b005      	add	sp, #20
 8006c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c3a:	4668      	mov	r0, sp
 8006c3c:	f000 f834 	bl	8006ca8 <__ieee754_rem_pio2>
 8006c40:	f000 0003 	and.w	r0, r0, #3
 8006c44:	2801      	cmp	r0, #1
 8006c46:	d008      	beq.n	8006c5a <sin+0x5a>
 8006c48:	2802      	cmp	r0, #2
 8006c4a:	d00d      	beq.n	8006c68 <sin+0x68>
 8006c4c:	b9d0      	cbnz	r0, 8006c84 <sin+0x84>
 8006c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c52:	ed9d 0b00 	vldr	d0, [sp]
 8006c56:	2001      	movs	r0, #1
 8006c58:	e7dd      	b.n	8006c16 <sin+0x16>
 8006c5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c5e:	ed9d 0b00 	vldr	d0, [sp]
 8006c62:	f000 fa2d 	bl	80070c0 <__kernel_cos>
 8006c66:	e7d8      	b.n	8006c1a <sin+0x1a>
 8006c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c6c:	ed9d 0b00 	vldr	d0, [sp]
 8006c70:	2001      	movs	r0, #1
 8006c72:	f000 fe2d 	bl	80078d0 <__kernel_sin>
 8006c76:	ec53 2b10 	vmov	r2, r3, d0
 8006c7a:	ee10 0a10 	vmov	r0, s0
 8006c7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c82:	e7d5      	b.n	8006c30 <sin+0x30>
 8006c84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c88:	ed9d 0b00 	vldr	d0, [sp]
 8006c8c:	f000 fa18 	bl	80070c0 <__kernel_cos>
 8006c90:	e7f1      	b.n	8006c76 <sin+0x76>
 8006c92:	bf00      	nop
 8006c94:	f3af 8000 	nop.w
	...
 8006ca0:	3fe921fb 	.word	0x3fe921fb
 8006ca4:	7fefffff 	.word	0x7fefffff

08006ca8 <__ieee754_rem_pio2>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	ed2d 8b02 	vpush	{d8}
 8006cb0:	ec55 4b10 	vmov	r4, r5, d0
 8006cb4:	4bca      	ldr	r3, [pc, #808]	; (8006fe0 <__ieee754_rem_pio2+0x338>)
 8006cb6:	b08b      	sub	sp, #44	; 0x2c
 8006cb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006cbc:	4598      	cmp	r8, r3
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	9502      	str	r5, [sp, #8]
 8006cc2:	dc08      	bgt.n	8006cd6 <__ieee754_rem_pio2+0x2e>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	ed80 0b00 	vstr	d0, [r0]
 8006ccc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cd0:	f04f 0b00 	mov.w	fp, #0
 8006cd4:	e028      	b.n	8006d28 <__ieee754_rem_pio2+0x80>
 8006cd6:	4bc3      	ldr	r3, [pc, #780]	; (8006fe4 <__ieee754_rem_pio2+0x33c>)
 8006cd8:	4598      	cmp	r8, r3
 8006cda:	dc78      	bgt.n	8006dce <__ieee754_rem_pio2+0x126>
 8006cdc:	9b02      	ldr	r3, [sp, #8]
 8006cde:	4ec2      	ldr	r6, [pc, #776]	; (8006fe8 <__ieee754_rem_pio2+0x340>)
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	ee10 0a10 	vmov	r0, s0
 8006ce6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x300>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	4629      	mov	r1, r5
 8006cee:	dd39      	ble.n	8006d64 <__ieee754_rem_pio2+0xbc>
 8006cf0:	f7f9 fb98 	bl	8000424 <__aeabi_dsub>
 8006cf4:	45b0      	cmp	r8, r6
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	d01b      	beq.n	8006d34 <__ieee754_rem_pio2+0x8c>
 8006cfc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x308>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f7f9 fb8f 	bl	8000424 <__aeabi_dsub>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fb87 	bl	8000424 <__aeabi_dsub>
 8006d16:	a3a6      	add	r3, pc, #664	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x308>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 fb82 	bl	8000424 <__aeabi_dsub>
 8006d20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d24:	f04f 0b01 	mov.w	fp, #1
 8006d28:	4658      	mov	r0, fp
 8006d2a:	b00b      	add	sp, #44	; 0x2c
 8006d2c:	ecbd 8b02 	vpop	{d8}
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x310>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f7f9 fb73 	bl	8000424 <__aeabi_dsub>
 8006d3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x318>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	4604      	mov	r4, r0
 8006d46:	460d      	mov	r5, r1
 8006d48:	f7f9 fb6c 	bl	8000424 <__aeabi_dsub>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	e9ca 2300 	strd	r2, r3, [sl]
 8006d54:	4620      	mov	r0, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	f7f9 fb64 	bl	8000424 <__aeabi_dsub>
 8006d5c:	a398      	add	r3, pc, #608	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x318>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	e7db      	b.n	8006d1c <__ieee754_rem_pio2+0x74>
 8006d64:	f7f9 fb60 	bl	8000428 <__adddf3>
 8006d68:	45b0      	cmp	r8, r6
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	d016      	beq.n	8006d9e <__ieee754_rem_pio2+0xf6>
 8006d70:	a38f      	add	r3, pc, #572	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x308>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fb57 	bl	8000428 <__adddf3>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	e9ca 2300 	strd	r2, r3, [sl]
 8006d82:	4620      	mov	r0, r4
 8006d84:	4629      	mov	r1, r5
 8006d86:	f7f9 fb4d 	bl	8000424 <__aeabi_dsub>
 8006d8a:	a389      	add	r3, pc, #548	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x308>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fb4a 	bl	8000428 <__adddf3>
 8006d94:	f04f 3bff 	mov.w	fp, #4294967295
 8006d98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d9c:	e7c4      	b.n	8006d28 <__ieee754_rem_pio2+0x80>
 8006d9e:	a386      	add	r3, pc, #536	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x310>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f7f9 fb40 	bl	8000428 <__adddf3>
 8006da8:	a385      	add	r3, pc, #532	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x318>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	4604      	mov	r4, r0
 8006db0:	460d      	mov	r5, r1
 8006db2:	f7f9 fb39 	bl	8000428 <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	e9ca 2300 	strd	r2, r3, [sl]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fb2f 	bl	8000424 <__aeabi_dsub>
 8006dc6:	a37e      	add	r3, pc, #504	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x318>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	e7e0      	b.n	8006d90 <__ieee754_rem_pio2+0xe8>
 8006dce:	4b87      	ldr	r3, [pc, #540]	; (8006fec <__ieee754_rem_pio2+0x344>)
 8006dd0:	4598      	cmp	r8, r3
 8006dd2:	f300 80d9 	bgt.w	8006f88 <__ieee754_rem_pio2+0x2e0>
 8006dd6:	f000 fe39 	bl	8007a4c <fabs>
 8006dda:	ec55 4b10 	vmov	r4, r5, d0
 8006dde:	ee10 0a10 	vmov	r0, s0
 8006de2:	a379      	add	r3, pc, #484	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x320>)
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7f9 f9ed 	bl	80001c8 <__aeabi_dmul>
 8006dee:	4b80      	ldr	r3, [pc, #512]	; (8006ff0 <__ieee754_rem_pio2+0x348>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	f7f9 fb19 	bl	8000428 <__adddf3>
 8006df6:	f7f9 fd55 	bl	80008a4 <__aeabi_d2iz>
 8006dfa:	4683      	mov	fp, r0
 8006dfc:	f7f9 fc60 	bl	80006c0 <__aeabi_i2d>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	ec43 2b18 	vmov	d8, r2, r3
 8006e08:	a367      	add	r3, pc, #412	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x300>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 f9db 	bl	80001c8 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fb03 	bl	8000424 <__aeabi_dsub>
 8006e1e:	a364      	add	r3, pc, #400	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x308>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	4606      	mov	r6, r0
 8006e26:	460f      	mov	r7, r1
 8006e28:	ec51 0b18 	vmov	r0, r1, d8
 8006e2c:	f7f9 f9cc 	bl	80001c8 <__aeabi_dmul>
 8006e30:	f1bb 0f1f 	cmp.w	fp, #31
 8006e34:	4604      	mov	r4, r0
 8006e36:	460d      	mov	r5, r1
 8006e38:	dc0d      	bgt.n	8006e56 <__ieee754_rem_pio2+0x1ae>
 8006e3a:	4b6e      	ldr	r3, [pc, #440]	; (8006ff4 <__ieee754_rem_pio2+0x34c>)
 8006e3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	4543      	cmp	r3, r8
 8006e46:	d006      	beq.n	8006e56 <__ieee754_rem_pio2+0x1ae>
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	4639      	mov	r1, r7
 8006e50:	f7f9 fae8 	bl	8000424 <__aeabi_dsub>
 8006e54:	e00f      	b.n	8006e76 <__ieee754_rem_pio2+0x1ce>
 8006e56:	462b      	mov	r3, r5
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	f7f9 fae1 	bl	8000424 <__aeabi_dsub>
 8006e62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e66:	9303      	str	r3, [sp, #12]
 8006e68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006e70:	f1b8 0f10 	cmp.w	r8, #16
 8006e74:	dc02      	bgt.n	8006e7c <__ieee754_rem_pio2+0x1d4>
 8006e76:	e9ca 0100 	strd	r0, r1, [sl]
 8006e7a:	e039      	b.n	8006ef0 <__ieee754_rem_pio2+0x248>
 8006e7c:	a34e      	add	r3, pc, #312	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x310>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	ec51 0b18 	vmov	r0, r1, d8
 8006e86:	f7f9 f99f 	bl	80001c8 <__aeabi_dmul>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 fac5 	bl	8000424 <__aeabi_dsub>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fabd 	bl	8000424 <__aeabi_dsub>
 8006eaa:	4622      	mov	r2, r4
 8006eac:	462b      	mov	r3, r5
 8006eae:	f7f9 fab9 	bl	8000424 <__aeabi_dsub>
 8006eb2:	a343      	add	r3, pc, #268	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x318>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	ec51 0b18 	vmov	r0, r1, d8
 8006ec0:	f7f9 f982 	bl	80001c8 <__aeabi_dmul>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	f7f9 faac 	bl	8000424 <__aeabi_dsub>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f7f9 faa4 	bl	8000424 <__aeabi_dsub>
 8006edc:	9a03      	ldr	r2, [sp, #12]
 8006ede:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b31      	cmp	r3, #49	; 0x31
 8006ee6:	dc24      	bgt.n	8006f32 <__ieee754_rem_pio2+0x28a>
 8006ee8:	e9ca 0100 	strd	r0, r1, [sl]
 8006eec:	4646      	mov	r6, r8
 8006eee:	464f      	mov	r7, r9
 8006ef0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 fa92 	bl	8000424 <__aeabi_dsub>
 8006f00:	462b      	mov	r3, r5
 8006f02:	4622      	mov	r2, r4
 8006f04:	f7f9 fa8e 	bl	8000424 <__aeabi_dsub>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f10:	f6bf af0a 	bge.w	8006d28 <__ieee754_rem_pio2+0x80>
 8006f14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f18:	f8ca 3004 	str.w	r3, [sl, #4]
 8006f1c:	f8ca 8000 	str.w	r8, [sl]
 8006f20:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f28:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f2c:	f1cb 0b00 	rsb	fp, fp, #0
 8006f30:	e6fa      	b.n	8006d28 <__ieee754_rem_pio2+0x80>
 8006f32:	a327      	add	r3, pc, #156	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x328>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	ec51 0b18 	vmov	r0, r1, d8
 8006f3c:	f7f9 f944 	bl	80001c8 <__aeabi_dmul>
 8006f40:	4604      	mov	r4, r0
 8006f42:	460d      	mov	r5, r1
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 fa6a 	bl	8000424 <__aeabi_dsub>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4606      	mov	r6, r0
 8006f56:	460f      	mov	r7, r1
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7f9 fa62 	bl	8000424 <__aeabi_dsub>
 8006f60:	4622      	mov	r2, r4
 8006f62:	462b      	mov	r3, r5
 8006f64:	f7f9 fa5e 	bl	8000424 <__aeabi_dsub>
 8006f68:	a31b      	add	r3, pc, #108	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x330>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	4604      	mov	r4, r0
 8006f70:	460d      	mov	r5, r1
 8006f72:	ec51 0b18 	vmov	r0, r1, d8
 8006f76:	f7f9 f927 	bl	80001c8 <__aeabi_dmul>
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	f7f9 fa51 	bl	8000424 <__aeabi_dsub>
 8006f82:	4604      	mov	r4, r0
 8006f84:	460d      	mov	r5, r1
 8006f86:	e75f      	b.n	8006e48 <__ieee754_rem_pio2+0x1a0>
 8006f88:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <__ieee754_rem_pio2+0x350>)
 8006f8a:	4598      	cmp	r8, r3
 8006f8c:	dd36      	ble.n	8006ffc <__ieee754_rem_pio2+0x354>
 8006f8e:	ee10 2a10 	vmov	r2, s0
 8006f92:	462b      	mov	r3, r5
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fa44 	bl	8000424 <__aeabi_dsub>
 8006f9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fa0:	e9ca 0100 	strd	r0, r1, [sl]
 8006fa4:	e694      	b.n	8006cd0 <__ieee754_rem_pio2+0x28>
 8006fa6:	bf00      	nop
 8006fa8:	54400000 	.word	0x54400000
 8006fac:	3ff921fb 	.word	0x3ff921fb
 8006fb0:	1a626331 	.word	0x1a626331
 8006fb4:	3dd0b461 	.word	0x3dd0b461
 8006fb8:	1a600000 	.word	0x1a600000
 8006fbc:	3dd0b461 	.word	0x3dd0b461
 8006fc0:	2e037073 	.word	0x2e037073
 8006fc4:	3ba3198a 	.word	0x3ba3198a
 8006fc8:	6dc9c883 	.word	0x6dc9c883
 8006fcc:	3fe45f30 	.word	0x3fe45f30
 8006fd0:	2e000000 	.word	0x2e000000
 8006fd4:	3ba3198a 	.word	0x3ba3198a
 8006fd8:	252049c1 	.word	0x252049c1
 8006fdc:	397b839a 	.word	0x397b839a
 8006fe0:	3fe921fb 	.word	0x3fe921fb
 8006fe4:	4002d97b 	.word	0x4002d97b
 8006fe8:	3ff921fb 	.word	0x3ff921fb
 8006fec:	413921fb 	.word	0x413921fb
 8006ff0:	3fe00000 	.word	0x3fe00000
 8006ff4:	08007cd0 	.word	0x08007cd0
 8006ff8:	7fefffff 	.word	0x7fefffff
 8006ffc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007000:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007004:	ee10 0a10 	vmov	r0, s0
 8007008:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800700c:	ee10 6a10 	vmov	r6, s0
 8007010:	460f      	mov	r7, r1
 8007012:	f7f9 fc47 	bl	80008a4 <__aeabi_d2iz>
 8007016:	f7f9 fb53 	bl	80006c0 <__aeabi_i2d>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007026:	f7f9 f9fd 	bl	8000424 <__aeabi_dsub>
 800702a:	4b22      	ldr	r3, [pc, #136]	; (80070b4 <__ieee754_rem_pio2+0x40c>)
 800702c:	2200      	movs	r2, #0
 800702e:	f7f9 f8cb 	bl	80001c8 <__aeabi_dmul>
 8007032:	460f      	mov	r7, r1
 8007034:	4606      	mov	r6, r0
 8007036:	f7f9 fc35 	bl	80008a4 <__aeabi_d2iz>
 800703a:	f7f9 fb41 	bl	80006c0 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4630      	mov	r0, r6
 8007044:	4639      	mov	r1, r7
 8007046:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800704a:	f7f9 f9eb 	bl	8000424 <__aeabi_dsub>
 800704e:	4b19      	ldr	r3, [pc, #100]	; (80070b4 <__ieee754_rem_pio2+0x40c>)
 8007050:	2200      	movs	r2, #0
 8007052:	f7f9 f8b9 	bl	80001c8 <__aeabi_dmul>
 8007056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800705a:	ad04      	add	r5, sp, #16
 800705c:	f04f 0803 	mov.w	r8, #3
 8007060:	46a9      	mov	r9, r5
 8007062:	2600      	movs	r6, #0
 8007064:	2700      	movs	r7, #0
 8007066:	4632      	mov	r2, r6
 8007068:	463b      	mov	r3, r7
 800706a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800706e:	46c3      	mov	fp, r8
 8007070:	3d08      	subs	r5, #8
 8007072:	f108 38ff 	add.w	r8, r8, #4294967295
 8007076:	f7f9 fbe3 	bl	8000840 <__aeabi_dcmpeq>
 800707a:	2800      	cmp	r0, #0
 800707c:	d1f3      	bne.n	8007066 <__ieee754_rem_pio2+0x3be>
 800707e:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <__ieee754_rem_pio2+0x410>)
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	2302      	movs	r3, #2
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4622      	mov	r2, r4
 8007088:	465b      	mov	r3, fp
 800708a:	4651      	mov	r1, sl
 800708c:	4648      	mov	r0, r9
 800708e:	f000 f8df 	bl	8007250 <__kernel_rem_pio2>
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	4683      	mov	fp, r0
 8007098:	f6bf ae46 	bge.w	8006d28 <__ieee754_rem_pio2+0x80>
 800709c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80070a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f8ca 3004 	str.w	r3, [sl, #4]
 80070a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80070ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070b0:	e73a      	b.n	8006f28 <__ieee754_rem_pio2+0x280>
 80070b2:	bf00      	nop
 80070b4:	41700000 	.word	0x41700000
 80070b8:	08007d50 	.word	0x08007d50
 80070bc:	00000000 	.word	0x00000000

080070c0 <__kernel_cos>:
 80070c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	ec57 6b10 	vmov	r6, r7, d0
 80070c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80070cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80070d0:	ed8d 1b00 	vstr	d1, [sp]
 80070d4:	da07      	bge.n	80070e6 <__kernel_cos+0x26>
 80070d6:	ee10 0a10 	vmov	r0, s0
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fbe2 	bl	80008a4 <__aeabi_d2iz>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f000 8088 	beq.w	80071f6 <__kernel_cos+0x136>
 80070e6:	4632      	mov	r2, r6
 80070e8:	463b      	mov	r3, r7
 80070ea:	4630      	mov	r0, r6
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 f86b 	bl	80001c8 <__aeabi_dmul>
 80070f2:	4b51      	ldr	r3, [pc, #324]	; (8007238 <__kernel_cos+0x178>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	460d      	mov	r5, r1
 80070fa:	f7f9 f865 	bl	80001c8 <__aeabi_dmul>
 80070fe:	a340      	add	r3, pc, #256	; (adr r3, 8007200 <__kernel_cos+0x140>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	4682      	mov	sl, r0
 8007106:	468b      	mov	fp, r1
 8007108:	4620      	mov	r0, r4
 800710a:	4629      	mov	r1, r5
 800710c:	f7f9 f85c 	bl	80001c8 <__aeabi_dmul>
 8007110:	a33d      	add	r3, pc, #244	; (adr r3, 8007208 <__kernel_cos+0x148>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 f987 	bl	8000428 <__adddf3>
 800711a:	4622      	mov	r2, r4
 800711c:	462b      	mov	r3, r5
 800711e:	f7f9 f853 	bl	80001c8 <__aeabi_dmul>
 8007122:	a33b      	add	r3, pc, #236	; (adr r3, 8007210 <__kernel_cos+0x150>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 f97c 	bl	8000424 <__aeabi_dsub>
 800712c:	4622      	mov	r2, r4
 800712e:	462b      	mov	r3, r5
 8007130:	f7f9 f84a 	bl	80001c8 <__aeabi_dmul>
 8007134:	a338      	add	r3, pc, #224	; (adr r3, 8007218 <__kernel_cos+0x158>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f975 	bl	8000428 <__adddf3>
 800713e:	4622      	mov	r2, r4
 8007140:	462b      	mov	r3, r5
 8007142:	f7f9 f841 	bl	80001c8 <__aeabi_dmul>
 8007146:	a336      	add	r3, pc, #216	; (adr r3, 8007220 <__kernel_cos+0x160>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 f96a 	bl	8000424 <__aeabi_dsub>
 8007150:	4622      	mov	r2, r4
 8007152:	462b      	mov	r3, r5
 8007154:	f7f9 f838 	bl	80001c8 <__aeabi_dmul>
 8007158:	a333      	add	r3, pc, #204	; (adr r3, 8007228 <__kernel_cos+0x168>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 f963 	bl	8000428 <__adddf3>
 8007162:	4622      	mov	r2, r4
 8007164:	462b      	mov	r3, r5
 8007166:	f7f9 f82f 	bl	80001c8 <__aeabi_dmul>
 800716a:	4622      	mov	r2, r4
 800716c:	462b      	mov	r3, r5
 800716e:	f7f9 f82b 	bl	80001c8 <__aeabi_dmul>
 8007172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	4630      	mov	r0, r6
 800717c:	4639      	mov	r1, r7
 800717e:	f7f9 f823 	bl	80001c8 <__aeabi_dmul>
 8007182:	460b      	mov	r3, r1
 8007184:	4602      	mov	r2, r0
 8007186:	4629      	mov	r1, r5
 8007188:	4620      	mov	r0, r4
 800718a:	f7f9 f94b 	bl	8000424 <__aeabi_dsub>
 800718e:	4b2b      	ldr	r3, [pc, #172]	; (800723c <__kernel_cos+0x17c>)
 8007190:	4598      	cmp	r8, r3
 8007192:	4606      	mov	r6, r0
 8007194:	460f      	mov	r7, r1
 8007196:	dc10      	bgt.n	80071ba <__kernel_cos+0xfa>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4650      	mov	r0, sl
 800719e:	4659      	mov	r1, fp
 80071a0:	f7f9 f940 	bl	8000424 <__aeabi_dsub>
 80071a4:	460b      	mov	r3, r1
 80071a6:	4926      	ldr	r1, [pc, #152]	; (8007240 <__kernel_cos+0x180>)
 80071a8:	4602      	mov	r2, r0
 80071aa:	2000      	movs	r0, #0
 80071ac:	f7f9 f93a 	bl	8000424 <__aeabi_dsub>
 80071b0:	ec41 0b10 	vmov	d0, r0, r1
 80071b4:	b003      	add	sp, #12
 80071b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ba:	4b22      	ldr	r3, [pc, #136]	; (8007244 <__kernel_cos+0x184>)
 80071bc:	4920      	ldr	r1, [pc, #128]	; (8007240 <__kernel_cos+0x180>)
 80071be:	4598      	cmp	r8, r3
 80071c0:	bfcc      	ite	gt
 80071c2:	4d21      	ldrgt	r5, [pc, #132]	; (8007248 <__kernel_cos+0x188>)
 80071c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80071c8:	2400      	movs	r4, #0
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	2000      	movs	r0, #0
 80071d0:	f7f9 f928 	bl	8000424 <__aeabi_dsub>
 80071d4:	4622      	mov	r2, r4
 80071d6:	4680      	mov	r8, r0
 80071d8:	4689      	mov	r9, r1
 80071da:	462b      	mov	r3, r5
 80071dc:	4650      	mov	r0, sl
 80071de:	4659      	mov	r1, fp
 80071e0:	f7f9 f920 	bl	8000424 <__aeabi_dsub>
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	f7f9 f91c 	bl	8000424 <__aeabi_dsub>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4640      	mov	r0, r8
 80071f2:	4649      	mov	r1, r9
 80071f4:	e7da      	b.n	80071ac <__kernel_cos+0xec>
 80071f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007230 <__kernel_cos+0x170>
 80071fa:	e7db      	b.n	80071b4 <__kernel_cos+0xf4>
 80071fc:	f3af 8000 	nop.w
 8007200:	be8838d4 	.word	0xbe8838d4
 8007204:	bda8fae9 	.word	0xbda8fae9
 8007208:	bdb4b1c4 	.word	0xbdb4b1c4
 800720c:	3e21ee9e 	.word	0x3e21ee9e
 8007210:	809c52ad 	.word	0x809c52ad
 8007214:	3e927e4f 	.word	0x3e927e4f
 8007218:	19cb1590 	.word	0x19cb1590
 800721c:	3efa01a0 	.word	0x3efa01a0
 8007220:	16c15177 	.word	0x16c15177
 8007224:	3f56c16c 	.word	0x3f56c16c
 8007228:	5555554c 	.word	0x5555554c
 800722c:	3fa55555 	.word	0x3fa55555
 8007230:	00000000 	.word	0x00000000
 8007234:	3ff00000 	.word	0x3ff00000
 8007238:	3fe00000 	.word	0x3fe00000
 800723c:	3fd33332 	.word	0x3fd33332
 8007240:	3ff00000 	.word	0x3ff00000
 8007244:	3fe90000 	.word	0x3fe90000
 8007248:	3fd20000 	.word	0x3fd20000
 800724c:	00000000 	.word	0x00000000

08007250 <__kernel_rem_pio2>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	ed2d 8b02 	vpush	{d8}
 8007258:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800725c:	f112 0f14 	cmn.w	r2, #20
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	9101      	str	r1, [sp, #4]
 8007264:	4bc6      	ldr	r3, [pc, #792]	; (8007580 <__kernel_rem_pio2+0x330>)
 8007266:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007268:	9009      	str	r0, [sp, #36]	; 0x24
 800726a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	9b08      	ldr	r3, [sp, #32]
 8007272:	f103 33ff 	add.w	r3, r3, #4294967295
 8007276:	bfa8      	it	ge
 8007278:	1ed4      	subge	r4, r2, #3
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	bfb2      	itee	lt
 800727e:	2400      	movlt	r4, #0
 8007280:	2318      	movge	r3, #24
 8007282:	fb94 f4f3 	sdivge	r4, r4, r3
 8007286:	f06f 0317 	mvn.w	r3, #23
 800728a:	fb04 3303 	mla	r3, r4, r3, r3
 800728e:	eb03 0a02 	add.w	sl, r3, r2
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	9a06      	ldr	r2, [sp, #24]
 8007296:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007570 <__kernel_rem_pio2+0x320>
 800729a:	eb03 0802 	add.w	r8, r3, r2
 800729e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80072a0:	1aa7      	subs	r7, r4, r2
 80072a2:	ae20      	add	r6, sp, #128	; 0x80
 80072a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80072a8:	2500      	movs	r5, #0
 80072aa:	4545      	cmp	r5, r8
 80072ac:	dd18      	ble.n	80072e0 <__kernel_rem_pio2+0x90>
 80072ae:	9b08      	ldr	r3, [sp, #32]
 80072b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80072b4:	aa20      	add	r2, sp, #128	; 0x80
 80072b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007570 <__kernel_rem_pio2+0x320>
 80072ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80072be:	f1c3 0301 	rsb	r3, r3, #1
 80072c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	4443      	add	r3, r8
 80072ce:	429a      	cmp	r2, r3
 80072d0:	db2f      	blt.n	8007332 <__kernel_rem_pio2+0xe2>
 80072d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80072d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80072da:	462f      	mov	r7, r5
 80072dc:	2600      	movs	r6, #0
 80072de:	e01b      	b.n	8007318 <__kernel_rem_pio2+0xc8>
 80072e0:	42ef      	cmn	r7, r5
 80072e2:	d407      	bmi.n	80072f4 <__kernel_rem_pio2+0xa4>
 80072e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80072e8:	f7f9 f9ea 	bl	80006c0 <__aeabi_i2d>
 80072ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072f0:	3501      	adds	r5, #1
 80072f2:	e7da      	b.n	80072aa <__kernel_rem_pio2+0x5a>
 80072f4:	ec51 0b18 	vmov	r0, r1, d8
 80072f8:	e7f8      	b.n	80072ec <__kernel_rem_pio2+0x9c>
 80072fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007302:	f7f8 ff61 	bl	80001c8 <__aeabi_dmul>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730e:	f7f9 f88b 	bl	8000428 <__adddf3>
 8007312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007316:	3601      	adds	r6, #1
 8007318:	9b06      	ldr	r3, [sp, #24]
 800731a:	429e      	cmp	r6, r3
 800731c:	f1a7 0708 	sub.w	r7, r7, #8
 8007320:	ddeb      	ble.n	80072fa <__kernel_rem_pio2+0xaa>
 8007322:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007326:	3508      	adds	r5, #8
 8007328:	ecab 7b02 	vstmia	fp!, {d7}
 800732c:	f108 0801 	add.w	r8, r8, #1
 8007330:	e7ca      	b.n	80072c8 <__kernel_rem_pio2+0x78>
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	aa0c      	add	r2, sp, #48	; 0x30
 8007336:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800733a:	930b      	str	r3, [sp, #44]	; 0x2c
 800733c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800733e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007342:	9c04      	ldr	r4, [sp, #16]
 8007344:	930a      	str	r3, [sp, #40]	; 0x28
 8007346:	ab98      	add	r3, sp, #608	; 0x260
 8007348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800734c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007350:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007354:	f8cd b008 	str.w	fp, [sp, #8]
 8007358:	4625      	mov	r5, r4
 800735a:	2d00      	cmp	r5, #0
 800735c:	dc78      	bgt.n	8007450 <__kernel_rem_pio2+0x200>
 800735e:	ec47 6b10 	vmov	d0, r6, r7
 8007362:	4650      	mov	r0, sl
 8007364:	f000 fbfc 	bl	8007b60 <scalbn>
 8007368:	ec57 6b10 	vmov	r6, r7, d0
 800736c:	2200      	movs	r2, #0
 800736e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007372:	ee10 0a10 	vmov	r0, s0
 8007376:	4639      	mov	r1, r7
 8007378:	f7f8 ff26 	bl	80001c8 <__aeabi_dmul>
 800737c:	ec41 0b10 	vmov	d0, r0, r1
 8007380:	f000 fb6e 	bl	8007a60 <floor>
 8007384:	4b7f      	ldr	r3, [pc, #508]	; (8007584 <__kernel_rem_pio2+0x334>)
 8007386:	ec51 0b10 	vmov	r0, r1, d0
 800738a:	2200      	movs	r2, #0
 800738c:	f7f8 ff1c 	bl	80001c8 <__aeabi_dmul>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	f7f9 f844 	bl	8000424 <__aeabi_dsub>
 800739c:	460f      	mov	r7, r1
 800739e:	4606      	mov	r6, r0
 80073a0:	f7f9 fa80 	bl	80008a4 <__aeabi_d2iz>
 80073a4:	9007      	str	r0, [sp, #28]
 80073a6:	f7f9 f98b 	bl	80006c0 <__aeabi_i2d>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4630      	mov	r0, r6
 80073b0:	4639      	mov	r1, r7
 80073b2:	f7f9 f837 	bl	8000424 <__aeabi_dsub>
 80073b6:	f1ba 0f00 	cmp.w	sl, #0
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	dd70      	ble.n	80074a2 <__kernel_rem_pio2+0x252>
 80073c0:	1e62      	subs	r2, r4, #1
 80073c2:	ab0c      	add	r3, sp, #48	; 0x30
 80073c4:	9d07      	ldr	r5, [sp, #28]
 80073c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073ca:	f1ca 0118 	rsb	r1, sl, #24
 80073ce:	fa40 f301 	asr.w	r3, r0, r1
 80073d2:	441d      	add	r5, r3
 80073d4:	408b      	lsls	r3, r1
 80073d6:	1ac0      	subs	r0, r0, r3
 80073d8:	ab0c      	add	r3, sp, #48	; 0x30
 80073da:	9507      	str	r5, [sp, #28]
 80073dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80073e0:	f1ca 0317 	rsb	r3, sl, #23
 80073e4:	fa40 f303 	asr.w	r3, r0, r3
 80073e8:	9302      	str	r3, [sp, #8]
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dd66      	ble.n	80074be <__kernel_rem_pio2+0x26e>
 80073f0:	9b07      	ldr	r3, [sp, #28]
 80073f2:	2200      	movs	r2, #0
 80073f4:	3301      	adds	r3, #1
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	4615      	mov	r5, r2
 80073fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80073fe:	4294      	cmp	r4, r2
 8007400:	f300 8099 	bgt.w	8007536 <__kernel_rem_pio2+0x2e6>
 8007404:	f1ba 0f00 	cmp.w	sl, #0
 8007408:	dd07      	ble.n	800741a <__kernel_rem_pio2+0x1ca>
 800740a:	f1ba 0f01 	cmp.w	sl, #1
 800740e:	f000 80a5 	beq.w	800755c <__kernel_rem_pio2+0x30c>
 8007412:	f1ba 0f02 	cmp.w	sl, #2
 8007416:	f000 80c1 	beq.w	800759c <__kernel_rem_pio2+0x34c>
 800741a:	9b02      	ldr	r3, [sp, #8]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d14e      	bne.n	80074be <__kernel_rem_pio2+0x26e>
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	4958      	ldr	r1, [pc, #352]	; (8007588 <__kernel_rem_pio2+0x338>)
 8007426:	2000      	movs	r0, #0
 8007428:	f7f8 fffc 	bl	8000424 <__aeabi_dsub>
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	2d00      	cmp	r5, #0
 8007432:	d044      	beq.n	80074be <__kernel_rem_pio2+0x26e>
 8007434:	4650      	mov	r0, sl
 8007436:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007578 <__kernel_rem_pio2+0x328>
 800743a:	f000 fb91 	bl	8007b60 <scalbn>
 800743e:	4630      	mov	r0, r6
 8007440:	4639      	mov	r1, r7
 8007442:	ec53 2b10 	vmov	r2, r3, d0
 8007446:	f7f8 ffed 	bl	8000424 <__aeabi_dsub>
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	e036      	b.n	80074be <__kernel_rem_pio2+0x26e>
 8007450:	4b4e      	ldr	r3, [pc, #312]	; (800758c <__kernel_rem_pio2+0x33c>)
 8007452:	2200      	movs	r2, #0
 8007454:	4630      	mov	r0, r6
 8007456:	4639      	mov	r1, r7
 8007458:	f7f8 feb6 	bl	80001c8 <__aeabi_dmul>
 800745c:	f7f9 fa22 	bl	80008a4 <__aeabi_d2iz>
 8007460:	f7f9 f92e 	bl	80006c0 <__aeabi_i2d>
 8007464:	4b4a      	ldr	r3, [pc, #296]	; (8007590 <__kernel_rem_pio2+0x340>)
 8007466:	2200      	movs	r2, #0
 8007468:	4680      	mov	r8, r0
 800746a:	4689      	mov	r9, r1
 800746c:	f7f8 feac 	bl	80001c8 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f8 ffd4 	bl	8000424 <__aeabi_dsub>
 800747c:	f7f9 fa12 	bl	80008a4 <__aeabi_d2iz>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	f843 0b04 	str.w	r0, [r3], #4
 8007486:	3d01      	subs	r5, #1
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	ab70      	add	r3, sp, #448	; 0x1c0
 800748c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f8 ffc6 	bl	8000428 <__adddf3>
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	e75b      	b.n	800735a <__kernel_rem_pio2+0x10a>
 80074a2:	d105      	bne.n	80074b0 <__kernel_rem_pio2+0x260>
 80074a4:	1e63      	subs	r3, r4, #1
 80074a6:	aa0c      	add	r2, sp, #48	; 0x30
 80074a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80074ac:	15c3      	asrs	r3, r0, #23
 80074ae:	e79b      	b.n	80073e8 <__kernel_rem_pio2+0x198>
 80074b0:	4b38      	ldr	r3, [pc, #224]	; (8007594 <__kernel_rem_pio2+0x344>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	f7f9 f9e2 	bl	800087c <__aeabi_dcmpge>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d139      	bne.n	8007530 <__kernel_rem_pio2+0x2e0>
 80074bc:	9002      	str	r0, [sp, #8]
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 f9bb 	bl	8000840 <__aeabi_dcmpeq>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f000 80b4 	beq.w	8007638 <__kernel_rem_pio2+0x3e8>
 80074d0:	f104 3bff 	add.w	fp, r4, #4294967295
 80074d4:	465b      	mov	r3, fp
 80074d6:	2200      	movs	r2, #0
 80074d8:	9904      	ldr	r1, [sp, #16]
 80074da:	428b      	cmp	r3, r1
 80074dc:	da65      	bge.n	80075aa <__kernel_rem_pio2+0x35a>
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d07b      	beq.n	80075da <__kernel_rem_pio2+0x38a>
 80074e2:	ab0c      	add	r3, sp, #48	; 0x30
 80074e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80074e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80a0 	beq.w	8007632 <__kernel_rem_pio2+0x3e2>
 80074f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007578 <__kernel_rem_pio2+0x328>
 80074f6:	4650      	mov	r0, sl
 80074f8:	f000 fb32 	bl	8007b60 <scalbn>
 80074fc:	4f23      	ldr	r7, [pc, #140]	; (800758c <__kernel_rem_pio2+0x33c>)
 80074fe:	ec55 4b10 	vmov	r4, r5, d0
 8007502:	46d8      	mov	r8, fp
 8007504:	2600      	movs	r6, #0
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	f280 80cf 	bge.w	80076ac <__kernel_rem_pio2+0x45c>
 800750e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007570 <__kernel_rem_pio2+0x320>
 8007512:	465f      	mov	r7, fp
 8007514:	f04f 0800 	mov.w	r8, #0
 8007518:	2f00      	cmp	r7, #0
 800751a:	f2c0 80fd 	blt.w	8007718 <__kernel_rem_pio2+0x4c8>
 800751e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007520:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007598 <__kernel_rem_pio2+0x348>
 8007524:	ec55 4b18 	vmov	r4, r5, d8
 8007528:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800752c:	2600      	movs	r6, #0
 800752e:	e0e5      	b.n	80076fc <__kernel_rem_pio2+0x4ac>
 8007530:	2302      	movs	r3, #2
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	e75c      	b.n	80073f0 <__kernel_rem_pio2+0x1a0>
 8007536:	f8db 3000 	ldr.w	r3, [fp]
 800753a:	b955      	cbnz	r5, 8007552 <__kernel_rem_pio2+0x302>
 800753c:	b123      	cbz	r3, 8007548 <__kernel_rem_pio2+0x2f8>
 800753e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007542:	f8cb 3000 	str.w	r3, [fp]
 8007546:	2301      	movs	r3, #1
 8007548:	3201      	adds	r2, #1
 800754a:	f10b 0b04 	add.w	fp, fp, #4
 800754e:	461d      	mov	r5, r3
 8007550:	e755      	b.n	80073fe <__kernel_rem_pio2+0x1ae>
 8007552:	1acb      	subs	r3, r1, r3
 8007554:	f8cb 3000 	str.w	r3, [fp]
 8007558:	462b      	mov	r3, r5
 800755a:	e7f5      	b.n	8007548 <__kernel_rem_pio2+0x2f8>
 800755c:	1e62      	subs	r2, r4, #1
 800755e:	ab0c      	add	r3, sp, #48	; 0x30
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007568:	a90c      	add	r1, sp, #48	; 0x30
 800756a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800756e:	e754      	b.n	800741a <__kernel_rem_pio2+0x1ca>
	...
 800757c:	3ff00000 	.word	0x3ff00000
 8007580:	08007e98 	.word	0x08007e98
 8007584:	40200000 	.word	0x40200000
 8007588:	3ff00000 	.word	0x3ff00000
 800758c:	3e700000 	.word	0x3e700000
 8007590:	41700000 	.word	0x41700000
 8007594:	3fe00000 	.word	0x3fe00000
 8007598:	08007e58 	.word	0x08007e58
 800759c:	1e62      	subs	r2, r4, #1
 800759e:	ab0c      	add	r3, sp, #48	; 0x30
 80075a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80075a8:	e7de      	b.n	8007568 <__kernel_rem_pio2+0x318>
 80075aa:	a90c      	add	r1, sp, #48	; 0x30
 80075ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	430a      	orrs	r2, r1
 80075b4:	e790      	b.n	80074d8 <__kernel_rem_pio2+0x288>
 80075b6:	3301      	adds	r3, #1
 80075b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80075bc:	2900      	cmp	r1, #0
 80075be:	d0fa      	beq.n	80075b6 <__kernel_rem_pio2+0x366>
 80075c0:	9a08      	ldr	r2, [sp, #32]
 80075c2:	18e3      	adds	r3, r4, r3
 80075c4:	18a6      	adds	r6, r4, r2
 80075c6:	aa20      	add	r2, sp, #128	; 0x80
 80075c8:	1c65      	adds	r5, r4, #1
 80075ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80075ce:	9302      	str	r3, [sp, #8]
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	42ab      	cmp	r3, r5
 80075d4:	da04      	bge.n	80075e0 <__kernel_rem_pio2+0x390>
 80075d6:	461c      	mov	r4, r3
 80075d8:	e6b5      	b.n	8007346 <__kernel_rem_pio2+0xf6>
 80075da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075dc:	2301      	movs	r3, #1
 80075de:	e7eb      	b.n	80075b8 <__kernel_rem_pio2+0x368>
 80075e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075e6:	f7f9 f86b 	bl	80006c0 <__aeabi_i2d>
 80075ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	46b3      	mov	fp, r6
 80075f2:	461c      	mov	r4, r3
 80075f4:	2700      	movs	r7, #0
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	f04f 0900 	mov.w	r9, #0
 80075fe:	9b06      	ldr	r3, [sp, #24]
 8007600:	429f      	cmp	r7, r3
 8007602:	dd06      	ble.n	8007612 <__kernel_rem_pio2+0x3c2>
 8007604:	ab70      	add	r3, sp, #448	; 0x1c0
 8007606:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800760a:	e9c3 8900 	strd	r8, r9, [r3]
 800760e:	3501      	adds	r5, #1
 8007610:	e7de      	b.n	80075d0 <__kernel_rem_pio2+0x380>
 8007612:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007616:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800761a:	f7f8 fdd5 	bl	80001c8 <__aeabi_dmul>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4640      	mov	r0, r8
 8007624:	4649      	mov	r1, r9
 8007626:	f7f8 feff 	bl	8000428 <__adddf3>
 800762a:	3701      	adds	r7, #1
 800762c:	4680      	mov	r8, r0
 800762e:	4689      	mov	r9, r1
 8007630:	e7e5      	b.n	80075fe <__kernel_rem_pio2+0x3ae>
 8007632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007636:	e754      	b.n	80074e2 <__kernel_rem_pio2+0x292>
 8007638:	ec47 6b10 	vmov	d0, r6, r7
 800763c:	f1ca 0000 	rsb	r0, sl, #0
 8007640:	f000 fa8e 	bl	8007b60 <scalbn>
 8007644:	ec57 6b10 	vmov	r6, r7, d0
 8007648:	4b9f      	ldr	r3, [pc, #636]	; (80078c8 <__kernel_rem_pio2+0x678>)
 800764a:	ee10 0a10 	vmov	r0, s0
 800764e:	2200      	movs	r2, #0
 8007650:	4639      	mov	r1, r7
 8007652:	f7f9 f913 	bl	800087c <__aeabi_dcmpge>
 8007656:	b300      	cbz	r0, 800769a <__kernel_rem_pio2+0x44a>
 8007658:	4b9c      	ldr	r3, [pc, #624]	; (80078cc <__kernel_rem_pio2+0x67c>)
 800765a:	2200      	movs	r2, #0
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 fdb2 	bl	80001c8 <__aeabi_dmul>
 8007664:	f7f9 f91e 	bl	80008a4 <__aeabi_d2iz>
 8007668:	4605      	mov	r5, r0
 800766a:	f7f9 f829 	bl	80006c0 <__aeabi_i2d>
 800766e:	4b96      	ldr	r3, [pc, #600]	; (80078c8 <__kernel_rem_pio2+0x678>)
 8007670:	2200      	movs	r2, #0
 8007672:	f7f8 fda9 	bl	80001c8 <__aeabi_dmul>
 8007676:	460b      	mov	r3, r1
 8007678:	4602      	mov	r2, r0
 800767a:	4639      	mov	r1, r7
 800767c:	4630      	mov	r0, r6
 800767e:	f7f8 fed1 	bl	8000424 <__aeabi_dsub>
 8007682:	f7f9 f90f 	bl	80008a4 <__aeabi_d2iz>
 8007686:	f104 0b01 	add.w	fp, r4, #1
 800768a:	ab0c      	add	r3, sp, #48	; 0x30
 800768c:	f10a 0a18 	add.w	sl, sl, #24
 8007690:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007694:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007698:	e72b      	b.n	80074f2 <__kernel_rem_pio2+0x2a2>
 800769a:	4630      	mov	r0, r6
 800769c:	4639      	mov	r1, r7
 800769e:	f7f9 f901 	bl	80008a4 <__aeabi_d2iz>
 80076a2:	ab0c      	add	r3, sp, #48	; 0x30
 80076a4:	46a3      	mov	fp, r4
 80076a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80076aa:	e722      	b.n	80074f2 <__kernel_rem_pio2+0x2a2>
 80076ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80076ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80076b2:	ab0c      	add	r3, sp, #48	; 0x30
 80076b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80076b8:	f7f9 f802 	bl	80006c0 <__aeabi_i2d>
 80076bc:	4622      	mov	r2, r4
 80076be:	462b      	mov	r3, r5
 80076c0:	f7f8 fd82 	bl	80001c8 <__aeabi_dmul>
 80076c4:	4632      	mov	r2, r6
 80076c6:	e9c9 0100 	strd	r0, r1, [r9]
 80076ca:	463b      	mov	r3, r7
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 fd7a 	bl	80001c8 <__aeabi_dmul>
 80076d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80076d8:	4604      	mov	r4, r0
 80076da:	460d      	mov	r5, r1
 80076dc:	e713      	b.n	8007506 <__kernel_rem_pio2+0x2b6>
 80076de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80076e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80076e6:	f7f8 fd6f 	bl	80001c8 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7f8 fe99 	bl	8000428 <__adddf3>
 80076f6:	3601      	adds	r6, #1
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	9b04      	ldr	r3, [sp, #16]
 80076fe:	429e      	cmp	r6, r3
 8007700:	dc01      	bgt.n	8007706 <__kernel_rem_pio2+0x4b6>
 8007702:	45b0      	cmp	r8, r6
 8007704:	daeb      	bge.n	80076de <__kernel_rem_pio2+0x48e>
 8007706:	ab48      	add	r3, sp, #288	; 0x120
 8007708:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800770c:	e9c3 4500 	strd	r4, r5, [r3]
 8007710:	3f01      	subs	r7, #1
 8007712:	f108 0801 	add.w	r8, r8, #1
 8007716:	e6ff      	b.n	8007518 <__kernel_rem_pio2+0x2c8>
 8007718:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800771a:	2b02      	cmp	r3, #2
 800771c:	dc0b      	bgt.n	8007736 <__kernel_rem_pio2+0x4e6>
 800771e:	2b00      	cmp	r3, #0
 8007720:	dc6e      	bgt.n	8007800 <__kernel_rem_pio2+0x5b0>
 8007722:	d045      	beq.n	80077b0 <__kernel_rem_pio2+0x560>
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	f003 0007 	and.w	r0, r3, #7
 800772a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800772e:	ecbd 8b02 	vpop	{d8}
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007738:	2b03      	cmp	r3, #3
 800773a:	d1f3      	bne.n	8007724 <__kernel_rem_pio2+0x4d4>
 800773c:	ab48      	add	r3, sp, #288	; 0x120
 800773e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007742:	46d0      	mov	r8, sl
 8007744:	46d9      	mov	r9, fp
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	f1a8 0808 	sub.w	r8, r8, #8
 800774e:	dc64      	bgt.n	800781a <__kernel_rem_pio2+0x5ca>
 8007750:	465c      	mov	r4, fp
 8007752:	2c01      	cmp	r4, #1
 8007754:	f1aa 0a08 	sub.w	sl, sl, #8
 8007758:	dc7e      	bgt.n	8007858 <__kernel_rem_pio2+0x608>
 800775a:	2000      	movs	r0, #0
 800775c:	2100      	movs	r1, #0
 800775e:	f1bb 0f01 	cmp.w	fp, #1
 8007762:	f300 8097 	bgt.w	8007894 <__kernel_rem_pio2+0x644>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800776c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 8099 	bne.w	80078a8 <__kernel_rem_pio2+0x658>
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	e9c3 5600 	strd	r5, r6, [r3]
 800777c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007780:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007784:	e7ce      	b.n	8007724 <__kernel_rem_pio2+0x4d4>
 8007786:	ab48      	add	r3, sp, #288	; 0x120
 8007788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 fe4a 	bl	8000428 <__adddf3>
 8007794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007798:	f1bb 0f00 	cmp.w	fp, #0
 800779c:	daf3      	bge.n	8007786 <__kernel_rem_pio2+0x536>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	b113      	cbz	r3, 80077a8 <__kernel_rem_pio2+0x558>
 80077a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a6:	4619      	mov	r1, r3
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	e9c3 0100 	strd	r0, r1, [r3]
 80077ae:	e7b9      	b.n	8007724 <__kernel_rem_pio2+0x4d4>
 80077b0:	2000      	movs	r0, #0
 80077b2:	2100      	movs	r1, #0
 80077b4:	e7f0      	b.n	8007798 <__kernel_rem_pio2+0x548>
 80077b6:	ab48      	add	r3, sp, #288	; 0x120
 80077b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fe32 	bl	8000428 <__adddf3>
 80077c4:	3c01      	subs	r4, #1
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	daf5      	bge.n	80077b6 <__kernel_rem_pio2+0x566>
 80077ca:	9b02      	ldr	r3, [sp, #8]
 80077cc:	b1e3      	cbz	r3, 8007808 <__kernel_rem_pio2+0x5b8>
 80077ce:	4602      	mov	r2, r0
 80077d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d4:	9c01      	ldr	r4, [sp, #4]
 80077d6:	e9c4 2300 	strd	r2, r3, [r4]
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80077e2:	f7f8 fe1f 	bl	8000424 <__aeabi_dsub>
 80077e6:	ad4a      	add	r5, sp, #296	; 0x128
 80077e8:	2401      	movs	r4, #1
 80077ea:	45a3      	cmp	fp, r4
 80077ec:	da0f      	bge.n	800780e <__kernel_rem_pio2+0x5be>
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	b113      	cbz	r3, 80077f8 <__kernel_rem_pio2+0x5a8>
 80077f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077f6:	4619      	mov	r1, r3
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80077fe:	e791      	b.n	8007724 <__kernel_rem_pio2+0x4d4>
 8007800:	465c      	mov	r4, fp
 8007802:	2000      	movs	r0, #0
 8007804:	2100      	movs	r1, #0
 8007806:	e7de      	b.n	80077c6 <__kernel_rem_pio2+0x576>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	e7e2      	b.n	80077d4 <__kernel_rem_pio2+0x584>
 800780e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007812:	f7f8 fe09 	bl	8000428 <__adddf3>
 8007816:	3401      	adds	r4, #1
 8007818:	e7e7      	b.n	80077ea <__kernel_rem_pio2+0x59a>
 800781a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800781e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007822:	4620      	mov	r0, r4
 8007824:	4632      	mov	r2, r6
 8007826:	463b      	mov	r3, r7
 8007828:	4629      	mov	r1, r5
 800782a:	f7f8 fdfd 	bl	8000428 <__adddf3>
 800782e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	f7f8 fdf3 	bl	8000424 <__aeabi_dsub>
 800783e:	4632      	mov	r2, r6
 8007840:	463b      	mov	r3, r7
 8007842:	f7f8 fdf1 	bl	8000428 <__adddf3>
 8007846:	ed9d 7b04 	vldr	d7, [sp, #16]
 800784a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800784e:	ed88 7b00 	vstr	d7, [r8]
 8007852:	f109 39ff 	add.w	r9, r9, #4294967295
 8007856:	e776      	b.n	8007746 <__kernel_rem_pio2+0x4f6>
 8007858:	e9da 8900 	ldrd	r8, r9, [sl]
 800785c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007860:	4640      	mov	r0, r8
 8007862:	4632      	mov	r2, r6
 8007864:	463b      	mov	r3, r7
 8007866:	4649      	mov	r1, r9
 8007868:	f7f8 fdde 	bl	8000428 <__adddf3>
 800786c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4640      	mov	r0, r8
 8007876:	4649      	mov	r1, r9
 8007878:	f7f8 fdd4 	bl	8000424 <__aeabi_dsub>
 800787c:	4632      	mov	r2, r6
 800787e:	463b      	mov	r3, r7
 8007880:	f7f8 fdd2 	bl	8000428 <__adddf3>
 8007884:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800788c:	ed8a 7b00 	vstr	d7, [sl]
 8007890:	3c01      	subs	r4, #1
 8007892:	e75e      	b.n	8007752 <__kernel_rem_pio2+0x502>
 8007894:	ab48      	add	r3, sp, #288	; 0x120
 8007896:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fdc3 	bl	8000428 <__adddf3>
 80078a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078a6:	e75a      	b.n	800775e <__kernel_rem_pio2+0x50e>
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	9a01      	ldr	r2, [sp, #4]
 80078ac:	601d      	str	r5, [r3, #0]
 80078ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80078b2:	605c      	str	r4, [r3, #4]
 80078b4:	609f      	str	r7, [r3, #8]
 80078b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80078ba:	60d3      	str	r3, [r2, #12]
 80078bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078c0:	6110      	str	r0, [r2, #16]
 80078c2:	6153      	str	r3, [r2, #20]
 80078c4:	e72e      	b.n	8007724 <__kernel_rem_pio2+0x4d4>
 80078c6:	bf00      	nop
 80078c8:	41700000 	.word	0x41700000
 80078cc:	3e700000 	.word	0x3e700000

080078d0 <__kernel_sin>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	ed2d 8b04 	vpush	{d8-d9}
 80078d8:	eeb0 8a41 	vmov.f32	s16, s2
 80078dc:	eef0 8a61 	vmov.f32	s17, s3
 80078e0:	ec55 4b10 	vmov	r4, r5, d0
 80078e4:	b083      	sub	sp, #12
 80078e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80078ee:	9001      	str	r0, [sp, #4]
 80078f0:	da06      	bge.n	8007900 <__kernel_sin+0x30>
 80078f2:	ee10 0a10 	vmov	r0, s0
 80078f6:	4629      	mov	r1, r5
 80078f8:	f7f8 ffd4 	bl	80008a4 <__aeabi_d2iz>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d051      	beq.n	80079a4 <__kernel_sin+0xd4>
 8007900:	4622      	mov	r2, r4
 8007902:	462b      	mov	r3, r5
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fc5e 	bl	80001c8 <__aeabi_dmul>
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f8 fc56 	bl	80001c8 <__aeabi_dmul>
 800791c:	a341      	add	r3, pc, #260	; (adr r3, 8007a24 <__kernel_sin+0x154>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4680      	mov	r8, r0
 8007924:	4689      	mov	r9, r1
 8007926:	4650      	mov	r0, sl
 8007928:	4659      	mov	r1, fp
 800792a:	f7f8 fc4d 	bl	80001c8 <__aeabi_dmul>
 800792e:	a33f      	add	r3, pc, #252	; (adr r3, 8007a2c <__kernel_sin+0x15c>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 fd76 	bl	8000424 <__aeabi_dsub>
 8007938:	4652      	mov	r2, sl
 800793a:	465b      	mov	r3, fp
 800793c:	f7f8 fc44 	bl	80001c8 <__aeabi_dmul>
 8007940:	a33c      	add	r3, pc, #240	; (adr r3, 8007a34 <__kernel_sin+0x164>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f7f8 fd6f 	bl	8000428 <__adddf3>
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	f7f8 fc3b 	bl	80001c8 <__aeabi_dmul>
 8007952:	a33a      	add	r3, pc, #232	; (adr r3, 8007a3c <__kernel_sin+0x16c>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fd64 	bl	8000424 <__aeabi_dsub>
 800795c:	4652      	mov	r2, sl
 800795e:	465b      	mov	r3, fp
 8007960:	f7f8 fc32 	bl	80001c8 <__aeabi_dmul>
 8007964:	a337      	add	r3, pc, #220	; (adr r3, 8007a44 <__kernel_sin+0x174>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fd5d 	bl	8000428 <__adddf3>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	4606      	mov	r6, r0
 8007972:	460f      	mov	r7, r1
 8007974:	b9eb      	cbnz	r3, 80079b2 <__kernel_sin+0xe2>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4650      	mov	r0, sl
 800797c:	4659      	mov	r1, fp
 800797e:	f7f8 fc23 	bl	80001c8 <__aeabi_dmul>
 8007982:	a325      	add	r3, pc, #148	; (adr r3, 8007a18 <__kernel_sin+0x148>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fd4c 	bl	8000424 <__aeabi_dsub>
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	f7f8 fc1a 	bl	80001c8 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 fd44 	bl	8000428 <__adddf3>
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	ec45 4b10 	vmov	d0, r4, r5
 80079a8:	b003      	add	sp, #12
 80079aa:	ecbd 8b04 	vpop	{d8-d9}
 80079ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <__kernel_sin+0x150>)
 80079b4:	ec51 0b18 	vmov	r0, r1, d8
 80079b8:	2200      	movs	r2, #0
 80079ba:	f7f8 fc05 	bl	80001c8 <__aeabi_dmul>
 80079be:	4632      	mov	r2, r6
 80079c0:	ec41 0b19 	vmov	d9, r0, r1
 80079c4:	463b      	mov	r3, r7
 80079c6:	4640      	mov	r0, r8
 80079c8:	4649      	mov	r1, r9
 80079ca:	f7f8 fbfd 	bl	80001c8 <__aeabi_dmul>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	ec51 0b19 	vmov	r0, r1, d9
 80079d6:	f7f8 fd25 	bl	8000424 <__aeabi_dsub>
 80079da:	4652      	mov	r2, sl
 80079dc:	465b      	mov	r3, fp
 80079de:	f7f8 fbf3 	bl	80001c8 <__aeabi_dmul>
 80079e2:	ec53 2b18 	vmov	r2, r3, d8
 80079e6:	f7f8 fd1d 	bl	8000424 <__aeabi_dsub>
 80079ea:	a30b      	add	r3, pc, #44	; (adr r3, 8007a18 <__kernel_sin+0x148>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	4640      	mov	r0, r8
 80079f6:	4649      	mov	r1, r9
 80079f8:	f7f8 fbe6 	bl	80001c8 <__aeabi_dmul>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f8 fd10 	bl	8000428 <__adddf3>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fd08 	bl	8000424 <__aeabi_dsub>
 8007a14:	e7c4      	b.n	80079a0 <__kernel_sin+0xd0>
 8007a16:	bf00      	nop
 8007a18:	55555549 	.word	0x55555549
 8007a1c:	3fc55555 	.word	0x3fc55555
 8007a20:	3fe00000 	.word	0x3fe00000
 8007a24:	5acfd57c 	.word	0x5acfd57c
 8007a28:	3de5d93a 	.word	0x3de5d93a
 8007a2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a30:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a34:	57b1fe7d 	.word	0x57b1fe7d
 8007a38:	3ec71de3 	.word	0x3ec71de3
 8007a3c:	19c161d5 	.word	0x19c161d5
 8007a40:	3f2a01a0 	.word	0x3f2a01a0
 8007a44:	1110f8a6 	.word	0x1110f8a6
 8007a48:	3f811111 	.word	0x3f811111

08007a4c <fabs>:
 8007a4c:	ec51 0b10 	vmov	r0, r1, d0
 8007a50:	ee10 2a10 	vmov	r2, s0
 8007a54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a58:	ec43 2b10 	vmov	d0, r2, r3
 8007a5c:	4770      	bx	lr
	...

08007a60 <floor>:
 8007a60:	ec51 0b10 	vmov	r0, r1, d0
 8007a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007a70:	2e13      	cmp	r6, #19
 8007a72:	ee10 5a10 	vmov	r5, s0
 8007a76:	ee10 8a10 	vmov	r8, s0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	dc32      	bgt.n	8007ae4 <floor+0x84>
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	da14      	bge.n	8007aac <floor+0x4c>
 8007a82:	a333      	add	r3, pc, #204	; (adr r3, 8007b50 <floor+0xf0>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fcce 	bl	8000428 <__adddf3>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f7f8 fefe 	bl	8000890 <__aeabi_dcmpgt>
 8007a94:	b138      	cbz	r0, 8007aa6 <floor+0x46>
 8007a96:	2c00      	cmp	r4, #0
 8007a98:	da57      	bge.n	8007b4a <floor+0xea>
 8007a9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007a9e:	431d      	orrs	r5, r3
 8007aa0:	d001      	beq.n	8007aa6 <floor+0x46>
 8007aa2:	4c2d      	ldr	r4, [pc, #180]	; (8007b58 <floor+0xf8>)
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	e025      	b.n	8007af8 <floor+0x98>
 8007aac:	4f2b      	ldr	r7, [pc, #172]	; (8007b5c <floor+0xfc>)
 8007aae:	4137      	asrs	r7, r6
 8007ab0:	ea01 0307 	and.w	r3, r1, r7
 8007ab4:	4303      	orrs	r3, r0
 8007ab6:	d01f      	beq.n	8007af8 <floor+0x98>
 8007ab8:	a325      	add	r3, pc, #148	; (adr r3, 8007b50 <floor+0xf0>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fcb3 	bl	8000428 <__adddf3>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f7f8 fee3 	bl	8000890 <__aeabi_dcmpgt>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0eb      	beq.n	8007aa6 <floor+0x46>
 8007ace:	2c00      	cmp	r4, #0
 8007ad0:	bfbe      	ittt	lt
 8007ad2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ad6:	fa43 f606 	asrlt.w	r6, r3, r6
 8007ada:	19a4      	addlt	r4, r4, r6
 8007adc:	ea24 0407 	bic.w	r4, r4, r7
 8007ae0:	2500      	movs	r5, #0
 8007ae2:	e7e0      	b.n	8007aa6 <floor+0x46>
 8007ae4:	2e33      	cmp	r6, #51	; 0x33
 8007ae6:	dd0b      	ble.n	8007b00 <floor+0xa0>
 8007ae8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007aec:	d104      	bne.n	8007af8 <floor+0x98>
 8007aee:	ee10 2a10 	vmov	r2, s0
 8007af2:	460b      	mov	r3, r1
 8007af4:	f7f8 fc98 	bl	8000428 <__adddf3>
 8007af8:	ec41 0b10 	vmov	d0, r0, r1
 8007afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b04:	f04f 33ff 	mov.w	r3, #4294967295
 8007b08:	fa23 f707 	lsr.w	r7, r3, r7
 8007b0c:	4207      	tst	r7, r0
 8007b0e:	d0f3      	beq.n	8007af8 <floor+0x98>
 8007b10:	a30f      	add	r3, pc, #60	; (adr r3, 8007b50 <floor+0xf0>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fc87 	bl	8000428 <__adddf3>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f7f8 feb7 	bl	8000890 <__aeabi_dcmpgt>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d0bf      	beq.n	8007aa6 <floor+0x46>
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	da02      	bge.n	8007b30 <floor+0xd0>
 8007b2a:	2e14      	cmp	r6, #20
 8007b2c:	d103      	bne.n	8007b36 <floor+0xd6>
 8007b2e:	3401      	adds	r4, #1
 8007b30:	ea25 0507 	bic.w	r5, r5, r7
 8007b34:	e7b7      	b.n	8007aa6 <floor+0x46>
 8007b36:	2301      	movs	r3, #1
 8007b38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007b3c:	fa03 f606 	lsl.w	r6, r3, r6
 8007b40:	4435      	add	r5, r6
 8007b42:	4545      	cmp	r5, r8
 8007b44:	bf38      	it	cc
 8007b46:	18e4      	addcc	r4, r4, r3
 8007b48:	e7f2      	b.n	8007b30 <floor+0xd0>
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	462c      	mov	r4, r5
 8007b4e:	e7aa      	b.n	8007aa6 <floor+0x46>
 8007b50:	8800759c 	.word	0x8800759c
 8007b54:	7e37e43c 	.word	0x7e37e43c
 8007b58:	bff00000 	.word	0xbff00000
 8007b5c:	000fffff 	.word	0x000fffff

08007b60 <scalbn>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	ec55 4b10 	vmov	r4, r5, d0
 8007b66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	b99a      	cbnz	r2, 8007b98 <scalbn+0x38>
 8007b70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b74:	4323      	orrs	r3, r4
 8007b76:	d036      	beq.n	8007be6 <scalbn+0x86>
 8007b78:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <scalbn+0x100>)
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	ee10 0a10 	vmov	r0, s0
 8007b80:	2200      	movs	r2, #0
 8007b82:	f7f8 fb21 	bl	80001c8 <__aeabi_dmul>
 8007b86:	4b37      	ldr	r3, [pc, #220]	; (8007c64 <scalbn+0x104>)
 8007b88:	429e      	cmp	r6, r3
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	da10      	bge.n	8007bb2 <scalbn+0x52>
 8007b90:	a32b      	add	r3, pc, #172	; (adr r3, 8007c40 <scalbn+0xe0>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	e03a      	b.n	8007c0e <scalbn+0xae>
 8007b98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007b9c:	428a      	cmp	r2, r1
 8007b9e:	d10c      	bne.n	8007bba <scalbn+0x5a>
 8007ba0:	ee10 2a10 	vmov	r2, s0
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fc3e 	bl	8000428 <__adddf3>
 8007bac:	4604      	mov	r4, r0
 8007bae:	460d      	mov	r5, r1
 8007bb0:	e019      	b.n	8007be6 <scalbn+0x86>
 8007bb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	3a36      	subs	r2, #54	; 0x36
 8007bba:	4432      	add	r2, r6
 8007bbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007bc0:	428a      	cmp	r2, r1
 8007bc2:	dd08      	ble.n	8007bd6 <scalbn+0x76>
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	a120      	add	r1, pc, #128	; (adr r1, 8007c48 <scalbn+0xe8>)
 8007bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bcc:	da1c      	bge.n	8007c08 <scalbn+0xa8>
 8007bce:	a120      	add	r1, pc, #128	; (adr r1, 8007c50 <scalbn+0xf0>)
 8007bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd4:	e018      	b.n	8007c08 <scalbn+0xa8>
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	dd08      	ble.n	8007bec <scalbn+0x8c>
 8007bda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007be2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007be6:	ec45 4b10 	vmov	d0, r4, r5
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007bf0:	da19      	bge.n	8007c26 <scalbn+0xc6>
 8007bf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007bf6:	429e      	cmp	r6, r3
 8007bf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007bfc:	dd0a      	ble.n	8007c14 <scalbn+0xb4>
 8007bfe:	a112      	add	r1, pc, #72	; (adr r1, 8007c48 <scalbn+0xe8>)
 8007c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e2      	bne.n	8007bce <scalbn+0x6e>
 8007c08:	a30f      	add	r3, pc, #60	; (adr r3, 8007c48 <scalbn+0xe8>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fadb 	bl	80001c8 <__aeabi_dmul>
 8007c12:	e7cb      	b.n	8007bac <scalbn+0x4c>
 8007c14:	a10a      	add	r1, pc, #40	; (adr r1, 8007c40 <scalbn+0xe0>)
 8007c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0b8      	beq.n	8007b90 <scalbn+0x30>
 8007c1e:	a10e      	add	r1, pc, #56	; (adr r1, 8007c58 <scalbn+0xf8>)
 8007c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c24:	e7b4      	b.n	8007b90 <scalbn+0x30>
 8007c26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c2a:	3236      	adds	r2, #54	; 0x36
 8007c2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007c34:	4620      	mov	r0, r4
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <scalbn+0x108>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	e7e8      	b.n	8007c0e <scalbn+0xae>
 8007c3c:	f3af 8000 	nop.w
 8007c40:	c2f8f359 	.word	0xc2f8f359
 8007c44:	01a56e1f 	.word	0x01a56e1f
 8007c48:	8800759c 	.word	0x8800759c
 8007c4c:	7e37e43c 	.word	0x7e37e43c
 8007c50:	8800759c 	.word	0x8800759c
 8007c54:	fe37e43c 	.word	0xfe37e43c
 8007c58:	c2f8f359 	.word	0xc2f8f359
 8007c5c:	81a56e1f 	.word	0x81a56e1f
 8007c60:	43500000 	.word	0x43500000
 8007c64:	ffff3cb0 	.word	0xffff3cb0
 8007c68:	3c900000 	.word	0x3c900000

08007c6c <_init>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	bf00      	nop
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr

08007c78 <_fini>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	bf00      	nop
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr
