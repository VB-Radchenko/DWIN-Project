
DWIN Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd8  08005dd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de0  08005de0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  2000000c  08005df4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08005df4  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fb1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e98  00000000  00000000  00036fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00039e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002864f  00000000  00000000  0003c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001577f  00000000  00000000  0006470f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa79d  00000000  00000000  00079e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017462b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  00174680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d78 	.word	0x08005d78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005d78 	.word	0x08005d78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_DMA_Init+0x48>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ca:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <MX_DMA_Init+0x48>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	6493      	str	r3, [r2, #72]	; 0x48
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <MX_DMA_Init+0x48>)
 80004d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	203a      	movs	r0, #58	; 0x3a
 80004e4:	f000 ffb9 	bl	800145a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80004e8:	203a      	movs	r0, #58	; 0x3a
 80004ea:	f000 ffd2 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	203c      	movs	r0, #60	; 0x3c
 80004f4:	f000 ffb1 	bl	800145a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80004f8:	203c      	movs	r0, #60	; 0x3c
 80004fa:	f000 ffca 	bl	8001492 <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_GPIO_Init+0x44>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <MX_GPIO_Init+0x44>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_GPIO_Init+0x44>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_GPIO_Init+0x44>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <MX_GPIO_Init+0x44>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_GPIO_Init+0x44>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fe0b 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f837 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f7ff ffd3 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 8000566:	f7ff ffab 	bl	80004c0 <MX_DMA_Init>
  MX_RTC_Init();
 800056a:	f000 f88b 	bl	8000684 <MX_RTC_Init>
  MX_TIM2_Init();
 800056e:	f000 f9bf 	bl	80008f0 <MX_TIM2_Init>
  MX_UART4_Init();
 8000572:	f000 fa8b 	bl	8000a8c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  dwinUartDmaInit();
 8000576:	f000 fba7 	bl	8000cc8 <dwinUartDmaInit>
  dwinAppInit();
 800057a:	f000 fd9b 	bl	80010b4 <dwinAppInit>
  uint16_t i =0;
 800057e:	2300      	movs	r3, #0
 8000580:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  parsingDWIN();
 8000582:	f000 fced 	bl	8000f60 <parsingDWIN>
	  if ( i < 100)
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b63      	cmp	r3, #99	; 0x63
 800058a:	d81c      	bhi.n	80005c6 <main+0x72>
	  {
		  i++;
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	3301      	adds	r3, #1
 8000590:	80fb      	strh	r3, [r7, #6]
		  writeHalfWordDWIN(0x5002, i);
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	4619      	mov	r1, r3
 8000596:	f245 0002 	movw	r0, #20482	; 0x5002
 800059a:	f000 fd57 	bl	800104c <writeHalfWordDWIN>
		  parsingDWIN();
 800059e:	f000 fcdf 	bl	8000f60 <parsingDWIN>
		  HAL_Delay(50);
 80005a2:	2032      	movs	r0, #50	; 0x32
 80005a4:	f000 fe5a 	bl	800125c <HAL_Delay>
		  writeHalfWordDWIN(0x5004, 100-i);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	f245 0004 	movw	r0, #20484	; 0x5004
 80005b6:	f000 fd49 	bl	800104c <writeHalfWordDWIN>
		  parsingDWIN();
 80005ba:	f000 fcd1 	bl	8000f60 <parsingDWIN>
	  HAL_Delay(50);
 80005be:	2032      	movs	r0, #50	; 0x32
 80005c0:	f000 fe4c 	bl	800125c <HAL_Delay>
 80005c4:	e001      	b.n	80005ca <main+0x76>
	  }
	  else
	  {
		  i = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	80fb      	strh	r3, [r7, #6]
	  }
	  ledPWM();
 80005ca:	f000 fd81 	bl	80010d0 <ledPWM>
	  parsingDWIN();
 80005ce:	e7d8      	b.n	8000582 <main+0x2e>

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 fbc2 	bl	8005d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f001 fba5 	bl	8001d44 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f83a 	bl	8000678 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000604:	f001 fb80 	bl	8001d08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <SystemClock_Config+0xa4>)
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800060e:	4a19      	ldr	r2, [pc, #100]	; (8000674 <SystemClock_Config+0xa4>)
 8000610:	f023 0318 	bic.w	r3, r3, #24
 8000614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000618:	2306      	movs	r3, #6
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fbdc 	bl	8001df0 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 f81b 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000646:	2301      	movs	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f001 ffad 	bl	80025bc <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000668:	f000 f806 	bl	8000678 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <MX_RTC_Init+0xb0>)
 800069e:	4a26      	ldr	r2, [pc, #152]	; (8000738 <MX_RTC_Init+0xb4>)
 80006a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <MX_RTC_Init+0xb0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_RTC_Init+0xb0>)
 80006aa:	227f      	movs	r2, #127	; 0x7f
 80006ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_RTC_Init+0xb0>)
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_RTC_Init+0xb0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_RTC_Init+0xb0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_RTC_Init+0xb0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_RTC_Init+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006cc:	4819      	ldr	r0, [pc, #100]	; (8000734 <MX_RTC_Init+0xb0>)
 80006ce:	f002 fe37 	bl	8003340 <HAL_RTC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80006d8:	f7ff ffce 	bl	8000678 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 80006dc:	230c      	movs	r3, #12
 80006de:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 30;
 80006e0:	231e      	movs	r3, #30
 80006e2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 47;
 80006e4:	232f      	movs	r3, #47	; 0x2f
 80006e6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <MX_RTC_Init+0xb0>)
 80006f8:	f002 fe9d 	bl	8003436 <HAL_RTC_SetTime>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000702:	f7ff ffb9 	bl	8000678 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000706:	2301      	movs	r3, #1
 8000708:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800070a:	2301      	movs	r3, #1
 800070c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_RTC_Init+0xb0>)
 800071e:	f002 ff27 	bl	8003570 <HAL_RTC_SetDate>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000728:	f7ff ffa6 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000030 	.word	0x20000030
 8000738:	40002800 	.word	0x40002800

0800073c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0a4      	sub	sp, #144	; 0x90
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2288      	movs	r2, #136	; 0x88
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 fb0b 	bl	8005d68 <memset>
  if(rtcHandle->Instance==RTC)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_RTC_MspInit+0x5c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d118      	bne.n	800078e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800075c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000760:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f92a 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800077a:	f7ff ff7d 	bl	8000678 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_RTC_MspInit+0x60>)
 8000780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <HAL_RTC_MspInit+0x60>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800078e:	bf00      	nop
 8000790:	3790      	adds	r7, #144	; 0x90
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40002800 	.word	0x40002800
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	; 0x60
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 fcf2 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM2_IRQHandler+0x10>)
 8000842:	f003 f991 	bl	8003b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000054 	.word	0x20000054

08000850 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <UART4_IRQHandler+0x10>)
 8000856:	f004 faab 	bl	8004db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000e8 	.word	0x200000e8

08000864 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <DMA2_Channel3_IRQHandler+0x10>)
 800086a:	f000 ffc4 	bl	80017f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000016c 	.word	0x2000016c

08000878 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <DMA2_Channel5_IRQHandler+0x10>)
 800087e:	f000 ffba 	bl	80017f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000a0 	.word	0x200000a0

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <SystemInit+0x5c>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <SystemInit+0x5c>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <SystemInit+0x60>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <SystemInit+0x60>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <SystemInit+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <SystemInit+0x60>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <SystemInit+0x60>)
 80008b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <SystemInit+0x60>)
 80008c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <SystemInit+0x60>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <SystemInit+0x60>)
 80008d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SystemInit+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00
 80008ec:	40021000 	.word	0x40021000

080008f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_TIM2_Init+0xe8>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094a:	4823      	ldr	r0, [pc, #140]	; (80009d8 <MX_TIM2_Init+0xe8>)
 800094c:	f002 ff4e 	bl	80037ec <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000956:	f7ff fe8f 	bl	8000678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000964:	4619      	mov	r1, r3
 8000966:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000968:	f003 fb2e 	bl	8003fc8 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000972:	f7ff fe81 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000976:	4818      	ldr	r0, [pc, #96]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000978:	f002 ff8f 	bl	800389a <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000982:	f7ff fe79 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <MX_TIM2_Init+0xe8>)
 8000996:	f004 f83f 	bl	8004a18 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009a0:	f7ff fe6a 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM2_Init+0xe8>)
 80009bc:	f003 f9f4 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009c6:	f7ff fe57 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM2_Init+0xe8>)
 80009cc:	f000 f82a 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 80009d0:	bf00      	nop
 80009d2:	3738      	adds	r7, #56	; 0x38
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000054 	.word	0x20000054

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d113      	bne.n	8000a16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_TIM_Base_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <HAL_TIM_Base_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_TIM_Base_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	201c      	movs	r0, #28
 8000a0c:	f000 fd25 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a10:	201c      	movs	r0, #28
 8000a12:	f000 fd3e 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a44:	d11c      	bne.n	8000a80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_TIM_MspPostInit+0x64>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_TIM_MspPostInit+0x64>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_TIM_MspPostInit+0x64>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 ff9a 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000

08000a8c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <MX_UART4_Init+0x5c>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_UART4_Init+0x58>)
 8000ad0:	f004 f848 	bl	8004b64 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ada:	f7ff fdcd 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000e8 	.word	0x200000e8
 8000ae8:	40004c00 	.word	0x40004c00

08000aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0ac      	sub	sp, #176	; 0xb0
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2288      	movs	r2, #136	; 0x88
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f005 f92b 	bl	8005d68 <memset>
  if(uartHandle->Instance==UART4)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <HAL_UART_MspInit+0x170>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	f040 809a 	bne.w	8000c52 <HAL_UART_MspInit+0x166>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 ff4c 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b36:	f7ff fd9f 	bl	8000678 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b3a:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a48      	ldr	r2, [pc, #288]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a42      	ldr	r2, [pc, #264]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <HAL_UART_MspInit+0x174>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b82:	2308      	movs	r3, #8
 8000b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f000 ff0f 	bl	80019b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000b98:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <HAL_UART_MspInit+0x17c>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bba:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000bd2:	4824      	ldr	r0, [pc, #144]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bd4:	f000 fc78 	bl	80014c8 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000bde:	f7ff fd4b 	bl	8000678 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000be6:	671a      	str	r2, [r3, #112]	; 0x70
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_UART_MspInit+0x178>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <HAL_UART_MspInit+0x184>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000c26:	4811      	ldr	r0, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c28:	f000 fc4e 	bl	80014c8 <HAL_DMA_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 8000c32:	f7ff fd21 	bl	8000678 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_UART_MspInit+0x180>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2034      	movs	r0, #52	; 0x34
 8000c48:	f000 fc07 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c4c:	2034      	movs	r0, #52	; 0x34
 8000c4e:	f000 fc20 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	37b0      	adds	r7, #176	; 0xb0
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004c00 	.word	0x40004c00
 8000c60:	40021000 	.word	0x40021000
 8000c64:	200000a0 	.word	0x200000a0
 8000c68:	40020458 	.word	0x40020458
 8000c6c:	2000016c 	.word	0x2000016c
 8000c70:	40020430 	.word	0x40020430

08000c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff fe08 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c7e:	e003      	b.n	8000c88 <LoopCopyDataInit>

08000c80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c86:	3104      	adds	r1, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c90:	d3f6      	bcc.n	8000c80 <CopyDataInit>
	ldr	r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c94:	e002      	b.n	8000c9c <LoopFillZerobss>

08000c96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c98:	f842 3b04 	str.w	r3, [r2], #4

08000c9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <LoopForever+0x16>)
	cmp	r2, r3
 8000c9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ca0:	d3f9      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f005 f83d 	bl	8005d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca6:	f7ff fc55 	bl	8000554 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cb0:	08005de8 	.word	0x08005de8
	ldr	r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cb8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000cbc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cc0:	20000774 	.word	0x20000774

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <dwinUartDmaInit>:
uint8_t getByte(unsigned char*b);
//==============================================================================
//--------------------------Device initialization-------------------------------
//==============================================================================
void dwinUartDmaInit()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  readDataDWIN.delayOverflowMaxTime = 3000;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <dwinUartDmaInit+0x44>)
 8000cd0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000cd4:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
  for (uint16_t i = 0; i <DWIN_UART_BUFFER_SIZE;i++){readDataDWIN.uartBuffer[i] = 0xffff;}
 8000cd8:	2300      	movs	r3, #0
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	e008      	b.n	8000cf0 <dwinUartDmaInit+0x28>
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <dwinUartDmaInit+0x44>)
 8000ce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ce6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	3301      	adds	r3, #1
 8000cee:	80fb      	strh	r3, [r7, #6]
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cf6:	d3f2      	bcc.n	8000cde <dwinUartDmaInit+0x16>
  HAL_UART_Receive_DMA(&DWIN_UART, (uint8_t *)&readDataDWIN.uartBuffer, DWIN_UART_BUFFER_SIZE);
 8000cf8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cfc:	4903      	ldr	r1, [pc, #12]	; (8000d0c <dwinUartDmaInit+0x44>)
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <dwinUartDmaInit+0x48>)
 8000d00:	f004 f812 	bl	8004d28 <HAL_UART_Receive_DMA>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001b4 	.word	0x200001b4
 8000d10:	200000e8 	.word	0x200000e8

08000d14 <getByte>:

//==============================================================================
//--------------------------Retrieving_a_data_byte------------------------------
//==============================================================================
uint8_t getByte(unsigned char*b)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if (readDataDWIN.uartBuffer[readDataDWIN.uartCnt]!=0xffff)
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <getByte+0x7c>)
 8000d1e:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <getByte+0x7c>)
 8000d26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d026      	beq.n	8000d80 <getByte+0x6c>
  {
    *b=(readDataDWIN.uartBuffer[readDataDWIN.uartCnt] & 0xff);
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <getByte+0x7c>)
 8000d34:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <getByte+0x7c>)
 8000d3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	701a      	strb	r2, [r3, #0]
    readDataDWIN.uartBuffer[readDataDWIN.uartCnt]=0xffff;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <getByte+0x7c>)
 8000d48:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <getByte+0x7c>)
 8000d50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    readDataDWIN.uartCnt++;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <getByte+0x7c>)
 8000d5a:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <getByte+0x7c>)
 8000d64:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
    if (readDataDWIN.uartCnt == DWIN_UART_BUFFER_SIZE) readDataDWIN.uartCnt=0;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <getByte+0x7c>)
 8000d6a:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8000d6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d72:	d103      	bne.n	8000d7c <getByte+0x68>
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <getByte+0x7c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
    return 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <getByte+0x6e>
  } 
  else 
  {
	  return 0;
 8000d80:	2300      	movs	r3, #0
  }
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001b4 	.word	0x200001b4

08000d94 <receivingDataPacket>:
//==============================================================================
//-------------------------------Recive_Data------------------------------------
//==============================================================================
void receivingDataPacket()
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  uint16_t m = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	80fb      	strh	r3, [r7, #6]
    if (!readDataDWIN.PacketReady)
 8000d9e:	4b6e      	ldr	r3, [pc, #440]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000da0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8000da4:	f083 0301 	eor.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 80d0 	beq.w	8000f50 <receivingDataPacket+0x1bc>
      { 
        getByte(&readDataDWIN.GettingByte); 
 8000db0:	486a      	ldr	r0, [pc, #424]	; (8000f5c <receivingDataPacket+0x1c8>)
 8000db2:	f7ff ffaf 	bl	8000d14 <getByte>
        m = 0; 
 8000db6:	2300      	movs	r3, #0
 8000db8:	80fb      	strh	r3, [r7, #6]
          if (readDataDWIN.GettingByte == 0x5A)
 8000dba:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000dbc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8000dc0:	2b5a      	cmp	r3, #90	; 0x5a
 8000dc2:	f040 80c1 	bne.w	8000f48 <receivingDataPacket+0x1b4>
          {
            readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // start byte 1
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	4a63      	ldr	r2, [pc, #396]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000dca:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 8000dce:	4a62      	ldr	r2, [pc, #392]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000dd0:	4413      	add	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
            m++;
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	80fb      	strh	r3, [r7, #6]
            readDataDWIN.timeoutDelay = 0;
 8000dde:	4b5e      	ldr	r3, [pc, #376]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8000de6:	e013      	b.n	8000e10 <receivingDataPacket+0x7c>
            {
            	readDataDWIN.timeoutDelay++;
 8000de8:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000dea:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8000dee:	3301      	adds	r3, #1
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000df4:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            	if (readDataDWIN.timeoutDelay > readDataDWIN.delayOverflowMaxTime)readDataDWIN.timeoutOverflow = 1;
 8000df8:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000dfa:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 8000dfe:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e00:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d903      	bls.n	8000e10 <receivingDataPacket+0x7c>
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8000e10:	4852      	ldr	r0, [pc, #328]	; (8000f5c <receivingDataPacket+0x1c8>)
 8000e12:	f7ff ff7f 	bl	8000d14 <getByte>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d107      	bne.n	8000e2c <receivingDataPacket+0x98>
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e1e:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1dd      	bne.n	8000de8 <receivingDataPacket+0x54>
            }
            readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // start byte 2 
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	4a4a      	ldr	r2, [pc, #296]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e30:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 8000e34:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e36:	4413      	add	r3, r2
 8000e38:	460a      	mov	r2, r1
 8000e3a:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
            m++;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	3301      	adds	r3, #1
 8000e42:	80fb      	strh	r3, [r7, #6]
            readDataDWIN.timeoutDelay = 0;
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8000e4c:	e013      	b.n	8000e76 <receivingDataPacket+0xe2>
            {
            	readDataDWIN.timeoutDelay++;
 8000e4e:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e50:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8000e54:	3301      	adds	r3, #1
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e5a:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            	if (readDataDWIN.timeoutDelay > readDataDWIN.delayOverflowMaxTime)readDataDWIN.timeoutOverflow = 1;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e60:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 8000e64:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e66:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d903      	bls.n	8000e76 <receivingDataPacket+0xe2>
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
            while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8000e76:	4839      	ldr	r0, [pc, #228]	; (8000f5c <receivingDataPacket+0x1c8>)
 8000e78:	f7ff ff4c 	bl	8000d14 <getByte>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d107      	bne.n	8000e92 <receivingDataPacket+0xfe>
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e84:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1dd      	bne.n	8000e4e <receivingDataPacket+0xba>
            }
            readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // Data packet length
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e96:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000e9c:	4413      	add	r3, r2
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
            readDataDWIN.lengthRxPacket = readDataDWIN.rxData[m];
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4a2c      	ldr	r2, [pc, #176]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000eb2:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
            m++;
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	80fb      	strh	r3, [r7, #6]
            readDataDWIN.timeoutDelay = 0;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            for(uint16_t i = 0;i < readDataDWIN.lengthRxPacket; i++) // Fill the buffer with data
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	80bb      	strh	r3, [r7, #4]
 8000ec8:	e034      	b.n	8000f34 <receivingDataPacket+0x1a0>
            {
              while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
              {
            	  readDataDWIN.timeoutDelay++;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000ecc:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000ed6:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
            	  if (readDataDWIN.timeoutDelay > readDataDWIN.delayOverflowMaxTime)readDataDWIN.timeoutOverflow = 1;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000edc:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000ee2:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d903      	bls.n	8000ef2 <receivingDataPacket+0x15e>
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
              while ((getByte(&readDataDWIN.GettingByte)==0)&&(readDataDWIN.timeoutOverflow  != 1))
 8000ef2:	481a      	ldr	r0, [pc, #104]	; (8000f5c <receivingDataPacket+0x1c8>)
 8000ef4:	f7ff ff0e 	bl	8000d14 <getByte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d107      	bne.n	8000f0e <receivingDataPacket+0x17a>
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f00:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1dd      	bne.n	8000eca <receivingDataPacket+0x136>
              }
              readDataDWIN.timeoutDelay = 0;
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba
              readDataDWIN.rxData[m] = readDataDWIN.GettingByte; // Retrieving data
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f1a:	f892 1322 	ldrb.w	r1, [r2, #802]	; 0x322
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f20:	4413      	add	r3, r2
 8000f22:	460a      	mov	r2, r1
 8000f24:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
              m++;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	80fb      	strh	r3, [r7, #6]
            for(uint16_t i = 0;i < readDataDWIN.lengthRxPacket; i++) // Fill the buffer with data
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	3301      	adds	r3, #1
 8000f32:	80bb      	strh	r3, [r7, #4]
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f36:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3d8      	bcc.n	8000ef2 <receivingDataPacket+0x15e>
            }
          readDataDWIN.PacketReady = true; 
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
          } 
        readDataDWIN.GettingByte = 0; 
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <receivingDataPacket+0x1c4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
      } 
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200001b4 	.word	0x200001b4
 8000f5c:	200004d6 	.word	0x200004d6

08000f60 <parsingDWIN>:
//==============================================================================
//------------------------------Parsing_Data------------------------------------
//==============================================================================
void parsingDWIN()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  receivingDataPacket();
 8000f66:	f7ff ff15 	bl	8000d94 <receivingDataPacket>
  if (readDataDWIN.PacketReady)
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <parsingDWIN+0x8c>)
 8000f6c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d037      	beq.n	8000fe4 <parsingDWIN+0x84>
  {
    readDataDWIN.parsingDataDWIN.header = (uint16_t)readDataDWIN.rxData[0]<<8 | (uint16_t)readDataDWIN.rxData[1];
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <parsingDWIN+0x8c>)
 8000f76:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <parsingDWIN+0x8c>)
 8000f80:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <parsingDWIN+0x8c>)
 8000f8e:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
    readDataDWIN.parsingDataDWIN.length = readDataDWIN.rxData[2];
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <parsingDWIN+0x8c>)
 8000f94:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <parsingDWIN+0x8c>)
 8000f9a:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
    readDataDWIN.parsingDataDWIN.command = (commandDWIN)readDataDWIN.rxData[3];
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <parsingDWIN+0x8c>)
 8000fa0:	f893 232c 	ldrb.w	r2, [r3, #812]	; 0x32c
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <parsingDWIN+0x8c>)
 8000fa6:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
    for (uint8_t i = 0; i < (readDataDWIN.lengthRxPacket - 1);i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	e00e      	b.n	8000fce <parsingDWIN+0x6e>
    {
      readDataDWIN.parsingDataDWIN.data[i] = readDataDWIN.rxData[i+4];
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	1d1a      	adds	r2, r3, #4
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <parsingDWIN+0x8c>)
 8000fb8:	440a      	add	r2, r1
 8000fba:	f892 1329 	ldrb.w	r1, [r2, #809]	; 0x329
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <parsingDWIN+0x8c>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	460a      	mov	r2, r1
 8000fc4:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
    for (uint8_t i = 0; i < (readDataDWIN.lengthRxPacket - 1);i++)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <parsingDWIN+0x8c>)
 8000fd2:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbe9      	blt.n	8000fb0 <parsingDWIN+0x50>
    }
    readDataDWIN.PacketReady = false;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <parsingDWIN+0x8c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  }
  
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200001b4 	.word	0x200001b4

08000ff0 <readVariableDWIN>:
//==============================================================================
//------------------------------Read Variable-----------------------------------
//==============================================================================

void readVariableDWIN(uint16_t adress, uint8_t lenHalfWord)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	717b      	strb	r3, [r7, #5]
  uint8_t str[10] = {headerDWIN_H,headerDWIN_L,0x04,0x83,(adress & 0xFF00)>>8,adress & 0xFF,lenHalfWord};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	811a      	strh	r2, [r3, #8]
 800100c:	235a      	movs	r3, #90	; 0x5a
 800100e:	733b      	strb	r3, [r7, #12]
 8001010:	23a5      	movs	r3, #165	; 0xa5
 8001012:	737b      	strb	r3, [r7, #13]
 8001014:	2304      	movs	r3, #4
 8001016:	73bb      	strb	r3, [r7, #14]
 8001018:	2383      	movs	r3, #131	; 0x83
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	743b      	strb	r3, [r7, #16]
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	747b      	strb	r3, [r7, #17]
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	74bb      	strb	r3, [r7, #18]

  HAL_UART_Transmit(&DWIN_UART, str, 7,0xFF);    
 8001030:	f107 010c 	add.w	r1, r7, #12
 8001034:	23ff      	movs	r3, #255	; 0xff
 8001036:	2207      	movs	r2, #7
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <readVariableDWIN+0x58>)
 800103a:	f003 fde1 	bl	8004c00 <HAL_UART_Transmit>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000e8 	.word	0x200000e8

0800104c <writeHalfWordDWIN>:
//==============================================================================
//------------------------Write Variable Half Word------------------------------
//==============================================================================

void writeHalfWordDWIN(uint16_t adress, uint16_t data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	80fb      	strh	r3, [r7, #6]
 8001058:	4613      	mov	r3, r2
 800105a:	80bb      	strh	r3, [r7, #4]
  uint8_t str[9] = {0x00};
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	711a      	strb	r2, [r3, #4]
  str[0] = headerDWIN_H;
 800106a:	235a      	movs	r3, #90	; 0x5a
 800106c:	733b      	strb	r3, [r7, #12]
  str[1] = headerDWIN_L;
 800106e:	23a5      	movs	r3, #165	; 0xa5
 8001070:	737b      	strb	r3, [r7, #13]
  str[2] = 0x05;
 8001072:	2305      	movs	r3, #5
 8001074:	73bb      	strb	r3, [r7, #14]
  str[3] = writeVariable;
 8001076:	2382      	movs	r3, #130	; 0x82
 8001078:	73fb      	strb	r3, [r7, #15]
  str[4] = (adress & 0xFF00)>>8;
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	743b      	strb	r3, [r7, #16]
  str[5] = adress & 0xFF;
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	747b      	strb	r3, [r7, #17]
  str[6] = (data & 0xFF00)>>8;
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	b29b      	uxth	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	74bb      	strb	r3, [r7, #18]
  str[7] = data & 0xFF;
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	74fb      	strb	r3, [r7, #19]

  HAL_UART_Transmit(&DWIN_UART, str, 8,0xFF);    
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	2208      	movs	r2, #8
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <writeHalfWordDWIN+0x64>)
 80010a4:	f003 fdac 	bl	8004c00 <HAL_UART_Transmit>
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000e8 	.word	0x200000e8

080010b4 <dwinAppInit>:
//==============================================================================
//--------------------------------FUNCTIONS-------------------------------------
//==============================================================================

void dwinAppInit()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010b8:	2100      	movs	r1, #0
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <dwinAppInit+0x18>)
 80010bc:	f002 fc4e 	bl	800395c <HAL_TIM_PWM_Start>
	  TIM2->CCR1=0;
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000054 	.word	0x20000054

080010d0 <ledPWM>:

void ledPWM()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	parsingDWIN();
 80010d4:	f7ff ff44 	bl	8000f60 <parsingDWIN>
	readVariableDWIN(0x5006, 1);
 80010d8:	2101      	movs	r1, #1
 80010da:	f245 0006 	movw	r0, #20486	; 0x5006
 80010de:	f7ff ff87 	bl	8000ff0 <readVariableDWIN>
	HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f8ba 	bl	800125c <HAL_Delay>
	parsingDWIN();
 80010e8:	f7ff ff3a 	bl	8000f60 <parsingDWIN>
	adress = ledDataAdress;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <ledPWM+0x90>)
 80010ee:	f245 0206 	movw	r2, #20486	; 0x5006
 80010f2:	801a      	strh	r2, [r3, #0]
	adress_h = ((ledDataAdress & 0xFF00)>>8);
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <ledPWM+0x94>)
 80010f6:	2250      	movs	r2, #80	; 0x50
 80010f8:	701a      	strb	r2, [r3, #0]
	adress_l = ledDataAdress & 0x00FF;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <ledPWM+0x98>)
 80010fc:	2206      	movs	r2, #6
 80010fe:	701a      	strb	r2, [r3, #0]
	if (((readDataDWIN.parsingDataDWIN.data[0] == (ledDataAdress & 0xFF00)>>8)) && (readDataDWIN.parsingDataDWIN.data[1] == (ledDataAdress & 0x00F))) // Checking for address match
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <ledPWM+0x9c>)
 8001102:	f893 34c0 	ldrb.w	r3, [r3, #1216]	; 0x4c0
 8001106:	2b50      	cmp	r3, #80	; 0x50
 8001108:	d128      	bne.n	800115c <ledPWM+0x8c>
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <ledPWM+0x9c>)
 800110c:	f893 34c1 	ldrb.w	r3, [r3, #1217]	; 0x4c1
 8001110:	2b06      	cmp	r3, #6
 8001112:	d123      	bne.n	800115c <ledPWM+0x8c>
	{
		PWMData = readDataDWIN.parsingDataDWIN.data[3]<<8 | readDataDWIN.parsingDataDWIN.data[4];
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <ledPWM+0x9c>)
 8001116:	f893 34c3 	ldrb.w	r3, [r3, #1219]	; 0x4c3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <ledPWM+0x9c>)
 800111e:	f892 24c4 	ldrb.w	r2, [r2, #1220]	; 0x4c4
 8001122:	4313      	orrs	r3, r2
 8001124:	461a      	mov	r2, r3
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <ledPWM+0xa0>)
 8001128:	601a      	str	r2, [r3, #0]
		if (PWMData >= 50)
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <ledPWM+0xa0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b31      	cmp	r3, #49	; 0x31
 8001130:	d910      	bls.n	8001154 <ledPWM+0x84>
		{
			PWMData = ((PWMData - 49) * 2000);
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <ledPWM+0xa0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	f5a3 33bf 	sub.w	r3, r3, #97792	; 0x17e00
 8001142:	3bd0      	subs	r3, #208	; 0xd0
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <ledPWM+0xa0>)
 8001146:	6013      	str	r3, [r2, #0]
			TIM2->CCR1 = PWMData;
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <ledPWM+0xa0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6353      	str	r3, [r2, #52]	; 0x34
		else
		{
			TIM2->CCR1 = 0;
		}
	}
}
 8001152:	e003      	b.n	800115c <ledPWM+0x8c>
			TIM2->CCR1 = 0;
 8001154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000002c 	.word	0x2000002c
 8001164:	2000076e 	.word	0x2000076e
 8001168:	2000076f 	.word	0x2000076f
 800116c:	200001b4 	.word	0x200001b4
 8001170:	20000028 	.word	0x20000028

08001174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f000 f960 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f80d 	bl	80011a4 <HAL_InitTick>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e001      	b.n	800119a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001196:	f7ff fb03 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119a:	79fb      	ldrb	r3, [r7, #7]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d023      	beq.n	8001200 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_InitTick+0x70>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f96d 	bl	80014ae <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10f      	bne.n	80011fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d809      	bhi.n	80011f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f937 	bl	800145a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_InitTick+0x74>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e007      	b.n	8001204 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e004      	b.n	8001204 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e001      	b.n	8001204 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000770 	.word	0x20000770

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000770 	.word	0x20000770

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e098      	b.n	800160c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <HAL_DMA_Init+0x150>)
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d80f      	bhi.n	8001506 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_DMA_Init+0x154>)
 80014ee:	4413      	add	r3, r2
 80014f0:	4a4b      	ldr	r2, [pc, #300]	; (8001620 <HAL_DMA_Init+0x158>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	009a      	lsls	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_DMA_Init+0x15c>)
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
 8001504:	e00e      	b.n	8001524 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_DMA_Init+0x160>)
 800150e:	4413      	add	r3, r2
 8001510:	4a43      	ldr	r2, [pc, #268]	; (8001620 <HAL_DMA_Init+0x158>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	009a      	lsls	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a42      	ldr	r2, [pc, #264]	; (800162c <HAL_DMA_Init+0x164>)
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800153a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800153e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800157e:	d039      	beq.n	80015f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a27      	ldr	r2, [pc, #156]	; (8001624 <HAL_DMA_Init+0x15c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d11a      	bne.n	80015c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_DMA_Init+0x168>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 031c 	and.w	r3, r3, #28
 8001596:	210f      	movs	r1, #15
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4924      	ldr	r1, [pc, #144]	; (8001630 <HAL_DMA_Init+0x168>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_DMA_Init+0x168>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	f003 031c 	and.w	r3, r3, #28
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	491d      	ldr	r1, [pc, #116]	; (8001630 <HAL_DMA_Init+0x168>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
 80015be:	e019      	b.n	80015f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_DMA_Init+0x16c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 031c 	and.w	r3, r3, #28
 80015cc:	210f      	movs	r1, #15
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	4917      	ldr	r1, [pc, #92]	; (8001634 <HAL_DMA_Init+0x16c>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_DMA_Init+0x16c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 031c 	and.w	r3, r3, #28
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	4911      	ldr	r1, [pc, #68]	; (8001634 <HAL_DMA_Init+0x16c>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40020407 	.word	0x40020407
 800161c:	bffdfff8 	.word	0xbffdfff8
 8001620:	cccccccd 	.word	0xcccccccd
 8001624:	40020000 	.word	0x40020000
 8001628:	bffdfbf8 	.word	0xbffdfbf8
 800162c:	40020400 	.word	0x40020400
 8001630:	400200a8 	.word	0x400200a8
 8001634:	400204a8 	.word	0x400204a8

08001638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_DMA_Start_IT+0x20>
 8001654:	2302      	movs	r3, #2
 8001656:	e04b      	b.n	80016f0 <HAL_DMA_Start_IT+0xb8>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d13a      	bne.n	80016e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f95f 	bl	8001954 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 020e 	orr.w	r2, r2, #14
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00f      	b.n	80016d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0204 	bic.w	r2, r2, #4
 80016be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 020a 	orr.w	r2, r2, #10
 80016ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e005      	b.n	80016ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016ea:	2302      	movs	r3, #2
 80016ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d008      	beq.n	8001722 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2204      	movs	r2, #4
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e022      	b.n	8001768 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 020e 	bic.w	r2, r2, #14
 8001730:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 021c 	and.w	r2, r3, #28
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d005      	beq.n	8001798 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2204      	movs	r2, #4
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e029      	b.n	80017ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020e 	bic.w	r2, r2, #14
 80017a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	f003 021c 	and.w	r2, r3, #28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
    }
  }
  return status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f003 031c 	and.w	r3, r3, #28
 8001816:	2204      	movs	r2, #4
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d026      	beq.n	8001870 <HAL_DMA_IRQHandler+0x7a>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d021      	beq.n	8001870 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0204 	bic.w	r2, r2, #4
 8001848:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f003 021c 	and.w	r2, r3, #28
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2104      	movs	r1, #4
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d071      	beq.n	800194a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800186e:	e06c      	b.n	800194a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f003 031c 	and.w	r3, r3, #28
 8001878:	2202      	movs	r2, #2
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02e      	beq.n	80018e2 <HAL_DMA_IRQHandler+0xec>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d029      	beq.n	80018e2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10b      	bne.n	80018b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 020a 	bic.w	r2, r2, #10
 80018aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	f003 021c 	and.w	r2, r3, #28
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2102      	movs	r1, #2
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d038      	beq.n	800194a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018e0:	e033      	b.n	800194a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f003 031c 	and.w	r3, r3, #28
 80018ea:	2208      	movs	r2, #8
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d02a      	beq.n	800194c <HAL_DMA_IRQHandler+0x156>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d025      	beq.n	800194c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020e 	bic.w	r2, r2, #14
 800190e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f003 021c 	and.w	r2, r3, #28
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800194a:	bf00      	nop
 800194c:	bf00      	nop
}
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f003 021c 	and.w	r2, r3, #28
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d108      	bne.n	8001998 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001996:	e007      	b.n	80019a8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e17f      	b.n	8001cc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8171 	beq.w	8001cbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d00b      	beq.n	80019fc <HAL_GPIO_Init+0x48>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f0:	2b11      	cmp	r3, #17
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b12      	cmp	r3, #18
 80019fa:	d130      	bne.n	8001a5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a32:	2201      	movs	r2, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	f003 0201 	and.w	r2, r3, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d118      	bne.n	8001a9c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a70:	2201      	movs	r2, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f003 0201 	and.w	r2, r3, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x128>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b12      	cmp	r3, #18
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	6939      	ldr	r1, [r7, #16]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ac 	beq.w	8001cbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	4a5e      	ldr	r2, [pc, #376]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6613      	str	r3, [r2, #96]	; 0x60
 8001b72:	4b5c      	ldr	r3, [pc, #368]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x242>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x338>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x23e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <HAL_GPIO_Init+0x33c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x23a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x340>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x236>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x344>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x232>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_GPIO_Init+0x348>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x22e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x34c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x22a>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x244>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3a:	4a32      	ldr	r2, [pc, #200]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f47f ae78 	bne.w	80019c4 <HAL_GPIO_Init+0x10>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	48000c00 	.word	0x48000c00
 8001cf8:	48001000 	.word	0x48001000
 8001cfc:	48001400 	.word	0x48001400
 8001d00:	48001800 	.word	0x48001800
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40007000 	.word	0x40007000

08001d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d52:	d130      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d038      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2232      	movs	r2, #50	; 0x32
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d88:	e002      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d102      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f2      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db0:	d110      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d007      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e3d4      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e02:	4ba1      	ldr	r3, [pc, #644]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0c:	4b9e      	ldr	r3, [pc, #632]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80e4 	beq.w	8001fec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4a>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	f040 808b 	bne.w	8001f48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 8087 	bne.w	8001f48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3a:	4b93      	ldr	r3, [pc, #588]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x62>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e3ac      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_RCC_OscConfig+0x7c>
 8001e62:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	e005      	b.n	8001e78 <HAL_RCC_OscConfig+0x88>
 8001e6c:	4b86      	ldr	r3, [pc, #536]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d223      	bcs.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fd41 	bl	8002908 <RCC_SetFlashLatencyFromMSIRange>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e38d      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e90:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7c      	ldr	r2, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4977      	ldr	r1, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4972      	ldr	r1, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e025      	b.n	8001f10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec4:	4b70      	ldr	r3, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6f      	ldr	r2, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	496a      	ldr	r1, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee2:	4b69      	ldr	r3, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	4965      	ldr	r1, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fd01 	bl	8002908 <RCC_SetFlashLatencyFromMSIRange>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e34d      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f10:	f000 fc36 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	495a      	ldr	r1, [pc, #360]	; (800208c <HAL_RCC_OscConfig+0x29c>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_OscConfig+0x2a0>)
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f935 	bl	80011a4 <HAL_InitTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d052      	beq.n	8001fea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	e331      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d032      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f50:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f972 	bl	8001244 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f64:	f7ff f96e 	bl	8001244 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e31a      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f76:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a40      	ldr	r2, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	493b      	ldr	r1, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa0:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	4936      	ldr	r1, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e01a      	b.n	8001fec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a33      	ldr	r2, [pc, #204]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f93f 	bl	8001244 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fca:	f7ff f93b 	bl	8001244 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e2e7      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x1da>
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d074      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x21a>
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d10e      	bne.n	8002022 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d064      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d160      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e2c4      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x24a>
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e01d      	b.n	8002076 <HAL_RCC_OscConfig+0x286>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002042:	d10c      	bne.n	800205e <HAL_RCC_OscConfig+0x26e>
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 800204a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e00b      	b.n	8002076 <HAL_RCC_OscConfig+0x286>
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_RCC_OscConfig+0x298>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7ff f8e1 	bl	8001244 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002084:	e011      	b.n	80020aa <HAL_RCC_OscConfig+0x2ba>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	08005d90 	.word	0x08005d90
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff f8d4 	bl	8001244 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e280      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020aa:	4baf      	ldr	r3, [pc, #700]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x2a8>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8c4 	bl	8001244 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f8c0 	bl	8001244 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e26c      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	4ba5      	ldr	r3, [pc, #660]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2d0>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d060      	beq.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x310>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d119      	bne.n	800212e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d116      	bne.n	800212e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002100:	4b99      	ldr	r3, [pc, #612]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x328>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e249      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b93      	ldr	r3, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4990      	ldr	r1, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212c:	e040      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d023      	beq.n	800217e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002136:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a8b      	ldr	r2, [pc, #556]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7ff f87f 	bl	8001244 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff f87b 	bl	8001244 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e227      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215c:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	497c      	ldr	r1, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e018      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a79      	ldr	r2, [pc, #484]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff f85b 	bl	8001244 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff f857 	bl	8001244 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e203      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a4:	4b70      	ldr	r3, [pc, #448]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03c      	beq.n	8002236 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ca:	4a67      	ldr	r2, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f836 	bl	8001244 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f832 	bl	8001244 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1de      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ee:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80021f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCC_OscConfig+0x3ec>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7ff f819 	bl	8001244 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7ff f815 	bl	8001244 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1c1      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002228:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ef      	bne.n	8002216 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80a6 	beq.w	8002390 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	6593      	str	r3, [r2, #88]	; 0x58
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226c:	2301      	movs	r3, #1
 800226e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCC_OscConfig+0x57c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d118      	bne.n	80022ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x57c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a3a      	ldr	r2, [pc, #232]	; (800236c <HAL_RCC_OscConfig+0x57c>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002288:	f7fe ffdc 	bl	8001244 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7fe ffd8 	bl	8001244 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e184      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a2:	4b32      	ldr	r3, [pc, #200]	; (800236c <HAL_RCC_OscConfig+0x57c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d8>
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c6:	e024      	b.n	8002312 <HAL_RCC_OscConfig+0x522>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d110      	bne.n	80022f2 <HAL_RCC_OscConfig+0x502>
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	4a24      	ldr	r2, [pc, #144]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	4a20      	ldr	r2, [pc, #128]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f0:	e00f      	b.n	8002312 <HAL_RCC_OscConfig+0x522>
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800230a:	f023 0304 	bic.w	r3, r3, #4
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe ff93 	bl	8001244 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe ff8f 	bl	8001244 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e139      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x578>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ed      	beq.n	8002322 <HAL_RCC_OscConfig+0x532>
 8002346:	e01a      	b.n	800237e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe ff7c 	bl	8001244 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe ff78 	bl	8001244 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d906      	bls.n	8002370 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e122      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	4b90      	ldr	r3, [pc, #576]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e8      	bne.n	8002350 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237e:	7ffb      	ldrb	r3, [r7, #31]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a8a      	ldr	r2, [pc, #552]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8108 	beq.w	80025aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	2b02      	cmp	r3, #2
 80023a0:	f040 80d0 	bne.w	8002544 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d130      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	3b01      	subs	r3, #1
 80023c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d127      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11f      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e4:	2a07      	cmp	r2, #7
 80023e6:	bf14      	ite	ne
 80023e8:	2201      	movne	r2, #1
 80023ea:	2200      	moveq	r2, #0
 80023ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d113      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	3b01      	subs	r3, #1
 8002400:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d109      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d06e      	beq.n	80024f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d069      	beq.n	80024f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002420:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b7      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002446:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002448:	f7fe fefc 	bl	8001244 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fef8 	bl	8001244 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e0a4      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002462:	4b54      	ldr	r3, [pc, #336]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x7c8>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800247e:	3a01      	subs	r2, #1
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002488:	0212      	lsls	r2, r2, #8
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002490:	0852      	lsrs	r2, r2, #1
 8002492:	3a01      	subs	r2, #1
 8002494:	0552      	lsls	r2, r2, #21
 8002496:	4311      	orrs	r1, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800249c:	0852      	lsrs	r2, r2, #1
 800249e:	3a01      	subs	r2, #1
 80024a0:	0652      	lsls	r2, r2, #25
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a8:	0912      	lsrs	r2, r2, #4
 80024aa:	0452      	lsls	r2, r2, #17
 80024ac:	430a      	orrs	r2, r1
 80024ae:	4941      	ldr	r1, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b4:	4b3f      	ldr	r3, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c0:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024cc:	f7fe feba 	bl	8001244 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe feb6 	bl	8001244 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e062      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f2:	e05a      	b.n	80025aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e059      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d152      	bne.n	80025aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800251c:	f7fe fe92 	bl	8001244 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fe8e 	bl	8001244 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e03a      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x734>
 8002542:	e032      	b.n	80025aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d02d      	beq.n	80025a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002554:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002568:	f023 0303 	bic.w	r3, r3, #3
 800256c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 8002574:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fe61 	bl	8001244 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fe5d 	bl	8001244 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e009      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_OscConfig+0x7c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x796>
 80025a4:	e001      	b.n	80025aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	f99d808c 	.word	0xf99d808c

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0c8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4961      	ldr	r1, [pc, #388]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d04c      	beq.n	80026a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d107      	bne.n	8002624 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002614:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d121      	bne.n	8002664 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e09e      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d107      	bne.n	800263c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d115      	bne.n	8002664 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e092      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e086      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e07e      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 0203 	bic.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	493f      	ldr	r1, [pc, #252]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002676:	f7fe fde5 	bl	8001244 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267c:	e00a      	b.n	8002694 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fde1 	bl	8001244 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e066      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002694:	4b36      	ldr	r3, [pc, #216]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 020c 	and.w	r2, r3, #12
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d1eb      	bne.n	800267e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	492c      	ldr	r1, [pc, #176]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4924      	ldr	r1, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1b0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e036      	b.n	8002762 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4918      	ldr	r1, [pc, #96]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4910      	ldr	r1, [pc, #64]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002732:	f000 f825 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_ClockConfig+0x1b4>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490c      	ldr	r1, [pc, #48]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fd24 	bl	80011a4 <HAL_InitTick>
 800275c:	4603      	mov	r3, r0
 800275e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002760:	7afb      	ldrb	r3, [r7, #11]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	08005d90 	.word	0x08005d90
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d121      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d11e      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027b4:	4b34      	ldr	r3, [pc, #208]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e005      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027dc:	4a2b      	ldr	r2, [pc, #172]	; (800288c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_GetSysClockFreq+0x110>)
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	e004      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d101      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_RCC_GetSysClockFreq+0x114>)
 8002806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d134      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0xa6>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d003      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0xac>
 8002824:	e005      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_GetSysClockFreq+0x110>)
 8002828:	617b      	str	r3, [r7, #20]
      break;
 800282a:	e005      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_GetSysClockFreq+0x114>)
 800282e:	617b      	str	r3, [r7, #20]
      break;
 8002830:	e002      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	617b      	str	r3, [r7, #20]
      break;
 8002836:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	3301      	adds	r3, #1
 8002844:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	0e5b      	lsrs	r3, r3, #25
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	3301      	adds	r3, #1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002878:	69bb      	ldr	r3, [r7, #24]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	08005da8 	.word	0x08005da8
 8002890:	00f42400 	.word	0x00f42400
 8002894:	007a1200 	.word	0x007a1200

08002898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028b4:	f7ff fff0 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08005da0 	.word	0x08005da0

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028e0:	f7ff ffda 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0adb      	lsrs	r3, r3, #11
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4904      	ldr	r1, [pc, #16]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	08005da0 	.word	0x08005da0

08002908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002920:	f7ff fa02 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 8002924:	6178      	str	r0, [r7, #20]
 8002926:	e014      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002940:	f7ff f9f2 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 8002944:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002958:	d10b      	bne.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d919      	bls.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2ba0      	cmp	r3, #160	; 0xa0
 8002964:	d902      	bls.n	800296c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002966:	2302      	movs	r3, #2
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e013      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800296c:	2301      	movs	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e010      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d902      	bls.n	800297e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002978:	2303      	movs	r3, #3
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	e00a      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d102      	bne.n	800298a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002984:	2302      	movs	r3, #2
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	e004      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b70      	cmp	r3, #112	; 0x70
 800298e:	d101      	bne.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 0207 	bic.w	r2, r3, #7
 800299c:	4909      	ldr	r1, [pc, #36]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40022000 	.word	0x40022000

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d0:	2300      	movs	r3, #0
 80029d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d041      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ec:	d02a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029f2:	d824      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029fe:	d81e      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a08:	d010      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a0c:	4b86      	ldr	r3, [pc, #536]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a85      	ldr	r2, [pc, #532]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a18:	e015      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fabb 	bl	8002f9c <RCCEx_PLLSAI1_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2a:	e00c      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3320      	adds	r3, #32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fba6 	bl	8003184 <RCCEx_PLLSAI2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a3c:	e003      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	74fb      	strb	r3, [r7, #19]
      break;
 8002a42:	e000      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4c:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5a:	4973      	ldr	r1, [pc, #460]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a62:	e001      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d041      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a82:	d824      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8e:	d81e      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a9a:	e018      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9c:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fa73 	bl	8002f9c <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aba:	e00c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3320      	adds	r3, #32
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fb5e 	bl	8003184 <RCCEx_PLLSAI2_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aea:	494f      	ldr	r1, [pc, #316]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a0 	beq.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	4a40      	ldr	r2, [pc, #256]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3a      	ldr	r2, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b48:	f7fe fb7c 	bl	8001244 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b4e:	e009      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe fb78 	bl	8001244 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	74fb      	strb	r3, [r7, #19]
        break;
 8002b62:	e005      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ef      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d15c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01f      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d019      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bc0:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fb37 	bl	8001244 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fb33 	bl	8001244 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	74fb      	strb	r3, [r7, #19]
            break;
 8002bf0:	e006      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ec      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c16:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c1e:	e009      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
 8002c24:	e006      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c34:	7c7b      	ldrb	r3, [r7, #17]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b9e      	ldr	r3, [pc, #632]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4a9d      	ldr	r2, [pc, #628]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c52:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f023 0203 	bic.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	4994      	ldr	r1, [pc, #592]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c74:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 020c 	bic.w	r2, r3, #12
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	498c      	ldr	r1, [pc, #560]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c96:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	4983      	ldr	r1, [pc, #524]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb8:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	497b      	ldr	r1, [pc, #492]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	4972      	ldr	r1, [pc, #456]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfc:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	496a      	ldr	r1, [pc, #424]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	4961      	ldr	r1, [pc, #388]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d40:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	4959      	ldr	r1, [pc, #356]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d62:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	4950      	ldr	r1, [pc, #320]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	4948      	ldr	r1, [pc, #288]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	493f      	ldr	r1, [pc, #252]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d028      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd6:	4937      	ldr	r1, [pc, #220]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de6:	d106      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de8:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a31      	ldr	r2, [pc, #196]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df2:	60d3      	str	r3, [r2, #12]
 8002df4:	e011      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f8c8 	bl	8002f9c <RCCEx_PLLSAI1_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d028      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	491f      	ldr	r1, [pc, #124]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e44:	d106      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e50:	60d3      	str	r3, [r2, #12]
 8002e52:	e011      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f899 	bl	8002f9c <RCCEx_PLLSAI1_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02b      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea2:	d109      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a02      	ldr	r2, [pc, #8]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eae:	60d3      	str	r3, [r2, #12]
 8002eb0:	e014      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f867 	bl	8002f9c <RCCEx_PLLSAI1_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d02f      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	4928      	ldr	r1, [pc, #160]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f844 	bl	8002f9c <RCCEx_PLLSAI1_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d014      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	74bb      	strb	r3, [r7, #18]
 8002f22:	e011      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3320      	adds	r3, #32
 8002f32:	2102      	movs	r1, #2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f925 	bl	8003184 <RCCEx_PLLSAI2_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	490d      	ldr	r1, [pc, #52]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	4904      	ldr	r1, [pc, #16]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000

08002f9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002faa:	4b75      	ldr	r3, [pc, #468]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d10d      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fce:	4b6c      	ldr	r3, [pc, #432]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d047      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e044      	b.n	8003072 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d018      	beq.n	8003022 <RCCEx_PLLSAI1_Config+0x86>
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d825      	bhi.n	8003040 <RCCEx_PLLSAI1_Config+0xa4>
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d002      	beq.n	8002ffe <RCCEx_PLLSAI1_Config+0x62>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d009      	beq.n	8003010 <RCCEx_PLLSAI1_Config+0x74>
 8002ffc:	e020      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11d      	bne.n	8003046 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300e:	e01a      	b.n	8003046 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003020:	e013      	b.n	800304a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003022:	4b57      	ldr	r3, [pc, #348]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800303e:	e006      	b.n	800304e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e004      	b.n	8003050 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003046:	bf00      	nop
 8003048:	e002      	b.n	8003050 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800304e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	430b      	orrs	r3, r1
 800306c:	4944      	ldr	r1, [pc, #272]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d17d      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003078:	4b41      	ldr	r3, [pc, #260]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a40      	ldr	r2, [pc, #256]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fe f8de 	bl	8001244 <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800308a:	e009      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800308c:	f7fe f8da 	bl	8001244 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	73fb      	strb	r3, [r7, #15]
        break;
 800309e:	e005      	b.n	80030ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ef      	bne.n	800308c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d160      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	0211      	lsls	r1, r2, #8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	0912      	lsrs	r2, r2, #4
 80030d0:	0452      	lsls	r2, r2, #17
 80030d2:	430a      	orrs	r2, r1
 80030d4:	492a      	ldr	r1, [pc, #168]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]
 80030da:	e027      	b.n	800312c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d112      	bne.n	8003108 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	0211      	lsls	r1, r2, #8
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6912      	ldr	r2, [r2, #16]
 80030f8:	0852      	lsrs	r2, r2, #1
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0552      	lsls	r2, r2, #21
 80030fe:	430a      	orrs	r2, r1
 8003100:	491f      	ldr	r1, [pc, #124]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]
 8003106:	e011      	b.n	800312c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003110:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	0211      	lsls	r1, r2, #8
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6952      	ldr	r2, [r2, #20]
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0652      	lsls	r2, r2, #25
 8003124:	430a      	orrs	r2, r1
 8003126:	4916      	ldr	r1, [pc, #88]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003136:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe f884 	bl	8001244 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003140:	f7fe f880 	bl	8001244 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
          break;
 8003152:	e005      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ef      	beq.n	8003140 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4904      	ldr	r1, [pc, #16]	; (8003180 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000

08003184 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003192:	4b6a      	ldr	r3, [pc, #424]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0203 	and.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10d      	bne.n	80031ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
       ||
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031b6:	4b61      	ldr	r3, [pc, #388]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
       ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d047      	beq.n	800325a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e044      	b.n	800325a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d018      	beq.n	800320a <RCCEx_PLLSAI2_Config+0x86>
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d825      	bhi.n	8003228 <RCCEx_PLLSAI2_Config+0xa4>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d002      	beq.n	80031e6 <RCCEx_PLLSAI2_Config+0x62>
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d009      	beq.n	80031f8 <RCCEx_PLLSAI2_Config+0x74>
 80031e4:	e020      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031e6:	4b55      	ldr	r3, [pc, #340]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11d      	bne.n	800322e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f6:	e01a      	b.n	800322e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f8:	4b50      	ldr	r3, [pc, #320]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d116      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003208:	e013      	b.n	8003232 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800320a:	4b4c      	ldr	r3, [pc, #304]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003216:	4b49      	ldr	r3, [pc, #292]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003226:	e006      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e004      	b.n	8003238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003236:	bf00      	nop
    }

    if(status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800323e:	4b3f      	ldr	r3, [pc, #252]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	430b      	orrs	r3, r1
 8003254:	4939      	ldr	r1, [pc, #228]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d167      	bne.n	8003330 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a35      	ldr	r2, [pc, #212]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fd ffea 	bl	8001244 <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003272:	e009      	b.n	8003288 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003274:	f7fd ffe6 	bl	8001244 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d902      	bls.n	8003288 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	73fb      	strb	r3, [r7, #15]
        break;
 8003286:	e005      	b.n	8003294 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ef      	bne.n	8003274 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d14a      	bne.n	8003330 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d111      	bne.n	80032c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	0211      	lsls	r1, r2, #8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68d2      	ldr	r2, [r2, #12]
 80032b6:	0912      	lsrs	r2, r2, #4
 80032b8:	0452      	lsls	r2, r2, #17
 80032ba:	430a      	orrs	r2, r1
 80032bc:	491f      	ldr	r1, [pc, #124]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	614b      	str	r3, [r1, #20]
 80032c2:	e011      	b.n	80032e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c4:	4b1d      	ldr	r3, [pc, #116]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6892      	ldr	r2, [r2, #8]
 80032d4:	0211      	lsls	r1, r2, #8
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6912      	ldr	r2, [r2, #16]
 80032da:	0852      	lsrs	r2, r2, #1
 80032dc:	3a01      	subs	r2, #1
 80032de:	0652      	lsls	r2, r2, #25
 80032e0:	430a      	orrs	r2, r1
 80032e2:	4916      	ldr	r1, [pc, #88]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd ffa6 	bl	8001244 <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032fa:	e009      	b.n	8003310 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032fc:	f7fd ffa2 	bl	8001244 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d902      	bls.n	8003310 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	73fb      	strb	r3, [r7, #15]
          break;
 800330e:	e005      	b.n	800331c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ef      	beq.n	80032fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4904      	ldr	r1, [pc, #16]	; (800333c <RCCEx_PLLSAI2_Config+0x1b8>)
 800332c:	4313      	orrs	r3, r2
 800332e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d06c      	beq.n	800342c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd f9e8 	bl	800073c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	22ca      	movs	r2, #202	; 0xca
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2253      	movs	r2, #83	; 0x53
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f9a0 	bl	80036ca <RTC_EnterInitMode>
 800338a:	4603      	mov	r3, r0
 800338c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d14b      	bne.n	800342c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6899      	ldr	r1, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68d2      	ldr	r2, [r2, #12]
 80033ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6919      	ldr	r1, [r3, #16]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f9a3 	bl	8003730 <RTC_ExitInitMode>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11b      	bne.n	800342c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0203 	bic.w	r2, r2, #3
 8003402:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	22ff      	movs	r2, #255	; 0xff
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003436:	b590      	push	{r4, r7, lr}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_RTC_SetTime+0x1a>
 800344c:	2302      	movs	r3, #2
 800344e:	e08b      	b.n	8003568 <HAL_RTC_SetTime+0x132>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	22ca      	movs	r2, #202	; 0xca
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2253      	movs	r2, #83	; 0x53
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f92a 	bl	80036ca <RTC_EnterInitMode>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d163      	bne.n	8003548 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d126      	bne.n	80034d4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f984 	bl	80037ac <RTC_ByteToBcd2>
 80034a4:	4603      	mov	r3, r0
 80034a6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f97d 	bl	80037ac <RTC_ByteToBcd2>
 80034b2:	4603      	mov	r3, r0
 80034b4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034b6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	789b      	ldrb	r3, [r3, #2]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f975 	bl	80037ac <RTC_ByteToBcd2>
 80034c2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034c4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	78db      	ldrb	r3, [r3, #3]
 80034cc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e018      	b.n	8003506 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2200      	movs	r2, #0
 80034e6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034f4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034fa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003510:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003514:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003524:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6899      	ldr	r1, [r3, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f8f6 	bl	8003730 <RTC_ExitInitMode>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003566:	7cfb      	ldrb	r3, [r7, #19]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_RTC_SetDate+0x1a>
 8003586:	2302      	movs	r3, #2
 8003588:	e075      	b.n	8003676 <HAL_RTC_SetDate+0x106>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <HAL_RTC_SetDate+0x4e>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	f023 0310 	bic.w	r3, r3, #16
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	330a      	adds	r3, #10
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11c      	bne.n	80035fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	78db      	ldrb	r3, [r3, #3]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f8ef 	bl	80037ac <RTC_ByteToBcd2>
 80035ce:	4603      	mov	r3, r0
 80035d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f8e8 	bl	80037ac <RTC_ByteToBcd2>
 80035dc:	4603      	mov	r3, r0
 80035de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	789b      	ldrb	r3, [r3, #2]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f8e0 	bl	80037ac <RTC_ByteToBcd2>
 80035ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e00e      	b.n	800361c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	78db      	ldrb	r3, [r3, #3]
 8003602:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800360a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003610:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	22ca      	movs	r2, #202	; 0xca
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2253      	movs	r2, #83	; 0x53
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f84c 	bl	80036ca <RTC_EnterInitMode>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10c      	bne.n	8003656 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003646:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800364a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f86f 	bl	8003730 <RTC_ExitInitMode>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	22ff      	movs	r2, #255	; 0xff
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
}
 8003676:	4618      	mov	r0, r3
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}

0800367e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003694:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003696:	f7fd fdd5 	bl	8001244 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800369c:	e009      	b.n	80036b2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800369e:	f7fd fdd1 	bl	8001244 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ac:	d901      	bls.n	80036b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e007      	b.n	80036c2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d120      	bne.n	8003726 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80036ee:	f7fd fda9 	bl	8001244 <HAL_GetTick>
 80036f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036f4:	e00d      	b.n	8003712 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80036f6:	f7fd fda5 	bl	8001244 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003704:	d905      	bls.n	8003712 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <RTC_EnterInitMode+0x5c>
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d1e7      	bne.n	80036f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <RTC_ExitInitMode+0x78>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <RTC_ExitInitMode+0x78>)
 8003742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003746:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <RTC_ExitInitMode+0x78>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10c      	bne.n	800376e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff92 	bl	800367e <HAL_RTC_WaitForSynchro>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01e      	beq.n	800379e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2203      	movs	r2, #3
 8003764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e017      	b.n	800379e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <RTC_ExitInitMode+0x78>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <RTC_ExitInitMode+0x78>)
 8003774:	f023 0320 	bic.w	r3, r3, #32
 8003778:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff7f 	bl	800367e <HAL_RTC_WaitForSynchro>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <RTC_ExitInitMode+0x78>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <RTC_ExitInitMode+0x78>)
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40002800 	.word	0x40002800

080037ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80037be:	e005      	b.n	80037cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	3b0a      	subs	r3, #10
 80037ca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80037cc:	7afb      	ldrb	r3, [r7, #11]
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	d8f6      	bhi.n	80037c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	7afb      	ldrb	r3, [r7, #11]
 80037dc:	4313      	orrs	r3, r2
 80037de:	b2db      	uxtb	r3, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e049      	b.n	8003892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd f8e2 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f000 fcc4 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e049      	b.n	8003940 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f841 	bl	8003948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 fc6d 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_TIM_PWM_Start+0x24>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e03c      	b.n	80039fa <HAL_TIM_PWM_Start+0x9e>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d109      	bne.n	800399a <HAL_TIM_PWM_Start+0x3e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e02f      	b.n	80039fa <HAL_TIM_PWM_Start+0x9e>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d109      	bne.n	80039b4 <HAL_TIM_PWM_Start+0x58>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e022      	b.n	80039fa <HAL_TIM_PWM_Start+0x9e>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d109      	bne.n	80039ce <HAL_TIM_PWM_Start+0x72>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e015      	b.n	80039fa <HAL_TIM_PWM_Start+0x9e>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d109      	bne.n	80039e8 <HAL_TIM_PWM_Start+0x8c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	bf14      	ite	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	2300      	moveq	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e008      	b.n	80039fa <HAL_TIM_PWM_Start+0x9e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e09c      	b.n	8003b3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start+0xb6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a10:	e023      	b.n	8003a5a <HAL_TIM_PWM_Start+0xfe>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0xc6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	e01b      	b.n	8003a5a <HAL_TIM_PWM_Start+0xfe>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0xd6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a30:	e013      	b.n	8003a5a <HAL_TIM_PWM_Start+0xfe>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xe6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a40:	e00b      	b.n	8003a5a <HAL_TIM_PWM_Start+0xfe>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d104      	bne.n	8003a52 <HAL_TIM_PWM_Start+0xf6>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a50:	e003      	b.n	8003a5a <HAL_TIM_PWM_Start+0xfe>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	6839      	ldr	r1, [r7, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ffb2 	bl	80049cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <HAL_TIM_PWM_Start+0x1e8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x13e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <HAL_TIM_PWM_Start+0x1ec>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x13e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a32      	ldr	r2, [pc, #200]	; (8003b4c <HAL_TIM_PWM_Start+0x1f0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x13e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a31      	ldr	r2, [pc, #196]	; (8003b50 <HAL_TIM_PWM_Start+0x1f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x13e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2f      	ldr	r2, [pc, #188]	; (8003b54 <HAL_TIM_PWM_Start+0x1f8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x142>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_PWM_Start+0x144>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <HAL_TIM_PWM_Start+0x1e8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01d      	beq.n	8003afa <HAL_TIM_PWM_Start+0x19e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d018      	beq.n	8003afa <HAL_TIM_PWM_Start+0x19e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <HAL_TIM_PWM_Start+0x1fc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_TIM_PWM_Start+0x19e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <HAL_TIM_PWM_Start+0x200>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_TIM_PWM_Start+0x19e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_TIM_PWM_Start+0x204>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_TIM_PWM_Start+0x19e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIM_PWM_Start+0x1ec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_TIM_PWM_Start+0x19e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <HAL_TIM_PWM_Start+0x1f0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d115      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_TIM_PWM_Start+0x208>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d015      	beq.n	8003b38 <HAL_TIM_PWM_Start+0x1dc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d011      	beq.n	8003b38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b24:	e008      	b.n	8003b38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e000      	b.n	8003b3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	00010007 	.word	0x00010007

08003b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0202 	mvn.w	r2, #2
 8003b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fae6 	bl	800417c <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fad8 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fae9 	bl	8004190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0204 	mvn.w	r2, #4
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fabc 	bl	800417c <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 faae 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fabf 	bl	8004190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0208 	mvn.w	r2, #8
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa92 	bl	800417c <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa84 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fa95 	bl	8004190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0210 	mvn.w	r2, #16
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2208      	movs	r2, #8
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa68 	bl	800417c <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa5a 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fa6b 	bl	8004190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa34 	bl	8004154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 ff12 	bl	8004b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 ff05 	bl	8004b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d10e      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fa19 	bl	80041a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d10e      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d107      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f06f 0220 	mvn.w	r2, #32
 8003d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fec5 	bl	8004b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0fd      	b.n	8003fbe <HAL_TIM_PWM_ConfigChannel+0x216>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b14      	cmp	r3, #20
 8003dce:	f200 80f0 	bhi.w	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003dd2:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003fb3 	.word	0x08003fb3
 8003de0:	08003fb3 	.word	0x08003fb3
 8003de4:	08003fb3 	.word	0x08003fb3
 8003de8:	08003e6d 	.word	0x08003e6d
 8003dec:	08003fb3 	.word	0x08003fb3
 8003df0:	08003fb3 	.word	0x08003fb3
 8003df4:	08003fb3 	.word	0x08003fb3
 8003df8:	08003eaf 	.word	0x08003eaf
 8003dfc:	08003fb3 	.word	0x08003fb3
 8003e00:	08003fb3 	.word	0x08003fb3
 8003e04:	08003fb3 	.word	0x08003fb3
 8003e08:	08003eef 	.word	0x08003eef
 8003e0c:	08003fb3 	.word	0x08003fb3
 8003e10:	08003fb3 	.word	0x08003fb3
 8003e14:	08003fb3 	.word	0x08003fb3
 8003e18:	08003f31 	.word	0x08003f31
 8003e1c:	08003fb3 	.word	0x08003fb3
 8003e20:	08003fb3 	.word	0x08003fb3
 8003e24:	08003fb3 	.word	0x08003fb3
 8003e28:	08003f71 	.word	0x08003f71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa5a 	bl	80042ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	619a      	str	r2, [r3, #24]
      break;
 8003e6a:	e0a3      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 faca 	bl	800440c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	619a      	str	r2, [r3, #24]
      break;
 8003eac:	e082      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fb33 	bl	8004520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	61da      	str	r2, [r3, #28]
      break;
 8003eec:	e062      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fb9b 	bl	8004630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	021a      	lsls	r2, r3, #8
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
      break;
 8003f2e:	e041      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fbe4 	bl	8004704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0208 	orr.w	r2, r2, #8
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0204 	bic.w	r2, r2, #4
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f6e:	e021      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fc28 	bl	80047cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003fb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop

08003fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_ConfigClockSource+0x18>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0b5      	b.n	800414c <HAL_TIM_ConfigClockSource+0x184>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401c:	d03e      	beq.n	800409c <HAL_TIM_ConfigClockSource+0xd4>
 800401e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004022:	f200 8087 	bhi.w	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402a:	f000 8085 	beq.w	8004138 <HAL_TIM_ConfigClockSource+0x170>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	d87f      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d01a      	beq.n	800406e <HAL_TIM_ConfigClockSource+0xa6>
 8004038:	2b70      	cmp	r3, #112	; 0x70
 800403a:	d87b      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b60      	cmp	r3, #96	; 0x60
 800403e:	d050      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004040:	2b60      	cmp	r3, #96	; 0x60
 8004042:	d877      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d03c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004048:	2b50      	cmp	r3, #80	; 0x50
 800404a:	d873      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d058      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x13a>
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d86f      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b30      	cmp	r3, #48	; 0x30
 8004056:	d064      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 8004058:	2b30      	cmp	r3, #48	; 0x30
 800405a:	d86b      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b20      	cmp	r3, #32
 800405e:	d060      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d867      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05c      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	2b10      	cmp	r3, #16
 800406a:	d05a      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800406c:	e062      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6899      	ldr	r1, [r3, #8]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f000 fc85 	bl	800498c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004090:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	609a      	str	r2, [r3, #8]
      break;
 800409a:	e04e      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6899      	ldr	r1, [r3, #8]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f000 fc6e 	bl	800498c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040be:	609a      	str	r2, [r3, #8]
      break;
 80040c0:	e03b      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 fbe2 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2150      	movs	r1, #80	; 0x50
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc3b 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 80040e0:	e02b      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 fc01 	bl	80048f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2160      	movs	r1, #96	; 0x60
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fc2b 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004100:	e01b      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f000 fbc2 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fc1b 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004120:	e00b      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f000 fc12 	bl	8004956 <TIM_ITRx_SetConfig>
        break;
 8004132:	e002      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004138:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a40      	ldr	r2, [pc, #256]	; (80042cc <TIM_Base_SetConfig+0x114>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a3d      	ldr	r2, [pc, #244]	; (80042d0 <TIM_Base_SetConfig+0x118>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3c      	ldr	r2, [pc, #240]	; (80042d4 <TIM_Base_SetConfig+0x11c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <TIM_Base_SetConfig+0x120>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3a      	ldr	r2, [pc, #232]	; (80042dc <TIM_Base_SetConfig+0x124>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <TIM_Base_SetConfig+0x114>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01f      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d01b      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <TIM_Base_SetConfig+0x118>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d017      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <TIM_Base_SetConfig+0x11c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <TIM_Base_SetConfig+0x120>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <TIM_Base_SetConfig+0x124>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <TIM_Base_SetConfig+0x128>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <TIM_Base_SetConfig+0x12c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <TIM_Base_SetConfig+0x130>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a10      	ldr	r2, [pc, #64]	; (80042cc <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a12      	ldr	r2, [pc, #72]	; (80042dc <TIM_Base_SetConfig+0x124>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <TIM_Base_SetConfig+0x128>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <TIM_Base_SetConfig+0x12c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0f      	ldr	r2, [pc, #60]	; (80042e8 <TIM_Base_SetConfig+0x130>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d103      	bne.n	80042b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	615a      	str	r2, [r3, #20]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40000c00 	.word	0x40000c00
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800

080042ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f023 0302 	bic.w	r3, r3, #2
 8004338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <TIM_OC1_SetConfig+0x10c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_OC1_SetConfig+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a2b      	ldr	r2, [pc, #172]	; (80043fc <TIM_OC1_SetConfig+0x110>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_OC1_SetConfig+0x80>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <TIM_OC1_SetConfig+0x114>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_OC1_SetConfig+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a29      	ldr	r2, [pc, #164]	; (8004404 <TIM_OC1_SetConfig+0x118>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC1_SetConfig+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <TIM_OC1_SetConfig+0x11c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10c      	bne.n	8004386 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0308 	bic.w	r3, r3, #8
 8004372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <TIM_OC1_SetConfig+0x10c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00f      	beq.n	80043ae <TIM_OC1_SetConfig+0xc2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <TIM_OC1_SetConfig+0x110>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00b      	beq.n	80043ae <TIM_OC1_SetConfig+0xc2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a19      	ldr	r2, [pc, #100]	; (8004400 <TIM_OC1_SetConfig+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <TIM_OC1_SetConfig+0xc2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <TIM_OC1_SetConfig+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_OC1_SetConfig+0xc2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <TIM_OC1_SetConfig+0x11c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d111      	bne.n	80043d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0210 	bic.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0320 	bic.w	r3, r3, #32
 800445a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <TIM_OC2_SetConfig+0x100>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC2_SetConfig+0x6c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <TIM_OC2_SetConfig+0x104>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10d      	bne.n	8004494 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1d      	ldr	r2, [pc, #116]	; (800450c <TIM_OC2_SetConfig+0x100>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_OC2_SetConfig+0xb0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_OC2_SetConfig+0x104>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_OC2_SetConfig+0xb0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <TIM_OC2_SetConfig+0x108>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_OC2_SetConfig+0xb0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <TIM_OC2_SetConfig+0x10c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC2_SetConfig+0xb0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <TIM_OC2_SetConfig+0x110>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d113      	bne.n	80044e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0303 	bic.w	r3, r3, #3
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800456c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a27      	ldr	r2, [pc, #156]	; (800461c <TIM_OC3_SetConfig+0xfc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC3_SetConfig+0x6a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a26      	ldr	r2, [pc, #152]	; (8004620 <TIM_OC3_SetConfig+0x100>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10d      	bne.n	80045a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <TIM_OC3_SetConfig+0xfc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_OC3_SetConfig+0xae>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <TIM_OC3_SetConfig+0x100>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_OC3_SetConfig+0xae>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <TIM_OC3_SetConfig+0x104>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_OC3_SetConfig+0xae>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <TIM_OC3_SetConfig+0x108>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC3_SetConfig+0xae>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <TIM_OC3_SetConfig+0x10c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d113      	bne.n	80045f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40013400 	.word	0x40013400
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800

08004630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <TIM_OC4_SetConfig+0xc0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00f      	beq.n	80046b4 <TIM_OC4_SetConfig+0x84>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <TIM_OC4_SetConfig+0xc4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_OC4_SetConfig+0x84>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <TIM_OC4_SetConfig+0xc8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_OC4_SetConfig+0x84>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <TIM_OC4_SetConfig+0xcc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_OC4_SetConfig+0x84>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a14      	ldr	r2, [pc, #80]	; (8004700 <TIM_OC4_SetConfig+0xd0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d109      	bne.n	80046c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	019b      	lsls	r3, r3, #6
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40013400 	.word	0x40013400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800

08004704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <TIM_OC5_SetConfig+0xb4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_OC5_SetConfig+0x7a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <TIM_OC5_SetConfig+0xb8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_OC5_SetConfig+0x7a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <TIM_OC5_SetConfig+0xbc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_OC5_SetConfig+0x7a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <TIM_OC5_SetConfig+0xc0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_OC5_SetConfig+0x7a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <TIM_OC5_SetConfig+0xc4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d109      	bne.n	8004792 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	621a      	str	r2, [r3, #32]
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	051b      	lsls	r3, r3, #20
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a18      	ldr	r2, [pc, #96]	; (8004884 <TIM_OC6_SetConfig+0xb8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_OC6_SetConfig+0x7c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a17      	ldr	r2, [pc, #92]	; (8004888 <TIM_OC6_SetConfig+0xbc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_OC6_SetConfig+0x7c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a16      	ldr	r2, [pc, #88]	; (800488c <TIM_OC6_SetConfig+0xc0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_OC6_SetConfig+0x7c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a15      	ldr	r2, [pc, #84]	; (8004890 <TIM_OC6_SetConfig+0xc4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC6_SetConfig+0x7c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a14      	ldr	r2, [pc, #80]	; (8004894 <TIM_OC6_SetConfig+0xc8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d109      	bne.n	800485c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	029b      	lsls	r3, r3, #10
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40013400 	.word	0x40013400
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0210 	bic.w	r2, r3, #16
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	f043 0307 	orr.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	609a      	str	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2201      	movs	r2, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e068      	b.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2e      	ldr	r2, [pc, #184]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01d      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d018      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10c      	bne.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40013400 	.word	0x40013400
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40014000 	.word	0x40014000

08004b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e040      	b.n	8004bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fb ffb0 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	; 0x24
 8004b90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fb3a 	bl	800521c <UART_SetConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fdb8 	bl	8005730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fe3f 	bl	8005874 <UART_CheckIdleState>
 8004bf6:	4603      	mov	r3, r0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	f040 8082 	bne.w	8004d1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_UART_Transmit+0x26>
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07a      	b.n	8004d20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Transmit+0x38>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e073      	b.n	8004d20 <HAL_UART_Transmit+0x120>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2221      	movs	r2, #33	; 0x21
 8004c4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c4e:	f7fc faf9 	bl	8001244 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6c:	d108      	bne.n	8004c80 <HAL_UART_Transmit+0x80>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e003      	b.n	8004c88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c90:	e02d      	b.n	8004cee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2180      	movs	r1, #128	; 0x80
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fe32 	bl	8005906 <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e039      	b.n	8004d20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	881a      	ldrh	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e008      	b.n	8004cdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1cb      	bne.n	8004c92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2200      	movs	r2, #0
 8004d02:	2140      	movs	r1, #64	; 0x40
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fdfe 	bl	8005906 <UART_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e005      	b.n	8004d20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d131      	bne.n	8004da2 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_UART_Receive_DMA+0x22>
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e02a      	b.n	8004da4 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Receive_DMA+0x34>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e023      	b.n	8004da4 <HAL_UART_Receive_DMA+0x7c>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <HAL_UART_Receive_DMA+0x84>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d90:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	461a      	mov	r2, r3
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fe31 	bl	8005a00 <UART_Start_Receive_DMA>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	e000      	b.n	8004da4 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40008000 	.word	0x40008000

08004db0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d113      	bne.n	8004e08 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00e      	beq.n	8004e08 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d009      	beq.n	8004e08 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 81ce 	beq.w	800519a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
      }
      return;
 8004e06:	e1c8      	b.n	800519a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80e3 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4ba6      	ldr	r3, [pc, #664]	; (80050b8 <HAL_UART_IRQHandler+0x308>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80d8 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_UART_IRQHandler+0xa2>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e48:	f043 0201 	orr.w	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d010      	beq.n	8004e7e <HAL_UART_IRQHandler+0xce>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e74:	f043 0204 	orr.w	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d010      	beq.n	8004eaa <HAL_UART_IRQHandler+0xfa>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2204      	movs	r2, #4
 8004e98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea0:	f043 0202 	orr.w	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed6:	f043 0208 	orr.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d011      	beq.n	8004f0e <HAL_UART_IRQHandler+0x15e>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8142 	beq.w	800519e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d004      	beq.n	8004f5e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d031      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fdcf 	bl	8005b02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d123      	bne.n	8004fba <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a4b      	ldr	r2, [pc, #300]	; (80050bc <HAL_UART_IRQHandler+0x30c>)
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc fbec 	bl	8001774 <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00f      	b.n	8004fd2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f91c 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00b      	b.n	8004fd2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f918 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e007      	b.n	8004fd2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f914 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004fd0:	e0e5      	b.n	800519e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd2:	bf00      	nop
    return;
 8004fd4:	e0e3      	b.n	800519e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	f040 80a9 	bne.w	8005132 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80a3 	beq.w	8005132 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 809d 	beq.w	8005132 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d158      	bne.n	80050c0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005018:	893b      	ldrh	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80c1 	beq.w	80051a2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005026:	893a      	ldrh	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	f080 80ba 	bcs.w	80051a2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	893a      	ldrh	r2, [r7, #8]
 8005032:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d12a      	bne.n	800509c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005054:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005074:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0210 	bic.w	r2, r2, #16
 8005090:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	4618      	mov	r0, r3
 8005098:	f7fc fb2e 	bl	80016f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f8a7 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050b6:	e074      	b.n	80051a2 <HAL_UART_IRQHandler+0x3f2>
 80050b8:	04000120 	.word	0x04000120
 80050bc:	08005cad 	.word	0x08005cad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d063      	beq.n	80051a6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80050de:	897b      	ldrh	r3, [r7, #10]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d060      	beq.n	80051a6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050f2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0210 	bic.w	r2, r2, #16
 8005124:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005126:	897b      	ldrh	r3, [r7, #10]
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f86a 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005130:	e039      	b.n	80051a6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_UART_IRQHandler+0x3a8>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800514e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fdda 	bl	8005d0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005156:	e029      	b.n	80051ac <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
    }
    return;
 800517c:	e015      	b.n	80051aa <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d011      	beq.n	80051ac <HAL_UART_IRQHandler+0x3fc>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fda0 	bl	8005cd8 <UART_EndTransmit_IT>
    return;
 8005198:	e008      	b.n	80051ac <HAL_UART_IRQHandler+0x3fc>
      return;
 800519a:	bf00      	nop
 800519c:	e006      	b.n	80051ac <HAL_UART_IRQHandler+0x3fc>
    return;
 800519e:	bf00      	nop
 80051a0:	e004      	b.n	80051ac <HAL_UART_IRQHandler+0x3fc>
      return;
 80051a2:	bf00      	nop
 80051a4:	e002      	b.n	80051ac <HAL_UART_IRQHandler+0x3fc>
      return;
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <HAL_UART_IRQHandler+0x3fc>
    return;
 80051aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop

080051b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800521c:	b5b0      	push	{r4, r5, r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4313      	orrs	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4bad      	ldr	r3, [pc, #692]	; (80054fc <UART_SetConfig+0x2e0>)
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	69f9      	ldr	r1, [r7, #28]
 8005250:	430b      	orrs	r3, r1
 8005252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4aa2      	ldr	r2, [pc, #648]	; (8005500 <UART_SetConfig+0x2e4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	4313      	orrs	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a99      	ldr	r2, [pc, #612]	; (8005504 <UART_SetConfig+0x2e8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d121      	bne.n	80052e6 <UART_SetConfig+0xca>
 80052a2:	4b99      	ldr	r3, [pc, #612]	; (8005508 <UART_SetConfig+0x2ec>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d817      	bhi.n	80052e0 <UART_SetConfig+0xc4>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x9c>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052d5 	.word	0x080052d5
 80052c0:	080052cf 	.word	0x080052cf
 80052c4:	080052db 	.word	0x080052db
 80052c8:	2301      	movs	r3, #1
 80052ca:	76fb      	strb	r3, [r7, #27]
 80052cc:	e0e7      	b.n	800549e <UART_SetConfig+0x282>
 80052ce:	2302      	movs	r3, #2
 80052d0:	76fb      	strb	r3, [r7, #27]
 80052d2:	e0e4      	b.n	800549e <UART_SetConfig+0x282>
 80052d4:	2304      	movs	r3, #4
 80052d6:	76fb      	strb	r3, [r7, #27]
 80052d8:	e0e1      	b.n	800549e <UART_SetConfig+0x282>
 80052da:	2308      	movs	r3, #8
 80052dc:	76fb      	strb	r3, [r7, #27]
 80052de:	e0de      	b.n	800549e <UART_SetConfig+0x282>
 80052e0:	2310      	movs	r3, #16
 80052e2:	76fb      	strb	r3, [r7, #27]
 80052e4:	e0db      	b.n	800549e <UART_SetConfig+0x282>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a88      	ldr	r2, [pc, #544]	; (800550c <UART_SetConfig+0x2f0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d132      	bne.n	8005356 <UART_SetConfig+0x13a>
 80052f0:	4b85      	ldr	r3, [pc, #532]	; (8005508 <UART_SetConfig+0x2ec>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d828      	bhi.n	8005350 <UART_SetConfig+0x134>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0xe8>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005339 	.word	0x08005339
 8005308:	08005351 	.word	0x08005351
 800530c:	08005351 	.word	0x08005351
 8005310:	08005351 	.word	0x08005351
 8005314:	08005345 	.word	0x08005345
 8005318:	08005351 	.word	0x08005351
 800531c:	08005351 	.word	0x08005351
 8005320:	08005351 	.word	0x08005351
 8005324:	0800533f 	.word	0x0800533f
 8005328:	08005351 	.word	0x08005351
 800532c:	08005351 	.word	0x08005351
 8005330:	08005351 	.word	0x08005351
 8005334:	0800534b 	.word	0x0800534b
 8005338:	2300      	movs	r3, #0
 800533a:	76fb      	strb	r3, [r7, #27]
 800533c:	e0af      	b.n	800549e <UART_SetConfig+0x282>
 800533e:	2302      	movs	r3, #2
 8005340:	76fb      	strb	r3, [r7, #27]
 8005342:	e0ac      	b.n	800549e <UART_SetConfig+0x282>
 8005344:	2304      	movs	r3, #4
 8005346:	76fb      	strb	r3, [r7, #27]
 8005348:	e0a9      	b.n	800549e <UART_SetConfig+0x282>
 800534a:	2308      	movs	r3, #8
 800534c:	76fb      	strb	r3, [r7, #27]
 800534e:	e0a6      	b.n	800549e <UART_SetConfig+0x282>
 8005350:	2310      	movs	r3, #16
 8005352:	76fb      	strb	r3, [r7, #27]
 8005354:	e0a3      	b.n	800549e <UART_SetConfig+0x282>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6d      	ldr	r2, [pc, #436]	; (8005510 <UART_SetConfig+0x2f4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d120      	bne.n	80053a2 <UART_SetConfig+0x186>
 8005360:	4b69      	ldr	r3, [pc, #420]	; (8005508 <UART_SetConfig+0x2ec>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800536a:	2b30      	cmp	r3, #48	; 0x30
 800536c:	d013      	beq.n	8005396 <UART_SetConfig+0x17a>
 800536e:	2b30      	cmp	r3, #48	; 0x30
 8005370:	d814      	bhi.n	800539c <UART_SetConfig+0x180>
 8005372:	2b20      	cmp	r3, #32
 8005374:	d009      	beq.n	800538a <UART_SetConfig+0x16e>
 8005376:	2b20      	cmp	r3, #32
 8005378:	d810      	bhi.n	800539c <UART_SetConfig+0x180>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <UART_SetConfig+0x168>
 800537e:	2b10      	cmp	r3, #16
 8005380:	d006      	beq.n	8005390 <UART_SetConfig+0x174>
 8005382:	e00b      	b.n	800539c <UART_SetConfig+0x180>
 8005384:	2300      	movs	r3, #0
 8005386:	76fb      	strb	r3, [r7, #27]
 8005388:	e089      	b.n	800549e <UART_SetConfig+0x282>
 800538a:	2302      	movs	r3, #2
 800538c:	76fb      	strb	r3, [r7, #27]
 800538e:	e086      	b.n	800549e <UART_SetConfig+0x282>
 8005390:	2304      	movs	r3, #4
 8005392:	76fb      	strb	r3, [r7, #27]
 8005394:	e083      	b.n	800549e <UART_SetConfig+0x282>
 8005396:	2308      	movs	r3, #8
 8005398:	76fb      	strb	r3, [r7, #27]
 800539a:	e080      	b.n	800549e <UART_SetConfig+0x282>
 800539c:	2310      	movs	r3, #16
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e07d      	b.n	800549e <UART_SetConfig+0x282>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a5b      	ldr	r2, [pc, #364]	; (8005514 <UART_SetConfig+0x2f8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d120      	bne.n	80053ee <UART_SetConfig+0x1d2>
 80053ac:	4b56      	ldr	r3, [pc, #344]	; (8005508 <UART_SetConfig+0x2ec>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053b6:	2bc0      	cmp	r3, #192	; 0xc0
 80053b8:	d013      	beq.n	80053e2 <UART_SetConfig+0x1c6>
 80053ba:	2bc0      	cmp	r3, #192	; 0xc0
 80053bc:	d814      	bhi.n	80053e8 <UART_SetConfig+0x1cc>
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d009      	beq.n	80053d6 <UART_SetConfig+0x1ba>
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d810      	bhi.n	80053e8 <UART_SetConfig+0x1cc>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <UART_SetConfig+0x1b4>
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d006      	beq.n	80053dc <UART_SetConfig+0x1c0>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x1cc>
 80053d0:	2300      	movs	r3, #0
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e063      	b.n	800549e <UART_SetConfig+0x282>
 80053d6:	2302      	movs	r3, #2
 80053d8:	76fb      	strb	r3, [r7, #27]
 80053da:	e060      	b.n	800549e <UART_SetConfig+0x282>
 80053dc:	2304      	movs	r3, #4
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e05d      	b.n	800549e <UART_SetConfig+0x282>
 80053e2:	2308      	movs	r3, #8
 80053e4:	76fb      	strb	r3, [r7, #27]
 80053e6:	e05a      	b.n	800549e <UART_SetConfig+0x282>
 80053e8:	2310      	movs	r3, #16
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e057      	b.n	800549e <UART_SetConfig+0x282>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a49      	ldr	r2, [pc, #292]	; (8005518 <UART_SetConfig+0x2fc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d125      	bne.n	8005444 <UART_SetConfig+0x228>
 80053f8:	4b43      	ldr	r3, [pc, #268]	; (8005508 <UART_SetConfig+0x2ec>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005406:	d017      	beq.n	8005438 <UART_SetConfig+0x21c>
 8005408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540c:	d817      	bhi.n	800543e <UART_SetConfig+0x222>
 800540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005412:	d00b      	beq.n	800542c <UART_SetConfig+0x210>
 8005414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005418:	d811      	bhi.n	800543e <UART_SetConfig+0x222>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <UART_SetConfig+0x20a>
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	d006      	beq.n	8005432 <UART_SetConfig+0x216>
 8005424:	e00b      	b.n	800543e <UART_SetConfig+0x222>
 8005426:	2300      	movs	r3, #0
 8005428:	76fb      	strb	r3, [r7, #27]
 800542a:	e038      	b.n	800549e <UART_SetConfig+0x282>
 800542c:	2302      	movs	r3, #2
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	e035      	b.n	800549e <UART_SetConfig+0x282>
 8005432:	2304      	movs	r3, #4
 8005434:	76fb      	strb	r3, [r7, #27]
 8005436:	e032      	b.n	800549e <UART_SetConfig+0x282>
 8005438:	2308      	movs	r3, #8
 800543a:	76fb      	strb	r3, [r7, #27]
 800543c:	e02f      	b.n	800549e <UART_SetConfig+0x282>
 800543e:	2310      	movs	r3, #16
 8005440:	76fb      	strb	r3, [r7, #27]
 8005442:	e02c      	b.n	800549e <UART_SetConfig+0x282>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2d      	ldr	r2, [pc, #180]	; (8005500 <UART_SetConfig+0x2e4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d125      	bne.n	800549a <UART_SetConfig+0x27e>
 800544e:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <UART_SetConfig+0x2ec>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545c:	d017      	beq.n	800548e <UART_SetConfig+0x272>
 800545e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005462:	d817      	bhi.n	8005494 <UART_SetConfig+0x278>
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d00b      	beq.n	8005482 <UART_SetConfig+0x266>
 800546a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546e:	d811      	bhi.n	8005494 <UART_SetConfig+0x278>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <UART_SetConfig+0x260>
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005478:	d006      	beq.n	8005488 <UART_SetConfig+0x26c>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x278>
 800547c:	2300      	movs	r3, #0
 800547e:	76fb      	strb	r3, [r7, #27]
 8005480:	e00d      	b.n	800549e <UART_SetConfig+0x282>
 8005482:	2302      	movs	r3, #2
 8005484:	76fb      	strb	r3, [r7, #27]
 8005486:	e00a      	b.n	800549e <UART_SetConfig+0x282>
 8005488:	2304      	movs	r3, #4
 800548a:	76fb      	strb	r3, [r7, #27]
 800548c:	e007      	b.n	800549e <UART_SetConfig+0x282>
 800548e:	2308      	movs	r3, #8
 8005490:	76fb      	strb	r3, [r7, #27]
 8005492:	e004      	b.n	800549e <UART_SetConfig+0x282>
 8005494:	2310      	movs	r3, #16
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e001      	b.n	800549e <UART_SetConfig+0x282>
 800549a:	2310      	movs	r3, #16
 800549c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a17      	ldr	r2, [pc, #92]	; (8005500 <UART_SetConfig+0x2e4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	f040 8087 	bne.w	80055b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054aa:	7efb      	ldrb	r3, [r7, #27]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d837      	bhi.n	8005520 <UART_SetConfig+0x304>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x29c>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	08005521 	.word	0x08005521
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	08005521 	.word	0x08005521
 80054c8:	080054eb 	.word	0x080054eb
 80054cc:	08005521 	.word	0x08005521
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005521 	.word	0x08005521
 80054d8:	080054f3 	.word	0x080054f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fd f9e8 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 80054e0:	6178      	str	r0, [r7, #20]
        break;
 80054e2:	e022      	b.n	800552a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <UART_SetConfig+0x300>)
 80054e6:	617b      	str	r3, [r7, #20]
        break;
 80054e8:	e01f      	b.n	800552a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ea:	f7fd f949 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 80054ee:	6178      	str	r0, [r7, #20]
        break;
 80054f0:	e01b      	b.n	800552a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f6:	617b      	str	r3, [r7, #20]
        break;
 80054f8:	e017      	b.n	800552a <UART_SetConfig+0x30e>
 80054fa:	bf00      	nop
 80054fc:	efff69f3 	.word	0xefff69f3
 8005500:	40008000 	.word	0x40008000
 8005504:	40013800 	.word	0x40013800
 8005508:	40021000 	.word	0x40021000
 800550c:	40004400 	.word	0x40004400
 8005510:	40004800 	.word	0x40004800
 8005514:	40004c00 	.word	0x40004c00
 8005518:	40005000 	.word	0x40005000
 800551c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	76bb      	strb	r3, [r7, #26]
        break;
 8005528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80f1 	beq.w	8005714 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	429a      	cmp	r2, r3
 8005540:	d305      	bcc.n	800554e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	429a      	cmp	r2, r3
 800554c:	d902      	bls.n	8005554 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	76bb      	strb	r3, [r7, #26]
 8005552:	e0df      	b.n	8005714 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4618      	mov	r0, r3
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	020b      	lsls	r3, r1, #8
 8005566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800556a:	0202      	lsls	r2, r0, #8
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	6849      	ldr	r1, [r1, #4]
 8005570:	0849      	lsrs	r1, r1, #1
 8005572:	4608      	mov	r0, r1
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	1814      	adds	r4, r2, r0
 800557a:	eb43 0501 	adc.w	r5, r3, r1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	461a      	mov	r2, r3
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	4620      	mov	r0, r4
 800558a:	4629      	mov	r1, r5
 800558c:	f7fa fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4613      	mov	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559e:	d308      	bcc.n	80055b2 <UART_SetConfig+0x396>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d204      	bcs.n	80055b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	60da      	str	r2, [r3, #12]
 80055b0:	e0b0      	b.n	8005714 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	76bb      	strb	r3, [r7, #26]
 80055b6:	e0ad      	b.n	8005714 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c0:	d15c      	bne.n	800567c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80055c2:	7efb      	ldrb	r3, [r7, #27]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d828      	bhi.n	800561a <UART_SetConfig+0x3fe>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <UART_SetConfig+0x3b4>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	08005605 	.word	0x08005605
 80055dc:	0800561b 	.word	0x0800561b
 80055e0:	0800560b 	.word	0x0800560b
 80055e4:	0800561b 	.word	0x0800561b
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	0800561b 	.word	0x0800561b
 80055f0:	08005613 	.word	0x08005613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f4:	f7fd f95c 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 80055f8:	6178      	str	r0, [r7, #20]
        break;
 80055fa:	e013      	b.n	8005624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055fc:	f7fd f96e 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8005600:	6178      	str	r0, [r7, #20]
        break;
 8005602:	e00f      	b.n	8005624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005604:	4b49      	ldr	r3, [pc, #292]	; (800572c <UART_SetConfig+0x510>)
 8005606:	617b      	str	r3, [r7, #20]
        break;
 8005608:	e00c      	b.n	8005624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560a:	f7fd f8b9 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800560e:	6178      	str	r0, [r7, #20]
        break;
 8005610:	e008      	b.n	8005624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005616:	617b      	str	r3, [r7, #20]
        break;
 8005618:	e004      	b.n	8005624 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	76bb      	strb	r3, [r7, #26]
        break;
 8005622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d074      	beq.n	8005714 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	b29b      	uxth	r3, r3
 8005640:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b0f      	cmp	r3, #15
 8005646:	d916      	bls.n	8005676 <UART_SetConfig+0x45a>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564e:	d212      	bcs.n	8005676 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f023 030f 	bic.w	r3, r3, #15
 8005658:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	b29b      	uxth	r3, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	b29a      	uxth	r2, r3
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	4313      	orrs	r3, r2
 800566a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	89fa      	ldrh	r2, [r7, #14]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e04e      	b.n	8005714 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	76bb      	strb	r3, [r7, #26]
 800567a:	e04b      	b.n	8005714 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800567c:	7efb      	ldrb	r3, [r7, #27]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d827      	bhi.n	80056d2 <UART_SetConfig+0x4b6>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x46c>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056c3 	.word	0x080056c3
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056d3 	.word	0x080056d3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fd f900 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 80056b0:	6178      	str	r0, [r7, #20]
        break;
 80056b2:	e013      	b.n	80056dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fd f912 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80056b8:	6178      	str	r0, [r7, #20]
        break;
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <UART_SetConfig+0x510>)
 80056be:	617b      	str	r3, [r7, #20]
        break;
 80056c0:	e00c      	b.n	80056dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fd f85d 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 80056c6:	6178      	str	r0, [r7, #20]
        break;
 80056c8:	e008      	b.n	80056dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ce:	617b      	str	r3, [r7, #20]
        break;
 80056d0:	e004      	b.n	80056dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	76bb      	strb	r3, [r7, #26]
        break;
 80056da:	bf00      	nop
    }

    if (pclk != 0U)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085a      	lsrs	r2, r3, #1
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	441a      	add	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d908      	bls.n	8005710 <UART_SetConfig+0x4f4>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d204      	bcs.n	8005710 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	e001      	b.n	8005714 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005720:	7ebb      	ldrb	r3, [r7, #26]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bdb0      	pop	{r4, r5, r7, pc}
 800572a:	bf00      	nop
 800572c:	00f42400 	.word	0x00f42400

08005730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582e:	d10a      	bne.n	8005846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005884:	f7fb fcde 	bl	8001244 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10e      	bne.n	80058b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f82d 	bl	8005906 <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e023      	b.n	80058fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d10e      	bne.n	80058e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f817 	bl	8005906 <UART_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e00d      	b.n	80058fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	e05e      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d05a      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005920:	f7fb fc90 	bl	8001244 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <UART_WaitOnFlagUntilTimeout+0x30>
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11b      	bne.n	800596e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005944:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e043      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02c      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598a:	d124      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005994:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e00f      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4013      	ands	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d091      	beq.n	8005918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2222      	movs	r2, #34	; 0x22
 8005a28:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02b      	beq.n	8005a8a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	4a25      	ldr	r2, [pc, #148]	; (8005acc <UART_Start_Receive_DMA+0xcc>)
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <UART_Start_Receive_DMA+0xd0>)
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <UART_Start_Receive_DMA+0xd4>)
 8005a48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	2200      	movs	r2, #0
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	461a      	mov	r2, r3
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	f7fb fde7 	bl	8001638 <HAL_DMA_Start_IT>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2210      	movs	r2, #16
 8005a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e01c      	b.n	8005ac4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	08005b61 	.word	0x08005b61
 8005ad0:	08005bf9 	.word	0x08005bf9
 8005ad4:	08005c31 	.word	0x08005c31

08005ad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005aee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b18:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d107      	bne.n	8005b42 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0210 	bic.w	r2, r2, #16
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d12a      	bne.n	8005bd2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b92:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0210 	bic.w	r2, r2, #16
 8005bd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d107      	bne.n	8005bea <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005be0:	4619      	mov	r1, r3
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fb0e 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005be8:	e002      	b.n	8005bf0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff faec 	bl	80051c8 <HAL_UART_RxCpltCallback>
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d109      	bne.n	8005c22 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff faf2 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c20:	e002      	b.n	8005c28 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fada 	bl	80051dc <HAL_UART_RxHalfCpltCallback>
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d109      	bne.n	8005c6c <UART_DMAError+0x3c>
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b21      	cmp	r3, #33	; 0x21
 8005c5c:	d106      	bne.n	8005c6c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f7ff ff36 	bl	8005ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d109      	bne.n	8005c8e <UART_DMAError+0x5e>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b22      	cmp	r3, #34	; 0x22
 8005c7e:	d106      	bne.n	8005c8e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	f7ff ff3a 	bl	8005b02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c94:	f043 0210 	orr.w	r2, r3, #16
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f7ff faa6 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca4:	bf00      	nop
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff fa90 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff fa59 	bl	80051b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <__libc_init_array>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4d0d      	ldr	r5, [pc, #52]	; (8005d58 <__libc_init_array+0x38>)
 8005d24:	4c0d      	ldr	r4, [pc, #52]	; (8005d5c <__libc_init_array+0x3c>)
 8005d26:	1b64      	subs	r4, r4, r5
 8005d28:	10a4      	asrs	r4, r4, #2
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	d109      	bne.n	8005d44 <__libc_init_array+0x24>
 8005d30:	4d0b      	ldr	r5, [pc, #44]	; (8005d60 <__libc_init_array+0x40>)
 8005d32:	4c0c      	ldr	r4, [pc, #48]	; (8005d64 <__libc_init_array+0x44>)
 8005d34:	f000 f820 	bl	8005d78 <_init>
 8005d38:	1b64      	subs	r4, r4, r5
 8005d3a:	10a4      	asrs	r4, r4, #2
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	42a6      	cmp	r6, r4
 8005d40:	d105      	bne.n	8005d4e <__libc_init_array+0x2e>
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d48:	4798      	blx	r3
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7ee      	b.n	8005d2c <__libc_init_array+0xc>
 8005d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d52:	4798      	blx	r3
 8005d54:	3601      	adds	r6, #1
 8005d56:	e7f2      	b.n	8005d3e <__libc_init_array+0x1e>
 8005d58:	08005de0 	.word	0x08005de0
 8005d5c:	08005de0 	.word	0x08005de0
 8005d60:	08005de0 	.word	0x08005de0
 8005d64:	08005de4 	.word	0x08005de4

08005d68 <memset>:
 8005d68:	4402      	add	r2, r0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <memset+0xa>
 8005d70:	4770      	bx	lr
 8005d72:	f803 1b01 	strb.w	r1, [r3], #1
 8005d76:	e7f9      	b.n	8005d6c <memset+0x4>

08005d78 <_init>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr

08005d84 <_fini>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr
